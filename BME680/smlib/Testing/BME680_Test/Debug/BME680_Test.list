
BME680_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000593c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08005acc  08005acc  00015acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bc0  08005bc0  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005bc0  08005bc0  00015bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bc8  08005bc8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bc8  08005bc8  00015bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bcc  08005bcc  00015bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005bd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000250  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002b8  200002b8  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   000096a6  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001b7e  00000000  00000000  00029781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000008e0  00000000  00000000  0002b300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000006bb  00000000  00000000  0002bbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fb2e  00000000  00000000  0002c29b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000c28d  00000000  00000000  0004bdc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000badee  00000000  00000000  00058056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002c20  00000000  00000000  00112e44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  00115a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ab4 	.word	0x08005ab4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005ab4 	.word	0x08005ab4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_ldivmod>:
 8000a5c:	b97b      	cbnz	r3, 8000a7e <__aeabi_ldivmod+0x22>
 8000a5e:	b972      	cbnz	r2, 8000a7e <__aeabi_ldivmod+0x22>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bfbe      	ittt	lt
 8000a64:	2000      	movlt	r0, #0
 8000a66:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000a6a:	e006      	blt.n	8000a7a <__aeabi_ldivmod+0x1e>
 8000a6c:	bf08      	it	eq
 8000a6e:	2800      	cmpeq	r0, #0
 8000a70:	bf1c      	itt	ne
 8000a72:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000a76:	f04f 30ff 	movne.w	r0, #4294967295
 8000a7a:	f000 b9bb 	b.w	8000df4 <__aeabi_idiv0>
 8000a7e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a82:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a86:	2900      	cmp	r1, #0
 8000a88:	db09      	blt.n	8000a9e <__aeabi_ldivmod+0x42>
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	db1a      	blt.n	8000ac4 <__aeabi_ldivmod+0x68>
 8000a8e:	f000 f84d 	bl	8000b2c <__udivmoddi4>
 8000a92:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a9a:	b004      	add	sp, #16
 8000a9c:	4770      	bx	lr
 8000a9e:	4240      	negs	r0, r0
 8000aa0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	db1b      	blt.n	8000ae0 <__aeabi_ldivmod+0x84>
 8000aa8:	f000 f840 	bl	8000b2c <__udivmoddi4>
 8000aac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab4:	b004      	add	sp, #16
 8000ab6:	4240      	negs	r0, r0
 8000ab8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000abc:	4252      	negs	r2, r2
 8000abe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ac2:	4770      	bx	lr
 8000ac4:	4252      	negs	r2, r2
 8000ac6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000aca:	f000 f82f 	bl	8000b2c <__udivmoddi4>
 8000ace:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad6:	b004      	add	sp, #16
 8000ad8:	4240      	negs	r0, r0
 8000ada:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ade:	4770      	bx	lr
 8000ae0:	4252      	negs	r2, r2
 8000ae2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ae6:	f000 f821 	bl	8000b2c <__udivmoddi4>
 8000aea:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af2:	b004      	add	sp, #16
 8000af4:	4252      	negs	r2, r2
 8000af6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000afa:	4770      	bx	lr

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b970 	b.w	8000df4 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9e08      	ldr	r6, [sp, #32]
 8000b32:	460d      	mov	r5, r1
 8000b34:	4604      	mov	r4, r0
 8000b36:	460f      	mov	r7, r1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d14a      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3c:	428a      	cmp	r2, r1
 8000b3e:	4694      	mov	ip, r2
 8000b40:	d965      	bls.n	8000c0e <__udivmoddi4+0xe2>
 8000b42:	fab2 f382 	clz	r3, r2
 8000b46:	b143      	cbz	r3, 8000b5a <__udivmoddi4+0x2e>
 8000b48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b4c:	f1c3 0220 	rsb	r2, r3, #32
 8000b50:	409f      	lsls	r7, r3
 8000b52:	fa20 f202 	lsr.w	r2, r0, r2
 8000b56:	4317      	orrs	r7, r2
 8000b58:	409c      	lsls	r4, r3
 8000b5a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b5e:	fa1f f58c 	uxth.w	r5, ip
 8000b62:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b66:	0c22      	lsrs	r2, r4, #16
 8000b68:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b6c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b70:	fb01 f005 	mul.w	r0, r1, r5
 8000b74:	4290      	cmp	r0, r2
 8000b76:	d90a      	bls.n	8000b8e <__udivmoddi4+0x62>
 8000b78:	eb1c 0202 	adds.w	r2, ip, r2
 8000b7c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b80:	f080 811c 	bcs.w	8000dbc <__udivmoddi4+0x290>
 8000b84:	4290      	cmp	r0, r2
 8000b86:	f240 8119 	bls.w	8000dbc <__udivmoddi4+0x290>
 8000b8a:	3902      	subs	r1, #2
 8000b8c:	4462      	add	r2, ip
 8000b8e:	1a12      	subs	r2, r2, r0
 8000b90:	b2a4      	uxth	r4, r4
 8000b92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b9a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b9e:	fb00 f505 	mul.w	r5, r0, r5
 8000ba2:	42a5      	cmp	r5, r4
 8000ba4:	d90a      	bls.n	8000bbc <__udivmoddi4+0x90>
 8000ba6:	eb1c 0404 	adds.w	r4, ip, r4
 8000baa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bae:	f080 8107 	bcs.w	8000dc0 <__udivmoddi4+0x294>
 8000bb2:	42a5      	cmp	r5, r4
 8000bb4:	f240 8104 	bls.w	8000dc0 <__udivmoddi4+0x294>
 8000bb8:	4464      	add	r4, ip
 8000bba:	3802      	subs	r0, #2
 8000bbc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bc0:	1b64      	subs	r4, r4, r5
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	b11e      	cbz	r6, 8000bce <__udivmoddi4+0xa2>
 8000bc6:	40dc      	lsrs	r4, r3
 8000bc8:	2300      	movs	r3, #0
 8000bca:	e9c6 4300 	strd	r4, r3, [r6]
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0xbc>
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	f000 80ed 	beq.w	8000db6 <__udivmoddi4+0x28a>
 8000bdc:	2100      	movs	r1, #0
 8000bde:	e9c6 0500 	strd	r0, r5, [r6]
 8000be2:	4608      	mov	r0, r1
 8000be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be8:	fab3 f183 	clz	r1, r3
 8000bec:	2900      	cmp	r1, #0
 8000bee:	d149      	bne.n	8000c84 <__udivmoddi4+0x158>
 8000bf0:	42ab      	cmp	r3, r5
 8000bf2:	d302      	bcc.n	8000bfa <__udivmoddi4+0xce>
 8000bf4:	4282      	cmp	r2, r0
 8000bf6:	f200 80f8 	bhi.w	8000dea <__udivmoddi4+0x2be>
 8000bfa:	1a84      	subs	r4, r0, r2
 8000bfc:	eb65 0203 	sbc.w	r2, r5, r3
 8000c00:	2001      	movs	r0, #1
 8000c02:	4617      	mov	r7, r2
 8000c04:	2e00      	cmp	r6, #0
 8000c06:	d0e2      	beq.n	8000bce <__udivmoddi4+0xa2>
 8000c08:	e9c6 4700 	strd	r4, r7, [r6]
 8000c0c:	e7df      	b.n	8000bce <__udivmoddi4+0xa2>
 8000c0e:	b902      	cbnz	r2, 8000c12 <__udivmoddi4+0xe6>
 8000c10:	deff      	udf	#255	; 0xff
 8000c12:	fab2 f382 	clz	r3, r2
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f040 8090 	bne.w	8000d3c <__udivmoddi4+0x210>
 8000c1c:	1a8a      	subs	r2, r1, r2
 8000c1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c22:	fa1f fe8c 	uxth.w	lr, ip
 8000c26:	2101      	movs	r1, #1
 8000c28:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c2c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c30:	0c22      	lsrs	r2, r4, #16
 8000c32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c36:	fb0e f005 	mul.w	r0, lr, r5
 8000c3a:	4290      	cmp	r0, r2
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0x124>
 8000c3e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c42:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x122>
 8000c48:	4290      	cmp	r0, r2
 8000c4a:	f200 80cb 	bhi.w	8000de4 <__udivmoddi4+0x2b8>
 8000c4e:	4645      	mov	r5, r8
 8000c50:	1a12      	subs	r2, r2, r0
 8000c52:	b2a4      	uxth	r4, r4
 8000c54:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c58:	fb07 2210 	mls	r2, r7, r0, r2
 8000c5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c60:	fb0e fe00 	mul.w	lr, lr, r0
 8000c64:	45a6      	cmp	lr, r4
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0x14e>
 8000c68:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c70:	d202      	bcs.n	8000c78 <__udivmoddi4+0x14c>
 8000c72:	45a6      	cmp	lr, r4
 8000c74:	f200 80bb 	bhi.w	8000dee <__udivmoddi4+0x2c2>
 8000c78:	4610      	mov	r0, r2
 8000c7a:	eba4 040e 	sub.w	r4, r4, lr
 8000c7e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c82:	e79f      	b.n	8000bc4 <__udivmoddi4+0x98>
 8000c84:	f1c1 0720 	rsb	r7, r1, #32
 8000c88:	408b      	lsls	r3, r1
 8000c8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c92:	fa05 f401 	lsl.w	r4, r5, r1
 8000c96:	fa20 f307 	lsr.w	r3, r0, r7
 8000c9a:	40fd      	lsrs	r5, r7
 8000c9c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ca0:	4323      	orrs	r3, r4
 8000ca2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ca6:	fa1f fe8c 	uxth.w	lr, ip
 8000caa:	fb09 5518 	mls	r5, r9, r8, r5
 8000cae:	0c1c      	lsrs	r4, r3, #16
 8000cb0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cb4:	fb08 f50e 	mul.w	r5, r8, lr
 8000cb8:	42a5      	cmp	r5, r4
 8000cba:	fa02 f201 	lsl.w	r2, r2, r1
 8000cbe:	fa00 f001 	lsl.w	r0, r0, r1
 8000cc2:	d90b      	bls.n	8000cdc <__udivmoddi4+0x1b0>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ccc:	f080 8088 	bcs.w	8000de0 <__udivmoddi4+0x2b4>
 8000cd0:	42a5      	cmp	r5, r4
 8000cd2:	f240 8085 	bls.w	8000de0 <__udivmoddi4+0x2b4>
 8000cd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cda:	4464      	add	r4, ip
 8000cdc:	1b64      	subs	r4, r4, r5
 8000cde:	b29d      	uxth	r5, r3
 8000ce0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ce4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ce8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cec:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x1da>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cfc:	d26c      	bcs.n	8000dd8 <__udivmoddi4+0x2ac>
 8000cfe:	45a6      	cmp	lr, r4
 8000d00:	d96a      	bls.n	8000dd8 <__udivmoddi4+0x2ac>
 8000d02:	3b02      	subs	r3, #2
 8000d04:	4464      	add	r4, ip
 8000d06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d0e:	eba4 040e 	sub.w	r4, r4, lr
 8000d12:	42ac      	cmp	r4, r5
 8000d14:	46c8      	mov	r8, r9
 8000d16:	46ae      	mov	lr, r5
 8000d18:	d356      	bcc.n	8000dc8 <__udivmoddi4+0x29c>
 8000d1a:	d053      	beq.n	8000dc4 <__udivmoddi4+0x298>
 8000d1c:	b156      	cbz	r6, 8000d34 <__udivmoddi4+0x208>
 8000d1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d22:	eb64 040e 	sbc.w	r4, r4, lr
 8000d26:	fa04 f707 	lsl.w	r7, r4, r7
 8000d2a:	40ca      	lsrs	r2, r1
 8000d2c:	40cc      	lsrs	r4, r1
 8000d2e:	4317      	orrs	r7, r2
 8000d30:	e9c6 7400 	strd	r7, r4, [r6]
 8000d34:	4618      	mov	r0, r3
 8000d36:	2100      	movs	r1, #0
 8000d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3c:	f1c3 0120 	rsb	r1, r3, #32
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	fa20 f201 	lsr.w	r2, r0, r1
 8000d48:	fa25 f101 	lsr.w	r1, r5, r1
 8000d4c:	409d      	lsls	r5, r3
 8000d4e:	432a      	orrs	r2, r5
 8000d50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d54:	fa1f fe8c 	uxth.w	lr, ip
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d60:	0c11      	lsrs	r1, r2, #16
 8000d62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d66:	fb00 f50e 	mul.w	r5, r0, lr
 8000d6a:	428d      	cmp	r5, r1
 8000d6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x258>
 8000d72:	eb1c 0101 	adds.w	r1, ip, r1
 8000d76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d7a:	d22f      	bcs.n	8000ddc <__udivmoddi4+0x2b0>
 8000d7c:	428d      	cmp	r5, r1
 8000d7e:	d92d      	bls.n	8000ddc <__udivmoddi4+0x2b0>
 8000d80:	3802      	subs	r0, #2
 8000d82:	4461      	add	r1, ip
 8000d84:	1b49      	subs	r1, r1, r5
 8000d86:	b292      	uxth	r2, r2
 8000d88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d94:	fb05 f10e 	mul.w	r1, r5, lr
 8000d98:	4291      	cmp	r1, r2
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x282>
 8000d9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000da0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da4:	d216      	bcs.n	8000dd4 <__udivmoddi4+0x2a8>
 8000da6:	4291      	cmp	r1, r2
 8000da8:	d914      	bls.n	8000dd4 <__udivmoddi4+0x2a8>
 8000daa:	3d02      	subs	r5, #2
 8000dac:	4462      	add	r2, ip
 8000dae:	1a52      	subs	r2, r2, r1
 8000db0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000db4:	e738      	b.n	8000c28 <__udivmoddi4+0xfc>
 8000db6:	4631      	mov	r1, r6
 8000db8:	4630      	mov	r0, r6
 8000dba:	e708      	b.n	8000bce <__udivmoddi4+0xa2>
 8000dbc:	4639      	mov	r1, r7
 8000dbe:	e6e6      	b.n	8000b8e <__udivmoddi4+0x62>
 8000dc0:	4610      	mov	r0, r2
 8000dc2:	e6fb      	b.n	8000bbc <__udivmoddi4+0x90>
 8000dc4:	4548      	cmp	r0, r9
 8000dc6:	d2a9      	bcs.n	8000d1c <__udivmoddi4+0x1f0>
 8000dc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dcc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	e7a3      	b.n	8000d1c <__udivmoddi4+0x1f0>
 8000dd4:	4645      	mov	r5, r8
 8000dd6:	e7ea      	b.n	8000dae <__udivmoddi4+0x282>
 8000dd8:	462b      	mov	r3, r5
 8000dda:	e794      	b.n	8000d06 <__udivmoddi4+0x1da>
 8000ddc:	4640      	mov	r0, r8
 8000dde:	e7d1      	b.n	8000d84 <__udivmoddi4+0x258>
 8000de0:	46d0      	mov	r8, sl
 8000de2:	e77b      	b.n	8000cdc <__udivmoddi4+0x1b0>
 8000de4:	3d02      	subs	r5, #2
 8000de6:	4462      	add	r2, ip
 8000de8:	e732      	b.n	8000c50 <__udivmoddi4+0x124>
 8000dea:	4608      	mov	r0, r1
 8000dec:	e70a      	b.n	8000c04 <__udivmoddi4+0xd8>
 8000dee:	4464      	add	r4, ip
 8000df0:	3802      	subs	r0, #2
 8000df2:	e742      	b.n	8000c7a <__udivmoddi4+0x14e>

08000df4 <__aeabi_idiv0>:
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop

08000df8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfe:	f107 030c 	add.w	r3, r7, #12
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
 8000e0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <MX_GPIO_Init+0x9c>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a1f      	ldr	r2, [pc, #124]	; (8000e94 <MX_GPIO_Init+0x9c>)
 8000e18:	f043 0304 	orr.w	r3, r3, #4
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <MX_GPIO_Init+0x9c>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0304 	and.w	r3, r3, #4
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <MX_GPIO_Init+0x9c>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a18      	ldr	r2, [pc, #96]	; (8000e94 <MX_GPIO_Init+0x9c>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <MX_GPIO_Init+0x9c>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	603b      	str	r3, [r7, #0]
 8000e4a:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <MX_GPIO_Init+0x9c>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a11      	ldr	r2, [pc, #68]	; (8000e94 <MX_GPIO_Init+0x9c>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <MX_GPIO_Init+0x9c>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e68:	480b      	ldr	r0, [pc, #44]	; (8000e98 <MX_GPIO_Init+0xa0>)
 8000e6a:	f000 fdf1 	bl	8001a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000e6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e74:	2301      	movs	r3, #1
 8000e76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	4619      	mov	r1, r3
 8000e86:	4804      	ldr	r0, [pc, #16]	; (8000e98 <MX_GPIO_Init+0xa0>)
 8000e88:	f000 fc46 	bl	8001718 <HAL_GPIO_Init>

}
 8000e8c:	bf00      	nop
 8000e8e:	3720      	adds	r7, #32
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40020800 	.word	0x40020800

08000e9c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <MX_I2C1_Init+0x50>)
 8000ea2:	4a13      	ldr	r2, [pc, #76]	; (8000ef0 <MX_I2C1_Init+0x54>)
 8000ea4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <MX_I2C1_Init+0x50>)
 8000ea8:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <MX_I2C1_Init+0x58>)
 8000eaa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000eac:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <MX_I2C1_Init+0x50>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <MX_I2C1_Init+0x50>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <MX_I2C1_Init+0x50>)
 8000eba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ebe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <MX_I2C1_Init+0x50>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <MX_I2C1_Init+0x50>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <MX_I2C1_Init+0x50>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <MX_I2C1_Init+0x50>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ed8:	4804      	ldr	r0, [pc, #16]	; (8000eec <MX_I2C1_Init+0x50>)
 8000eda:	f000 fdd3 	bl	8001a84 <HAL_I2C_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ee4:	f000 f964 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000084 	.word	0x20000084
 8000ef0:	40005400 	.word	0x40005400
 8000ef4:	00061a80 	.word	0x00061a80

08000ef8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a19      	ldr	r2, [pc, #100]	; (8000f7c <HAL_I2C_MspInit+0x84>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d12c      	bne.n	8000f74 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <HAL_I2C_MspInit+0x88>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a17      	ldr	r2, [pc, #92]	; (8000f80 <HAL_I2C_MspInit+0x88>)
 8000f24:	f043 0302 	orr.w	r3, r3, #2
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <HAL_I2C_MspInit+0x88>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f3c:	2312      	movs	r3, #18
 8000f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f44:	2303      	movs	r3, #3
 8000f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f48:	2304      	movs	r3, #4
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4619      	mov	r1, r3
 8000f52:	480c      	ldr	r0, [pc, #48]	; (8000f84 <HAL_I2C_MspInit+0x8c>)
 8000f54:	f000 fbe0 	bl	8001718 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <HAL_I2C_MspInit+0x88>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	4a07      	ldr	r2, [pc, #28]	; (8000f80 <HAL_I2C_MspInit+0x88>)
 8000f62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f66:	6413      	str	r3, [r2, #64]	; 0x40
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <HAL_I2C_MspInit+0x88>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f74:	bf00      	nop
 8000f76:	3728      	adds	r7, #40	; 0x28
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40005400 	.word	0x40005400
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40020400 	.word	0x40020400

08000f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b087      	sub	sp, #28
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8e:	f000 fa47 	bl	8001420 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f92:	f000 f877 	bl	8001084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f96:	f7ff ff2f 	bl	8000df8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f9a:	f7ff ff7f 	bl	8000e9c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
//  bme_proobject_init(&bmeA0s);
  fnAPP_Init_Standard_Values();
 8000f9e:	f000 f8db 	bl	8001158 <fnAPP_Init_Standard_Values>
  init_bme680(&bme);
 8000fa2:	4834      	ldr	r0, [pc, #208]	; (8001074 <main+0xec>)
 8000fa4:	f003 fc62 	bl	800486c <init_bme680>
//		reset_bme_internal_signal();
//		ue.super.sig = BME_HEATING_SIG;
//		bme_proobject_event_dispatcher(&bmeA0s,&ue.super);
//	}
//	HAL_Delay(10);
	  bme680_get_sensor_data(&data, &bme.gas_sensor);
 8000fa8:	1d3b      	adds	r3, r7, #4
 8000faa:	4932      	ldr	r1, [pc, #200]	; (8001074 <main+0xec>)
 8000fac:	4618      	mov	r0, r3
 8000fae:	f002 fd93 	bl	8003ad8 <bme680_get_sensor_data>
	  		bme.temperature = data.temperature / 100.0f;
 8000fb2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000fb6:	ee07 3a90 	vmov	s15, r3
 8000fba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fbe:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001078 <main+0xf0>
 8000fc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc6:	4b2b      	ldr	r3, [pc, #172]	; (8001074 <main+0xec>)
 8000fc8:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	  		bme.pressure = data.pressure / 100.0f;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	ee07 3a90 	vmov	s15, r3
 8000fd2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fd6:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001078 <main+0xf0>
 8000fda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fde:	4b25      	ldr	r3, [pc, #148]	; (8001074 <main+0xec>)
 8000fe0:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	  		bme.humidity = data.humidity / 1000.0f;
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	ee07 3a90 	vmov	s15, r3
 8000fea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fee:	eddf 6a23 	vldr	s13, [pc, #140]	; 800107c <main+0xf4>
 8000ff2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff6:	4b1f      	ldr	r3, [pc, #124]	; (8001074 <main+0xec>)
 8000ff8:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	  		if(data.status & BME680_GASM_VALID_MSK)
 8000ffc:	793b      	ldrb	r3, [r7, #4]
 8000ffe:	f003 0320 	and.w	r3, r3, #32
 8001002:	2b00      	cmp	r3, #0
 8001004:	d002      	beq.n	800100c <main+0x84>
	  				bme.gas_resistance = data.gas_resistance;
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	4a1a      	ldr	r2, [pc, #104]	; (8001074 <main+0xec>)
 800100a:	6693      	str	r3, [r2, #104]	; 0x68

//	  		printf("T:%lu; t:%.2f; p:%.0f; h:%.0f, ",
//	  				HAL_GetTick(), bme.temperature, bme.pressure, bme.humidity);

	  		if ((bme.getgasreference_count++) % 5 == 0)
 800100c:	4b19      	ldr	r3, [pc, #100]	; (8001074 <main+0xec>)
 800100e:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8001012:	1c53      	adds	r3, r2, #1
 8001014:	b2d9      	uxtb	r1, r3
 8001016:	4b17      	ldr	r3, [pc, #92]	; (8001074 <main+0xec>)
 8001018:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
 800101c:	4b18      	ldr	r3, [pc, #96]	; (8001080 <main+0xf8>)
 800101e:	fba3 1302 	umull	r1, r3, r3, r2
 8001022:	0899      	lsrs	r1, r3, #2
 8001024:	460b      	mov	r3, r1
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	440b      	add	r3, r1
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d102      	bne.n	8001038 <main+0xb0>
	  			bme_GetGasReference(&bme);
 8001032:	4810      	ldr	r0, [pc, #64]	; (8001074 <main+0xec>)
 8001034:	f003 fc90 	bl	8004958 <bme_GetGasReference>

	  		bme_calculateIAQ( bme_GetHumidityScore(&bme) + bme_GetGasScore(&bme) );
 8001038:	480e      	ldr	r0, [pc, #56]	; (8001074 <main+0xec>)
 800103a:	f003 fd45 	bl	8004ac8 <bme_GetHumidityScore>
 800103e:	4603      	mov	r3, r0
 8001040:	b29c      	uxth	r4, r3
 8001042:	480c      	ldr	r0, [pc, #48]	; (8001074 <main+0xec>)
 8001044:	f003 fcc6 	bl	80049d4 <bme_GetGasScore>
 8001048:	4603      	mov	r3, r0
 800104a:	b29b      	uxth	r3, r3
 800104c:	4423      	add	r3, r4
 800104e:	b29b      	uxth	r3, r3
 8001050:	b21b      	sxth	r3, r3
 8001052:	4618      	mov	r0, r3
 8001054:	f003 fde0 	bl	8004c18 <bme_calculateIAQ>

	  		/* USER CODE END WHILE */

	  		/* USER CODE BEGIN 3 */
	  		user_delay_ms(2000); /* Delay till the measurement is ready - bme.meas_period */
 8001058:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800105c:	f002 f916 	bl	800328c <user_delay_ms>

	  		/* Trigger the next measurement if you would like to read data out continuously */
	  		if (bme.gas_sensor.power_mode == BME680_FORCED_MODE) {
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <main+0xec>)
 8001062:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001066:	2b01      	cmp	r3, #1
 8001068:	d19e      	bne.n	8000fa8 <main+0x20>
	  			bme680_set_sensor_mode(&bme.gas_sensor);
 800106a:	4802      	ldr	r0, [pc, #8]	; (8001074 <main+0xec>)
 800106c:	f002 fc6d 	bl	800394a <bme680_set_sensor_mode>
	  bme680_get_sensor_data(&data, &bme.gas_sensor);
 8001070:	e79a      	b.n	8000fa8 <main+0x20>
 8001072:	bf00      	nop
 8001074:	200000d8 	.word	0x200000d8
 8001078:	42c80000 	.word	0x42c80000
 800107c:	447a0000 	.word	0x447a0000
 8001080:	cccccccd 	.word	0xcccccccd

08001084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b094      	sub	sp, #80	; 0x50
 8001088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108a:	f107 0320 	add.w	r3, r7, #32
 800108e:	2230      	movs	r2, #48	; 0x30
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f003 feed 	bl	8004e72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	4b28      	ldr	r3, [pc, #160]	; (8001150 <SystemClock_Config+0xcc>)
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	4a27      	ldr	r2, [pc, #156]	; (8001150 <SystemClock_Config+0xcc>)
 80010b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b6:	6413      	str	r3, [r2, #64]	; 0x40
 80010b8:	4b25      	ldr	r3, [pc, #148]	; (8001150 <SystemClock_Config+0xcc>)
 80010ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c4:	2300      	movs	r3, #0
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	4b22      	ldr	r3, [pc, #136]	; (8001154 <SystemClock_Config+0xd0>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a21      	ldr	r2, [pc, #132]	; (8001154 <SystemClock_Config+0xd0>)
 80010ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <SystemClock_Config+0xd0>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010e0:	2302      	movs	r3, #2
 80010e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e4:	2301      	movs	r3, #1
 80010e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e8:	2310      	movs	r3, #16
 80010ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ec:	2302      	movs	r3, #2
 80010ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010f0:	2300      	movs	r3, #0
 80010f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010f4:	2308      	movs	r3, #8
 80010f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010f8:	23a8      	movs	r3, #168	; 0xa8
 80010fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010fc:	2302      	movs	r3, #2
 80010fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001100:	2304      	movs	r3, #4
 8001102:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001104:	f107 0320 	add.w	r3, r7, #32
 8001108:	4618      	mov	r0, r3
 800110a:	f001 fc7b 	bl	8002a04 <HAL_RCC_OscConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001114:	f000 f84c 	bl	80011b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001118:	230f      	movs	r3, #15
 800111a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111c:	2302      	movs	r3, #2
 800111e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001124:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001128:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800112a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800112e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	2105      	movs	r1, #5
 8001136:	4618      	mov	r0, r3
 8001138:	f001 fedc 	bl	8002ef4 <HAL_RCC_ClockConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001142:	f000 f835 	bl	80011b0 <Error_Handler>
  }
}
 8001146:	bf00      	nop
 8001148:	3750      	adds	r7, #80	; 0x50
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40023800 	.word	0x40023800
 8001154:	40007000 	.word	0x40007000

08001158 <fnAPP_Init_Standard_Values>:
//    ee.sig = BME_ENTRY;
//    mobj->active_state = target;
//    bme_proobject_state_machine(mobj,&ee);
//  }
//}
void fnAPP_Init_Standard_Values(void){
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0

	bme.gas_weighting = 0.75;
 800115c:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <fnAPP_Init_Standard_Values+0x48>)
 800115e:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8001162:	671a      	str	r2, [r3, #112]	; 0x70
	bme.gas_reference = 2500;
 8001164:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <fnAPP_Init_Standard_Values+0x48>)
 8001166:	4a0f      	ldr	r2, [pc, #60]	; (80011a4 <fnAPP_Init_Standard_Values+0x4c>)
 8001168:	675a      	str	r2, [r3, #116]	; 0x74
	bme.getgasreference_count = 0;
 800116a:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <fnAPP_Init_Standard_Values+0x48>)
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	bme.hum_weighting = 0.25;
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <fnAPP_Init_Standard_Values+0x48>)
 8001174:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8001178:	67da      	str	r2, [r3, #124]	; 0x7c
	bme.hum_reference = 40;
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <fnAPP_Init_Standard_Values+0x48>)
 800117c:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <fnAPP_Init_Standard_Values+0x50>)
 800117e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	bme.gas_lower_limit = 10000;
 8001182:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <fnAPP_Init_Standard_Values+0x48>)
 8001184:	f242 7210 	movw	r2, #10000	; 0x2710
 8001188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	bme.gas_upper_limit = 300000;
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <fnAPP_Init_Standard_Values+0x48>)
 800118e:	4a07      	ldr	r2, [pc, #28]	; (80011ac <fnAPP_Init_Standard_Values+0x54>)
 8001190:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	200000d8 	.word	0x200000d8
 80011a4:	451c4000 	.word	0x451c4000
 80011a8:	42200000 	.word	0x42200000
 80011ac:	000493e0 	.word	0x000493e0

080011b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b4:	b672      	cpsid	i
}
 80011b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <Error_Handler+0x8>
	...

080011bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <HAL_MspInit+0x4c>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <HAL_MspInit+0x4c>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <HAL_MspInit+0x4c>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	603b      	str	r3, [r7, #0]
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <HAL_MspInit+0x4c>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	4a08      	ldr	r2, [pc, #32]	; (8001208 <HAL_MspInit+0x4c>)
 80011e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ec:	6413      	str	r3, [r2, #64]	; 0x40
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_MspInit+0x4c>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <NMI_Handler+0x4>

08001212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001216:	e7fe      	b.n	8001216 <HardFault_Handler+0x4>

08001218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800121c:	e7fe      	b.n	800121c <MemManage_Handler+0x4>

0800121e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <BusFault_Handler+0x4>

08001224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <UsageFault_Handler+0x4>

0800122a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001258:	f000 f934 	bl	80014c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}

08001260 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	e00a      	b.n	8001288 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001272:	f3af 8000 	nop.w
 8001276:	4601      	mov	r1, r0
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	60ba      	str	r2, [r7, #8]
 800127e:	b2ca      	uxtb	r2, r1
 8001280:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	3301      	adds	r3, #1
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	429a      	cmp	r2, r3
 800128e:	dbf0      	blt.n	8001272 <_read+0x12>
  }

  return len;
 8001290:	687b      	ldr	r3, [r7, #4]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b086      	sub	sp, #24
 800129e:	af00      	add	r7, sp, #0
 80012a0:	60f8      	str	r0, [r7, #12]
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
 80012aa:	e009      	b.n	80012c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	1c5a      	adds	r2, r3, #1
 80012b0:	60ba      	str	r2, [r7, #8]
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	3301      	adds	r3, #1
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	dbf1      	blt.n	80012ac <_write+0x12>
  }
  return len;
 80012c8:	687b      	ldr	r3, [r7, #4]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <_close>:

int _close(int file)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012de:	4618      	mov	r0, r3
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012fa:	605a      	str	r2, [r3, #4]
  return 0;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <_isatty>:

int _isatty(int file)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001312:	2301      	movs	r3, #1
}
 8001314:	4618      	mov	r0, r3
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001344:	4a14      	ldr	r2, [pc, #80]	; (8001398 <_sbrk+0x5c>)
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <_sbrk+0x60>)
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001350:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <_sbrk+0x64>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d102      	bne.n	800135e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <_sbrk+0x64>)
 800135a:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <_sbrk+0x68>)
 800135c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <_sbrk+0x64>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	429a      	cmp	r2, r3
 800136a:	d207      	bcs.n	800137c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800136c:	f003 fdd0 	bl	8004f10 <__errno>
 8001370:	4603      	mov	r3, r0
 8001372:	220c      	movs	r2, #12
 8001374:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
 800137a:	e009      	b.n	8001390 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <_sbrk+0x64>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001382:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <_sbrk+0x64>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	4a05      	ldr	r2, [pc, #20]	; (80013a0 <_sbrk+0x64>)
 800138c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800138e:	68fb      	ldr	r3, [r7, #12]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20020000 	.word	0x20020000
 800139c:	00000400 	.word	0x00000400
 80013a0:	20000164 	.word	0x20000164
 80013a4:	200002b8 	.word	0x200002b8

080013a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <SystemInit+0x20>)
 80013ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013b2:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <SystemInit+0x20>)
 80013b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001404 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013d0:	480d      	ldr	r0, [pc, #52]	; (8001408 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013d2:	490e      	ldr	r1, [pc, #56]	; (800140c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013d4:	4a0e      	ldr	r2, [pc, #56]	; (8001410 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d8:	e002      	b.n	80013e0 <LoopCopyDataInit>

080013da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013de:	3304      	adds	r3, #4

080013e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e4:	d3f9      	bcc.n	80013da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013e6:	4a0b      	ldr	r2, [pc, #44]	; (8001414 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013e8:	4c0b      	ldr	r4, [pc, #44]	; (8001418 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013ec:	e001      	b.n	80013f2 <LoopFillZerobss>

080013ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f0:	3204      	adds	r2, #4

080013f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f4:	d3fb      	bcc.n	80013ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013f6:	f7ff ffd7 	bl	80013a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013fa:	f003 fd8f 	bl	8004f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013fe:	f7ff fdc3 	bl	8000f88 <main>
  bx  lr    
 8001402:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001404:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800140c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001410:	08005bd0 	.word	0x08005bd0
  ldr r2, =_sbss
 8001414:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001418:	200002b8 	.word	0x200002b8

0800141c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800141c:	e7fe      	b.n	800141c <ADC_IRQHandler>
	...

08001420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001424:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <HAL_Init+0x40>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a0d      	ldr	r2, [pc, #52]	; (8001460 <HAL_Init+0x40>)
 800142a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800142e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001430:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <HAL_Init+0x40>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <HAL_Init+0x40>)
 8001436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800143a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <HAL_Init+0x40>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a07      	ldr	r2, [pc, #28]	; (8001460 <HAL_Init+0x40>)
 8001442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001446:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001448:	2003      	movs	r0, #3
 800144a:	f000 f931 	bl	80016b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800144e:	200f      	movs	r0, #15
 8001450:	f000 f808 	bl	8001464 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001454:	f7ff feb2 	bl	80011bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40023c00 	.word	0x40023c00

08001464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_InitTick+0x54>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_InitTick+0x58>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	4619      	mov	r1, r3
 8001476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147a:	fbb3 f3f1 	udiv	r3, r3, r1
 800147e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001482:	4618      	mov	r0, r3
 8001484:	f000 f93b 	bl	80016fe <HAL_SYSTICK_Config>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e00e      	b.n	80014b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b0f      	cmp	r3, #15
 8001496:	d80a      	bhi.n	80014ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001498:	2200      	movs	r2, #0
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	f04f 30ff 	mov.w	r0, #4294967295
 80014a0:	f000 f911 	bl	80016c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a4:	4a06      	ldr	r2, [pc, #24]	; (80014c0 <HAL_InitTick+0x5c>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e000      	b.n	80014b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000000 	.word	0x20000000
 80014bc:	20000008 	.word	0x20000008
 80014c0:	20000004 	.word	0x20000004

080014c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_IncTick+0x20>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_IncTick+0x24>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <HAL_IncTick+0x24>)
 80014d6:	6013      	str	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000008 	.word	0x20000008
 80014e8:	20000168 	.word	0x20000168

080014ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return uwTick;
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <HAL_GetTick+0x14>)
 80014f2:	681b      	ldr	r3, [r3, #0]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	20000168 	.word	0x20000168

08001504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800150c:	f7ff ffee 	bl	80014ec <HAL_GetTick>
 8001510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800151c:	d005      	beq.n	800152a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_Delay+0x44>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800152a:	bf00      	nop
 800152c:	f7ff ffde 	bl	80014ec <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	429a      	cmp	r2, r3
 800153a:	d8f7      	bhi.n	800152c <HAL_Delay+0x28>
  {
  }
}
 800153c:	bf00      	nop
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000008 	.word	0x20000008

0800154c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001568:	4013      	ands	r3, r2
 800156a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800157c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800157e:	4a04      	ldr	r2, [pc, #16]	; (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	60d3      	str	r3, [r2, #12]
}
 8001584:	bf00      	nop
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <__NVIC_GetPriorityGrouping+0x18>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	0a1b      	lsrs	r3, r3, #8
 800159e:	f003 0307 	and.w	r3, r3, #7
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	6039      	str	r1, [r7, #0]
 80015ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	db0a      	blt.n	80015da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	b2da      	uxtb	r2, r3
 80015c8:	490c      	ldr	r1, [pc, #48]	; (80015fc <__NVIC_SetPriority+0x4c>)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	0112      	lsls	r2, r2, #4
 80015d0:	b2d2      	uxtb	r2, r2
 80015d2:	440b      	add	r3, r1
 80015d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d8:	e00a      	b.n	80015f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	4908      	ldr	r1, [pc, #32]	; (8001600 <__NVIC_SetPriority+0x50>)
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	f003 030f 	and.w	r3, r3, #15
 80015e6:	3b04      	subs	r3, #4
 80015e8:	0112      	lsls	r2, r2, #4
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	440b      	add	r3, r1
 80015ee:	761a      	strb	r2, [r3, #24]
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	e000e100 	.word	0xe000e100
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001604:	b480      	push	{r7}
 8001606:	b089      	sub	sp, #36	; 0x24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f1c3 0307 	rsb	r3, r3, #7
 800161e:	2b04      	cmp	r3, #4
 8001620:	bf28      	it	cs
 8001622:	2304      	movcs	r3, #4
 8001624:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3304      	adds	r3, #4
 800162a:	2b06      	cmp	r3, #6
 800162c:	d902      	bls.n	8001634 <NVIC_EncodePriority+0x30>
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3b03      	subs	r3, #3
 8001632:	e000      	b.n	8001636 <NVIC_EncodePriority+0x32>
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001638:	f04f 32ff 	mov.w	r2, #4294967295
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43da      	mvns	r2, r3
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	401a      	ands	r2, r3
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800164c:	f04f 31ff 	mov.w	r1, #4294967295
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	fa01 f303 	lsl.w	r3, r1, r3
 8001656:	43d9      	mvns	r1, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165c:	4313      	orrs	r3, r2
         );
}
 800165e:	4618      	mov	r0, r3
 8001660:	3724      	adds	r7, #36	; 0x24
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
	...

0800166c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3b01      	subs	r3, #1
 8001678:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800167c:	d301      	bcc.n	8001682 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800167e:	2301      	movs	r3, #1
 8001680:	e00f      	b.n	80016a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001682:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <SysTick_Config+0x40>)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3b01      	subs	r3, #1
 8001688:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800168a:	210f      	movs	r1, #15
 800168c:	f04f 30ff 	mov.w	r0, #4294967295
 8001690:	f7ff ff8e 	bl	80015b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <SysTick_Config+0x40>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800169a:	4b04      	ldr	r3, [pc, #16]	; (80016ac <SysTick_Config+0x40>)
 800169c:	2207      	movs	r2, #7
 800169e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	e000e010 	.word	0xe000e010

080016b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff ff47 	bl	800154c <__NVIC_SetPriorityGrouping>
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b086      	sub	sp, #24
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4603      	mov	r3, r0
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	607a      	str	r2, [r7, #4]
 80016d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016d8:	f7ff ff5c 	bl	8001594 <__NVIC_GetPriorityGrouping>
 80016dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	68b9      	ldr	r1, [r7, #8]
 80016e2:	6978      	ldr	r0, [r7, #20]
 80016e4:	f7ff ff8e 	bl	8001604 <NVIC_EncodePriority>
 80016e8:	4602      	mov	r2, r0
 80016ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ee:	4611      	mov	r1, r2
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff5d 	bl	80015b0 <__NVIC_SetPriority>
}
 80016f6:	bf00      	nop
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff ffb0 	bl	800166c <SysTick_Config>
 800170c:	4603      	mov	r3, r0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001718:	b480      	push	{r7}
 800171a:	b089      	sub	sp, #36	; 0x24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800172a:	2300      	movs	r3, #0
 800172c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
 8001732:	e16b      	b.n	8001a0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001734:	2201      	movs	r2, #1
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	429a      	cmp	r2, r3
 800174e:	f040 815a 	bne.w	8001a06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	2b01      	cmp	r3, #1
 800175c:	d005      	beq.n	800176a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001766:	2b02      	cmp	r3, #2
 8001768:	d130      	bne.n	80017cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	2203      	movs	r2, #3
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4013      	ands	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	68da      	ldr	r2, [r3, #12]
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4313      	orrs	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017a0:	2201      	movs	r2, #1
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	091b      	lsrs	r3, r3, #4
 80017b6:	f003 0201 	and.w	r2, r3, #1
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	d017      	beq.n	8001808 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	2203      	movs	r2, #3
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4013      	ands	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 0303 	and.w	r3, r3, #3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d123      	bne.n	800185c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	08da      	lsrs	r2, r3, #3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3208      	adds	r2, #8
 800181c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001820:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	220f      	movs	r2, #15
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	691a      	ldr	r2, [r3, #16]
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	08da      	lsrs	r2, r3, #3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3208      	adds	r2, #8
 8001856:	69b9      	ldr	r1, [r7, #24]
 8001858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	2203      	movs	r2, #3
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 0203 	and.w	r2, r3, #3
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4313      	orrs	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 80b4 	beq.w	8001a06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	4b60      	ldr	r3, [pc, #384]	; (8001a24 <HAL_GPIO_Init+0x30c>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a6:	4a5f      	ldr	r2, [pc, #380]	; (8001a24 <HAL_GPIO_Init+0x30c>)
 80018a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ac:	6453      	str	r3, [r2, #68]	; 0x44
 80018ae:	4b5d      	ldr	r3, [pc, #372]	; (8001a24 <HAL_GPIO_Init+0x30c>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ba:	4a5b      	ldr	r2, [pc, #364]	; (8001a28 <HAL_GPIO_Init+0x310>)
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	089b      	lsrs	r3, r3, #2
 80018c0:	3302      	adds	r3, #2
 80018c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	220f      	movs	r2, #15
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4013      	ands	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a52      	ldr	r2, [pc, #328]	; (8001a2c <HAL_GPIO_Init+0x314>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d02b      	beq.n	800193e <HAL_GPIO_Init+0x226>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a51      	ldr	r2, [pc, #324]	; (8001a30 <HAL_GPIO_Init+0x318>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d025      	beq.n	800193a <HAL_GPIO_Init+0x222>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a50      	ldr	r2, [pc, #320]	; (8001a34 <HAL_GPIO_Init+0x31c>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d01f      	beq.n	8001936 <HAL_GPIO_Init+0x21e>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a4f      	ldr	r2, [pc, #316]	; (8001a38 <HAL_GPIO_Init+0x320>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d019      	beq.n	8001932 <HAL_GPIO_Init+0x21a>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a4e      	ldr	r2, [pc, #312]	; (8001a3c <HAL_GPIO_Init+0x324>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d013      	beq.n	800192e <HAL_GPIO_Init+0x216>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a4d      	ldr	r2, [pc, #308]	; (8001a40 <HAL_GPIO_Init+0x328>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d00d      	beq.n	800192a <HAL_GPIO_Init+0x212>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a4c      	ldr	r2, [pc, #304]	; (8001a44 <HAL_GPIO_Init+0x32c>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d007      	beq.n	8001926 <HAL_GPIO_Init+0x20e>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a4b      	ldr	r2, [pc, #300]	; (8001a48 <HAL_GPIO_Init+0x330>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d101      	bne.n	8001922 <HAL_GPIO_Init+0x20a>
 800191e:	2307      	movs	r3, #7
 8001920:	e00e      	b.n	8001940 <HAL_GPIO_Init+0x228>
 8001922:	2308      	movs	r3, #8
 8001924:	e00c      	b.n	8001940 <HAL_GPIO_Init+0x228>
 8001926:	2306      	movs	r3, #6
 8001928:	e00a      	b.n	8001940 <HAL_GPIO_Init+0x228>
 800192a:	2305      	movs	r3, #5
 800192c:	e008      	b.n	8001940 <HAL_GPIO_Init+0x228>
 800192e:	2304      	movs	r3, #4
 8001930:	e006      	b.n	8001940 <HAL_GPIO_Init+0x228>
 8001932:	2303      	movs	r3, #3
 8001934:	e004      	b.n	8001940 <HAL_GPIO_Init+0x228>
 8001936:	2302      	movs	r3, #2
 8001938:	e002      	b.n	8001940 <HAL_GPIO_Init+0x228>
 800193a:	2301      	movs	r3, #1
 800193c:	e000      	b.n	8001940 <HAL_GPIO_Init+0x228>
 800193e:	2300      	movs	r3, #0
 8001940:	69fa      	ldr	r2, [r7, #28]
 8001942:	f002 0203 	and.w	r2, r2, #3
 8001946:	0092      	lsls	r2, r2, #2
 8001948:	4093      	lsls	r3, r2
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001950:	4935      	ldr	r1, [pc, #212]	; (8001a28 <HAL_GPIO_Init+0x310>)
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	089b      	lsrs	r3, r3, #2
 8001956:	3302      	adds	r3, #2
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800195e:	4b3b      	ldr	r3, [pc, #236]	; (8001a4c <HAL_GPIO_Init+0x334>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001982:	4a32      	ldr	r2, [pc, #200]	; (8001a4c <HAL_GPIO_Init+0x334>)
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001988:	4b30      	ldr	r3, [pc, #192]	; (8001a4c <HAL_GPIO_Init+0x334>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019ac:	4a27      	ldr	r2, [pc, #156]	; (8001a4c <HAL_GPIO_Init+0x334>)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019b2:	4b26      	ldr	r3, [pc, #152]	; (8001a4c <HAL_GPIO_Init+0x334>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	43db      	mvns	r3, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4013      	ands	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019d6:	4a1d      	ldr	r2, [pc, #116]	; (8001a4c <HAL_GPIO_Init+0x334>)
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019dc:	4b1b      	ldr	r3, [pc, #108]	; (8001a4c <HAL_GPIO_Init+0x334>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a00:	4a12      	ldr	r2, [pc, #72]	; (8001a4c <HAL_GPIO_Init+0x334>)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	61fb      	str	r3, [r7, #28]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	2b0f      	cmp	r3, #15
 8001a10:	f67f ae90 	bls.w	8001734 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a14:	bf00      	nop
 8001a16:	bf00      	nop
 8001a18:	3724      	adds	r7, #36	; 0x24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40013800 	.word	0x40013800
 8001a2c:	40020000 	.word	0x40020000
 8001a30:	40020400 	.word	0x40020400
 8001a34:	40020800 	.word	0x40020800
 8001a38:	40020c00 	.word	0x40020c00
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40021400 	.word	0x40021400
 8001a44:	40021800 	.word	0x40021800
 8001a48:	40021c00 	.word	0x40021c00
 8001a4c:	40013c00 	.word	0x40013c00

08001a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	807b      	strh	r3, [r7, #2]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a60:	787b      	ldrb	r3, [r7, #1]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a66:	887a      	ldrh	r2, [r7, #2]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a6c:	e003      	b.n	8001a76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a6e:	887b      	ldrh	r3, [r7, #2]
 8001a70:	041a      	lsls	r2, r3, #16
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	619a      	str	r2, [r3, #24]
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e12b      	b.n	8001cee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d106      	bne.n	8001ab0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff fa24 	bl	8000ef8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2224      	movs	r2, #36	; 0x24
 8001ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0201 	bic.w	r2, r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ad6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ae6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ae8:	f001 fbbc 	bl	8003264 <HAL_RCC_GetPCLK1Freq>
 8001aec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	4a81      	ldr	r2, [pc, #516]	; (8001cf8 <HAL_I2C_Init+0x274>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d807      	bhi.n	8001b08 <HAL_I2C_Init+0x84>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4a80      	ldr	r2, [pc, #512]	; (8001cfc <HAL_I2C_Init+0x278>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	bf94      	ite	ls
 8001b00:	2301      	movls	r3, #1
 8001b02:	2300      	movhi	r3, #0
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	e006      	b.n	8001b16 <HAL_I2C_Init+0x92>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4a7d      	ldr	r2, [pc, #500]	; (8001d00 <HAL_I2C_Init+0x27c>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	bf94      	ite	ls
 8001b10:	2301      	movls	r3, #1
 8001b12:	2300      	movhi	r3, #0
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e0e7      	b.n	8001cee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4a78      	ldr	r2, [pc, #480]	; (8001d04 <HAL_I2C_Init+0x280>)
 8001b22:	fba2 2303 	umull	r2, r3, r2, r3
 8001b26:	0c9b      	lsrs	r3, r3, #18
 8001b28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68ba      	ldr	r2, [r7, #8]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	4a6a      	ldr	r2, [pc, #424]	; (8001cf8 <HAL_I2C_Init+0x274>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d802      	bhi.n	8001b58 <HAL_I2C_Init+0xd4>
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	3301      	adds	r3, #1
 8001b56:	e009      	b.n	8001b6c <HAL_I2C_Init+0xe8>
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b5e:	fb02 f303 	mul.w	r3, r2, r3
 8001b62:	4a69      	ldr	r2, [pc, #420]	; (8001d08 <HAL_I2C_Init+0x284>)
 8001b64:	fba2 2303 	umull	r2, r3, r2, r3
 8001b68:	099b      	lsrs	r3, r3, #6
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6812      	ldr	r2, [r2, #0]
 8001b70:	430b      	orrs	r3, r1
 8001b72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	495c      	ldr	r1, [pc, #368]	; (8001cf8 <HAL_I2C_Init+0x274>)
 8001b88:	428b      	cmp	r3, r1
 8001b8a:	d819      	bhi.n	8001bc0 <HAL_I2C_Init+0x13c>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	1e59      	subs	r1, r3, #1
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b9a:	1c59      	adds	r1, r3, #1
 8001b9c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ba0:	400b      	ands	r3, r1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00a      	beq.n	8001bbc <HAL_I2C_Init+0x138>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	1e59      	subs	r1, r3, #1
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bba:	e051      	b.n	8001c60 <HAL_I2C_Init+0x1dc>
 8001bbc:	2304      	movs	r3, #4
 8001bbe:	e04f      	b.n	8001c60 <HAL_I2C_Init+0x1dc>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d111      	bne.n	8001bec <HAL_I2C_Init+0x168>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	1e58      	subs	r0, r3, #1
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6859      	ldr	r1, [r3, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	440b      	add	r3, r1
 8001bd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bda:	3301      	adds	r3, #1
 8001bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	bf0c      	ite	eq
 8001be4:	2301      	moveq	r3, #1
 8001be6:	2300      	movne	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	e012      	b.n	8001c12 <HAL_I2C_Init+0x18e>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	1e58      	subs	r0, r3, #1
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6859      	ldr	r1, [r3, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	0099      	lsls	r1, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c02:	3301      	adds	r3, #1
 8001c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	bf0c      	ite	eq
 8001c0c:	2301      	moveq	r3, #1
 8001c0e:	2300      	movne	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_I2C_Init+0x196>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e022      	b.n	8001c60 <HAL_I2C_Init+0x1dc>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10e      	bne.n	8001c40 <HAL_I2C_Init+0x1bc>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	1e58      	subs	r0, r3, #1
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6859      	ldr	r1, [r3, #4]
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	440b      	add	r3, r1
 8001c30:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c34:	3301      	adds	r3, #1
 8001c36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c3e:	e00f      	b.n	8001c60 <HAL_I2C_Init+0x1dc>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	1e58      	subs	r0, r3, #1
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6859      	ldr	r1, [r3, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	0099      	lsls	r1, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c56:	3301      	adds	r3, #1
 8001c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c60:	6879      	ldr	r1, [r7, #4]
 8001c62:	6809      	ldr	r1, [r1, #0]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69da      	ldr	r2, [r3, #28]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	430a      	orrs	r2, r1
 8001c82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6911      	ldr	r1, [r2, #16]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	68d2      	ldr	r2, [r2, #12]
 8001c9a:	4311      	orrs	r1, r2
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	430b      	orrs	r3, r1
 8001ca2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695a      	ldr	r2, [r3, #20]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f042 0201 	orr.w	r2, r2, #1
 8001cce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2220      	movs	r2, #32
 8001cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	000186a0 	.word	0x000186a0
 8001cfc:	001e847f 	.word	0x001e847f
 8001d00:	003d08ff 	.word	0x003d08ff
 8001d04:	431bde83 	.word	0x431bde83
 8001d08:	10624dd3 	.word	0x10624dd3

08001d0c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b088      	sub	sp, #32
 8001d10:	af02      	add	r7, sp, #8
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	4608      	mov	r0, r1
 8001d16:	4611      	mov	r1, r2
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	817b      	strh	r3, [r7, #10]
 8001d1e:	460b      	mov	r3, r1
 8001d20:	813b      	strh	r3, [r7, #8]
 8001d22:	4613      	mov	r3, r2
 8001d24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d26:	f7ff fbe1 	bl	80014ec <HAL_GetTick>
 8001d2a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b20      	cmp	r3, #32
 8001d36:	f040 80d9 	bne.w	8001eec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	2319      	movs	r3, #25
 8001d40:	2201      	movs	r2, #1
 8001d42:	496d      	ldr	r1, [pc, #436]	; (8001ef8 <HAL_I2C_Mem_Write+0x1ec>)
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f000 fc7f 	bl	8002648 <I2C_WaitOnFlagUntilTimeout>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001d50:	2302      	movs	r3, #2
 8001d52:	e0cc      	b.n	8001eee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d101      	bne.n	8001d62 <HAL_I2C_Mem_Write+0x56>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e0c5      	b.n	8001eee <HAL_I2C_Mem_Write+0x1e2>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d007      	beq.n	8001d88 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0201 	orr.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2221      	movs	r2, #33	; 0x21
 8001d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2240      	movs	r2, #64	; 0x40
 8001da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6a3a      	ldr	r2, [r7, #32]
 8001db2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001db8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4a4d      	ldr	r2, [pc, #308]	; (8001efc <HAL_I2C_Mem_Write+0x1f0>)
 8001dc8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001dca:	88f8      	ldrh	r0, [r7, #6]
 8001dcc:	893a      	ldrh	r2, [r7, #8]
 8001dce:	8979      	ldrh	r1, [r7, #10]
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	9301      	str	r3, [sp, #4]
 8001dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	4603      	mov	r3, r0
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f000 fab6 	bl	800234c <I2C_RequestMemoryWrite>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d052      	beq.n	8001e8c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e081      	b.n	8001eee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 fd00 	bl	80027f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00d      	beq.n	8001e16 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d107      	bne.n	8001e12 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e06b      	b.n	8001eee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	781a      	ldrb	r2, [r3, #0]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e26:	1c5a      	adds	r2, r3, #1
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e30:	3b01      	subs	r3, #1
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b04      	cmp	r3, #4
 8001e52:	d11b      	bne.n	8001e8c <HAL_I2C_Mem_Write+0x180>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d017      	beq.n	8001e8c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	781a      	ldrb	r2, [r3, #0]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6c:	1c5a      	adds	r2, r3, #1
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e76:	3b01      	subs	r3, #1
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	3b01      	subs	r3, #1
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1aa      	bne.n	8001dea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f000 fcec 	bl	8002876 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00d      	beq.n	8001ec0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	d107      	bne.n	8001ebc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e016      	b.n	8001eee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ece:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	e000      	b.n	8001eee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001eec:	2302      	movs	r3, #2
  }
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	00100002 	.word	0x00100002
 8001efc:	ffff0000 	.word	0xffff0000

08001f00 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08c      	sub	sp, #48	; 0x30
 8001f04:	af02      	add	r7, sp, #8
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	4608      	mov	r0, r1
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4603      	mov	r3, r0
 8001f10:	817b      	strh	r3, [r7, #10]
 8001f12:	460b      	mov	r3, r1
 8001f14:	813b      	strh	r3, [r7, #8]
 8001f16:	4613      	mov	r3, r2
 8001f18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f1a:	f7ff fae7 	bl	80014ec <HAL_GetTick>
 8001f1e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b20      	cmp	r3, #32
 8001f2a:	f040 8208 	bne.w	800233e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	2319      	movs	r3, #25
 8001f34:	2201      	movs	r2, #1
 8001f36:	497b      	ldr	r1, [pc, #492]	; (8002124 <HAL_I2C_Mem_Read+0x224>)
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 fb85 	bl	8002648 <I2C_WaitOnFlagUntilTimeout>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001f44:	2302      	movs	r3, #2
 8001f46:	e1fb      	b.n	8002340 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d101      	bne.n	8001f56 <HAL_I2C_Mem_Read+0x56>
 8001f52:	2302      	movs	r3, #2
 8001f54:	e1f4      	b.n	8002340 <HAL_I2C_Mem_Read+0x440>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d007      	beq.n	8001f7c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 0201 	orr.w	r2, r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2222      	movs	r2, #34	; 0x22
 8001f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2240      	movs	r2, #64	; 0x40
 8001f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fa6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001fac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4a5b      	ldr	r2, [pc, #364]	; (8002128 <HAL_I2C_Mem_Read+0x228>)
 8001fbc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001fbe:	88f8      	ldrh	r0, [r7, #6]
 8001fc0:	893a      	ldrh	r2, [r7, #8]
 8001fc2:	8979      	ldrh	r1, [r7, #10]
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	9301      	str	r3, [sp, #4]
 8001fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	4603      	mov	r3, r0
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 fa52 	bl	8002478 <I2C_RequestMemoryRead>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e1b0      	b.n	8002340 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d113      	bne.n	800200e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	623b      	str	r3, [r7, #32]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	623b      	str	r3, [r7, #32]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	623b      	str	r3, [r7, #32]
 8001ffa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	e184      	b.n	8002318 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002012:	2b01      	cmp	r3, #1
 8002014:	d11b      	bne.n	800204e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002024:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	61fb      	str	r3, [r7, #28]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	61fb      	str	r3, [r7, #28]
 800203a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	e164      	b.n	8002318 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002052:	2b02      	cmp	r3, #2
 8002054:	d11b      	bne.n	800208e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002064:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002074:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	61bb      	str	r3, [r7, #24]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	61bb      	str	r3, [r7, #24]
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	e144      	b.n	8002318 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80020a4:	e138      	b.n	8002318 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	f200 80f1 	bhi.w	8002292 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d123      	bne.n	8002100 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f000 fc1b 	bl	80028f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e139      	b.n	8002340 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691a      	ldr	r2, [r3, #16]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e8:	3b01      	subs	r3, #1
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	3b01      	subs	r3, #1
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020fe:	e10b      	b.n	8002318 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002104:	2b02      	cmp	r3, #2
 8002106:	d14e      	bne.n	80021a6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800210e:	2200      	movs	r2, #0
 8002110:	4906      	ldr	r1, [pc, #24]	; (800212c <HAL_I2C_Mem_Read+0x22c>)
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f000 fa98 	bl	8002648 <I2C_WaitOnFlagUntilTimeout>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d008      	beq.n	8002130 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e10e      	b.n	8002340 <HAL_I2C_Mem_Read+0x440>
 8002122:	bf00      	nop
 8002124:	00100002 	.word	0x00100002
 8002128:	ffff0000 	.word	0xffff0000
 800212c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800213e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	691a      	ldr	r2, [r3, #16]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800215c:	3b01      	subs	r3, #1
 800215e:	b29a      	uxth	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002168:	b29b      	uxth	r3, r3
 800216a:	3b01      	subs	r3, #1
 800216c:	b29a      	uxth	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	1c5a      	adds	r2, r3, #1
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218e:	3b01      	subs	r3, #1
 8002190:	b29a      	uxth	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219a:	b29b      	uxth	r3, r3
 800219c:	3b01      	subs	r3, #1
 800219e:	b29a      	uxth	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021a4:	e0b8      	b.n	8002318 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ac:	2200      	movs	r2, #0
 80021ae:	4966      	ldr	r1, [pc, #408]	; (8002348 <HAL_I2C_Mem_Read+0x448>)
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 fa49 	bl	8002648 <I2C_WaitOnFlagUntilTimeout>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0bf      	b.n	8002340 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	691a      	ldr	r2, [r3, #16]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ec:	3b01      	subs	r3, #1
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	3b01      	subs	r3, #1
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002208:	2200      	movs	r2, #0
 800220a:	494f      	ldr	r1, [pc, #316]	; (8002348 <HAL_I2C_Mem_Read+0x448>)
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f000 fa1b 	bl	8002648 <I2C_WaitOnFlagUntilTimeout>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e091      	b.n	8002340 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800222a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	691a      	ldr	r2, [r3, #16]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	1c5a      	adds	r2, r3, #1
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002248:	3b01      	subs	r3, #1
 800224a:	b29a      	uxth	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002254:	b29b      	uxth	r3, r3
 8002256:	3b01      	subs	r3, #1
 8002258:	b29a      	uxth	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	1c5a      	adds	r2, r3, #1
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800227a:	3b01      	subs	r3, #1
 800227c:	b29a      	uxth	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002286:	b29b      	uxth	r3, r3
 8002288:	3b01      	subs	r3, #1
 800228a:	b29a      	uxth	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002290:	e042      	b.n	8002318 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002294:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 fb2e 	bl	80028f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e04c      	b.n	8002340 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	1c5a      	adds	r2, r3, #1
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	3b01      	subs	r3, #1
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	f003 0304 	and.w	r3, r3, #4
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d118      	bne.n	8002318 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	691a      	ldr	r2, [r3, #16]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002302:	3b01      	subs	r3, #1
 8002304:	b29a      	uxth	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230e:	b29b      	uxth	r3, r3
 8002310:	3b01      	subs	r3, #1
 8002312:	b29a      	uxth	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231c:	2b00      	cmp	r3, #0
 800231e:	f47f aec2 	bne.w	80020a6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2220      	movs	r2, #32
 8002326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	e000      	b.n	8002340 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800233e:	2302      	movs	r3, #2
  }
}
 8002340:	4618      	mov	r0, r3
 8002342:	3728      	adds	r7, #40	; 0x28
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	00010004 	.word	0x00010004

0800234c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af02      	add	r7, sp, #8
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	4608      	mov	r0, r1
 8002356:	4611      	mov	r1, r2
 8002358:	461a      	mov	r2, r3
 800235a:	4603      	mov	r3, r0
 800235c:	817b      	strh	r3, [r7, #10]
 800235e:	460b      	mov	r3, r1
 8002360:	813b      	strh	r3, [r7, #8]
 8002362:	4613      	mov	r3, r2
 8002364:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002374:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	2200      	movs	r2, #0
 800237e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 f960 	bl	8002648 <I2C_WaitOnFlagUntilTimeout>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00d      	beq.n	80023aa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800239c:	d103      	bne.n	80023a6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e05f      	b.n	800246a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023aa:	897b      	ldrh	r3, [r7, #10]
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	461a      	mov	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	6a3a      	ldr	r2, [r7, #32]
 80023be:	492d      	ldr	r1, [pc, #180]	; (8002474 <I2C_RequestMemoryWrite+0x128>)
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 f998 	bl	80026f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e04c      	b.n	800246a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e8:	6a39      	ldr	r1, [r7, #32]
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 fa02 	bl	80027f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00d      	beq.n	8002412 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d107      	bne.n	800240e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800240c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e02b      	b.n	800246a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002412:	88fb      	ldrh	r3, [r7, #6]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d105      	bne.n	8002424 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002418:	893b      	ldrh	r3, [r7, #8]
 800241a:	b2da      	uxtb	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	611a      	str	r2, [r3, #16]
 8002422:	e021      	b.n	8002468 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002424:	893b      	ldrh	r3, [r7, #8]
 8002426:	0a1b      	lsrs	r3, r3, #8
 8002428:	b29b      	uxth	r3, r3
 800242a:	b2da      	uxtb	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002434:	6a39      	ldr	r1, [r7, #32]
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 f9dc 	bl	80027f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00d      	beq.n	800245e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	2b04      	cmp	r3, #4
 8002448:	d107      	bne.n	800245a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002458:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e005      	b.n	800246a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800245e:	893b      	ldrh	r3, [r7, #8]
 8002460:	b2da      	uxtb	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	00010002 	.word	0x00010002

08002478 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af02      	add	r7, sp, #8
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	4608      	mov	r0, r1
 8002482:	4611      	mov	r1, r2
 8002484:	461a      	mov	r2, r3
 8002486:	4603      	mov	r3, r0
 8002488:	817b      	strh	r3, [r7, #10]
 800248a:	460b      	mov	r3, r1
 800248c:	813b      	strh	r3, [r7, #8]
 800248e:	4613      	mov	r3, r2
 8002490:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024a0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	6a3b      	ldr	r3, [r7, #32]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 f8c2 	bl	8002648 <I2C_WaitOnFlagUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00d      	beq.n	80024e6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024d8:	d103      	bne.n	80024e2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e0aa      	b.n	800263c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024e6:	897b      	ldrh	r3, [r7, #10]
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	461a      	mov	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	6a3a      	ldr	r2, [r7, #32]
 80024fa:	4952      	ldr	r1, [pc, #328]	; (8002644 <I2C_RequestMemoryRead+0x1cc>)
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 f8fa 	bl	80026f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e097      	b.n	800263c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002524:	6a39      	ldr	r1, [r7, #32]
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 f964 	bl	80027f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00d      	beq.n	800254e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	2b04      	cmp	r3, #4
 8002538:	d107      	bne.n	800254a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002548:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e076      	b.n	800263c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800254e:	88fb      	ldrh	r3, [r7, #6]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d105      	bne.n	8002560 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002554:	893b      	ldrh	r3, [r7, #8]
 8002556:	b2da      	uxtb	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	611a      	str	r2, [r3, #16]
 800255e:	e021      	b.n	80025a4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002560:	893b      	ldrh	r3, [r7, #8]
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	b29b      	uxth	r3, r3
 8002566:	b2da      	uxtb	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800256e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002570:	6a39      	ldr	r1, [r7, #32]
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 f93e 	bl	80027f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00d      	beq.n	800259a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	2b04      	cmp	r3, #4
 8002584:	d107      	bne.n	8002596 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002594:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e050      	b.n	800263c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800259a:	893b      	ldrh	r3, [r7, #8]
 800259c:	b2da      	uxtb	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a6:	6a39      	ldr	r1, [r7, #32]
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 f923 	bl	80027f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00d      	beq.n	80025d0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b8:	2b04      	cmp	r3, #4
 80025ba:	d107      	bne.n	80025cc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e035      	b.n	800263c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025de:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	6a3b      	ldr	r3, [r7, #32]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 f82b 	bl	8002648 <I2C_WaitOnFlagUntilTimeout>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00d      	beq.n	8002614 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002606:	d103      	bne.n	8002610 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800260e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e013      	b.n	800263c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002614:	897b      	ldrh	r3, [r7, #10]
 8002616:	b2db      	uxtb	r3, r3
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	b2da      	uxtb	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	6a3a      	ldr	r2, [r7, #32]
 8002628:	4906      	ldr	r1, [pc, #24]	; (8002644 <I2C_RequestMemoryRead+0x1cc>)
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f000 f863 	bl	80026f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	00010002 	.word	0x00010002

08002648 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	603b      	str	r3, [r7, #0]
 8002654:	4613      	mov	r3, r2
 8002656:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002658:	e025      	b.n	80026a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002660:	d021      	beq.n	80026a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002662:	f7fe ff43 	bl	80014ec <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d302      	bcc.n	8002678 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d116      	bne.n	80026a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2220      	movs	r2, #32
 8002682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	f043 0220 	orr.w	r2, r3, #32
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e023      	b.n	80026ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	0c1b      	lsrs	r3, r3, #16
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d10d      	bne.n	80026cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	43da      	mvns	r2, r3
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	4013      	ands	r3, r2
 80026bc:	b29b      	uxth	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	bf0c      	ite	eq
 80026c2:	2301      	moveq	r3, #1
 80026c4:	2300      	movne	r3, #0
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	461a      	mov	r2, r3
 80026ca:	e00c      	b.n	80026e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	43da      	mvns	r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	4013      	ands	r3, r2
 80026d8:	b29b      	uxth	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	bf0c      	ite	eq
 80026de:	2301      	moveq	r3, #1
 80026e0:	2300      	movne	r3, #0
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	461a      	mov	r2, r3
 80026e6:	79fb      	ldrb	r3, [r7, #7]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d0b6      	beq.n	800265a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b084      	sub	sp, #16
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	60f8      	str	r0, [r7, #12]
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	607a      	str	r2, [r7, #4]
 8002702:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002704:	e051      	b.n	80027aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002714:	d123      	bne.n	800275e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002724:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800272e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2220      	movs	r2, #32
 800273a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f043 0204 	orr.w	r2, r3, #4
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e046      	b.n	80027ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002764:	d021      	beq.n	80027aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002766:	f7fe fec1 	bl	80014ec <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	429a      	cmp	r2, r3
 8002774:	d302      	bcc.n	800277c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d116      	bne.n	80027aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2220      	movs	r2, #32
 8002786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	f043 0220 	orr.w	r2, r3, #32
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e020      	b.n	80027ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	0c1b      	lsrs	r3, r3, #16
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d10c      	bne.n	80027ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	43da      	mvns	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	4013      	ands	r3, r2
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	bf14      	ite	ne
 80027c6:	2301      	movne	r3, #1
 80027c8:	2300      	moveq	r3, #0
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	e00b      	b.n	80027e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	43da      	mvns	r2, r3
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	4013      	ands	r3, r2
 80027da:	b29b      	uxth	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	bf14      	ite	ne
 80027e0:	2301      	movne	r3, #1
 80027e2:	2300      	moveq	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d18d      	bne.n	8002706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002800:	e02d      	b.n	800285e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 f8ce 	bl	80029a4 <I2C_IsAcknowledgeFailed>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e02d      	b.n	800286e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002818:	d021      	beq.n	800285e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800281a:	f7fe fe67 	bl	80014ec <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	429a      	cmp	r2, r3
 8002828:	d302      	bcc.n	8002830 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d116      	bne.n	800285e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2220      	movs	r2, #32
 800283a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	f043 0220 	orr.w	r2, r3, #32
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e007      	b.n	800286e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002868:	2b80      	cmp	r3, #128	; 0x80
 800286a:	d1ca      	bne.n	8002802 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b084      	sub	sp, #16
 800287a:	af00      	add	r7, sp, #0
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002882:	e02d      	b.n	80028e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 f88d 	bl	80029a4 <I2C_IsAcknowledgeFailed>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e02d      	b.n	80028f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289a:	d021      	beq.n	80028e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800289c:	f7fe fe26 	bl	80014ec <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d302      	bcc.n	80028b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d116      	bne.n	80028e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2220      	movs	r2, #32
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	f043 0220 	orr.w	r2, r3, #32
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e007      	b.n	80028f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	f003 0304 	and.w	r3, r3, #4
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d1ca      	bne.n	8002884 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002904:	e042      	b.n	800298c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	f003 0310 	and.w	r3, r3, #16
 8002910:	2b10      	cmp	r3, #16
 8002912:	d119      	bne.n	8002948 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f06f 0210 	mvn.w	r2, #16
 800291c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2220      	movs	r2, #32
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e029      	b.n	800299c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002948:	f7fe fdd0 	bl	80014ec <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	429a      	cmp	r2, r3
 8002956:	d302      	bcc.n	800295e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d116      	bne.n	800298c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2220      	movs	r2, #32
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	f043 0220 	orr.w	r2, r3, #32
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e007      	b.n	800299c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002996:	2b40      	cmp	r3, #64	; 0x40
 8002998:	d1b5      	bne.n	8002906 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ba:	d11b      	bne.n	80029f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2220      	movs	r2, #32
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	f043 0204 	orr.w	r2, r3, #4
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e000      	b.n	80029f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
	...

08002a04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e267      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d075      	beq.n	8002b0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a22:	4b88      	ldr	r3, [pc, #544]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 030c 	and.w	r3, r3, #12
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	d00c      	beq.n	8002a48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a2e:	4b85      	ldr	r3, [pc, #532]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a36:	2b08      	cmp	r3, #8
 8002a38:	d112      	bne.n	8002a60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a3a:	4b82      	ldr	r3, [pc, #520]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a46:	d10b      	bne.n	8002a60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a48:	4b7e      	ldr	r3, [pc, #504]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d05b      	beq.n	8002b0c <HAL_RCC_OscConfig+0x108>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d157      	bne.n	8002b0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e242      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a68:	d106      	bne.n	8002a78 <HAL_RCC_OscConfig+0x74>
 8002a6a:	4b76      	ldr	r3, [pc, #472]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a75      	ldr	r2, [pc, #468]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	e01d      	b.n	8002ab4 <HAL_RCC_OscConfig+0xb0>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a80:	d10c      	bne.n	8002a9c <HAL_RCC_OscConfig+0x98>
 8002a82:	4b70      	ldr	r3, [pc, #448]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a6f      	ldr	r2, [pc, #444]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	4b6d      	ldr	r3, [pc, #436]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a6c      	ldr	r2, [pc, #432]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	e00b      	b.n	8002ab4 <HAL_RCC_OscConfig+0xb0>
 8002a9c:	4b69      	ldr	r3, [pc, #420]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a68      	ldr	r2, [pc, #416]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aa6:	6013      	str	r3, [r2, #0]
 8002aa8:	4b66      	ldr	r3, [pc, #408]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a65      	ldr	r2, [pc, #404]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d013      	beq.n	8002ae4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abc:	f7fe fd16 	bl	80014ec <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ac4:	f7fe fd12 	bl	80014ec <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b64      	cmp	r3, #100	; 0x64
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e207      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad6:	4b5b      	ldr	r3, [pc, #364]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCC_OscConfig+0xc0>
 8002ae2:	e014      	b.n	8002b0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae4:	f7fe fd02 	bl	80014ec <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aec:	f7fe fcfe 	bl	80014ec <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b64      	cmp	r3, #100	; 0x64
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e1f3      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002afe:	4b51      	ldr	r3, [pc, #324]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f0      	bne.n	8002aec <HAL_RCC_OscConfig+0xe8>
 8002b0a:	e000      	b.n	8002b0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d063      	beq.n	8002be2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b1a:	4b4a      	ldr	r3, [pc, #296]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 030c 	and.w	r3, r3, #12
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00b      	beq.n	8002b3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b26:	4b47      	ldr	r3, [pc, #284]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b2e:	2b08      	cmp	r3, #8
 8002b30:	d11c      	bne.n	8002b6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b32:	4b44      	ldr	r3, [pc, #272]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d116      	bne.n	8002b6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3e:	4b41      	ldr	r3, [pc, #260]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d005      	beq.n	8002b56 <HAL_RCC_OscConfig+0x152>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d001      	beq.n	8002b56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e1c7      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b56:	4b3b      	ldr	r3, [pc, #236]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	4937      	ldr	r1, [pc, #220]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b6a:	e03a      	b.n	8002be2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d020      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b74:	4b34      	ldr	r3, [pc, #208]	; (8002c48 <HAL_RCC_OscConfig+0x244>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7a:	f7fe fcb7 	bl	80014ec <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b82:	f7fe fcb3 	bl	80014ec <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e1a8      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b94:	4b2b      	ldr	r3, [pc, #172]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0f0      	beq.n	8002b82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba0:	4b28      	ldr	r3, [pc, #160]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	4925      	ldr	r1, [pc, #148]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	600b      	str	r3, [r1, #0]
 8002bb4:	e015      	b.n	8002be2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bb6:	4b24      	ldr	r3, [pc, #144]	; (8002c48 <HAL_RCC_OscConfig+0x244>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbc:	f7fe fc96 	bl	80014ec <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bc4:	f7fe fc92 	bl	80014ec <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e187      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bd6:	4b1b      	ldr	r3, [pc, #108]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d036      	beq.n	8002c5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d016      	beq.n	8002c24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bf6:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <HAL_RCC_OscConfig+0x248>)
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bfc:	f7fe fc76 	bl	80014ec <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c04:	f7fe fc72 	bl	80014ec <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e167      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c16:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0f0      	beq.n	8002c04 <HAL_RCC_OscConfig+0x200>
 8002c22:	e01b      	b.n	8002c5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c24:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <HAL_RCC_OscConfig+0x248>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c2a:	f7fe fc5f 	bl	80014ec <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c30:	e00e      	b.n	8002c50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c32:	f7fe fc5b 	bl	80014ec <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d907      	bls.n	8002c50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e150      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
 8002c44:	40023800 	.word	0x40023800
 8002c48:	42470000 	.word	0x42470000
 8002c4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c50:	4b88      	ldr	r3, [pc, #544]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1ea      	bne.n	8002c32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 8097 	beq.w	8002d98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c6e:	4b81      	ldr	r3, [pc, #516]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10f      	bne.n	8002c9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	4b7d      	ldr	r3, [pc, #500]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	4a7c      	ldr	r2, [pc, #496]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c88:	6413      	str	r3, [r2, #64]	; 0x40
 8002c8a:	4b7a      	ldr	r3, [pc, #488]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c92:	60bb      	str	r3, [r7, #8]
 8002c94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c96:	2301      	movs	r3, #1
 8002c98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9a:	4b77      	ldr	r3, [pc, #476]	; (8002e78 <HAL_RCC_OscConfig+0x474>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d118      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ca6:	4b74      	ldr	r3, [pc, #464]	; (8002e78 <HAL_RCC_OscConfig+0x474>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a73      	ldr	r2, [pc, #460]	; (8002e78 <HAL_RCC_OscConfig+0x474>)
 8002cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cb2:	f7fe fc1b 	bl	80014ec <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cba:	f7fe fc17 	bl	80014ec <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e10c      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ccc:	4b6a      	ldr	r3, [pc, #424]	; (8002e78 <HAL_RCC_OscConfig+0x474>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0f0      	beq.n	8002cba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d106      	bne.n	8002cee <HAL_RCC_OscConfig+0x2ea>
 8002ce0:	4b64      	ldr	r3, [pc, #400]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce4:	4a63      	ldr	r2, [pc, #396]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	6713      	str	r3, [r2, #112]	; 0x70
 8002cec:	e01c      	b.n	8002d28 <HAL_RCC_OscConfig+0x324>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	2b05      	cmp	r3, #5
 8002cf4:	d10c      	bne.n	8002d10 <HAL_RCC_OscConfig+0x30c>
 8002cf6:	4b5f      	ldr	r3, [pc, #380]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfa:	4a5e      	ldr	r2, [pc, #376]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002cfc:	f043 0304 	orr.w	r3, r3, #4
 8002d00:	6713      	str	r3, [r2, #112]	; 0x70
 8002d02:	4b5c      	ldr	r3, [pc, #368]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d06:	4a5b      	ldr	r2, [pc, #364]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d08:	f043 0301 	orr.w	r3, r3, #1
 8002d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d0e:	e00b      	b.n	8002d28 <HAL_RCC_OscConfig+0x324>
 8002d10:	4b58      	ldr	r3, [pc, #352]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d14:	4a57      	ldr	r2, [pc, #348]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d16:	f023 0301 	bic.w	r3, r3, #1
 8002d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d1c:	4b55      	ldr	r3, [pc, #340]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d20:	4a54      	ldr	r2, [pc, #336]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d22:	f023 0304 	bic.w	r3, r3, #4
 8002d26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d015      	beq.n	8002d5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d30:	f7fe fbdc 	bl	80014ec <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d36:	e00a      	b.n	8002d4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d38:	f7fe fbd8 	bl	80014ec <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e0cb      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d4e:	4b49      	ldr	r3, [pc, #292]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0ee      	beq.n	8002d38 <HAL_RCC_OscConfig+0x334>
 8002d5a:	e014      	b.n	8002d86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d5c:	f7fe fbc6 	bl	80014ec <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d62:	e00a      	b.n	8002d7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d64:	f7fe fbc2 	bl	80014ec <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e0b5      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d7a:	4b3e      	ldr	r3, [pc, #248]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1ee      	bne.n	8002d64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d86:	7dfb      	ldrb	r3, [r7, #23]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d105      	bne.n	8002d98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d8c:	4b39      	ldr	r3, [pc, #228]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	4a38      	ldr	r2, [pc, #224]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 80a1 	beq.w	8002ee4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002da2:	4b34      	ldr	r3, [pc, #208]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d05c      	beq.n	8002e68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d141      	bne.n	8002e3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db6:	4b31      	ldr	r3, [pc, #196]	; (8002e7c <HAL_RCC_OscConfig+0x478>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbc:	f7fe fb96 	bl	80014ec <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc4:	f7fe fb92 	bl	80014ec <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e087      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd6:	4b27      	ldr	r3, [pc, #156]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69da      	ldr	r2, [r3, #28]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	019b      	lsls	r3, r3, #6
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df8:	085b      	lsrs	r3, r3, #1
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	041b      	lsls	r3, r3, #16
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	061b      	lsls	r3, r3, #24
 8002e06:	491b      	ldr	r1, [pc, #108]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e0c:	4b1b      	ldr	r3, [pc, #108]	; (8002e7c <HAL_RCC_OscConfig+0x478>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e12:	f7fe fb6b 	bl	80014ec <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e1a:	f7fe fb67 	bl	80014ec <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e05c      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e2c:	4b11      	ldr	r3, [pc, #68]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x416>
 8002e38:	e054      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3a:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <HAL_RCC_OscConfig+0x478>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e40:	f7fe fb54 	bl	80014ec <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e48:	f7fe fb50 	bl	80014ec <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e045      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e5a:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f0      	bne.n	8002e48 <HAL_RCC_OscConfig+0x444>
 8002e66:	e03d      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d107      	bne.n	8002e80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e038      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
 8002e74:	40023800 	.word	0x40023800
 8002e78:	40007000 	.word	0x40007000
 8002e7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e80:	4b1b      	ldr	r3, [pc, #108]	; (8002ef0 <HAL_RCC_OscConfig+0x4ec>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d028      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d121      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d11a      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002eb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d111      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec6:	085b      	lsrs	r3, r3, #1
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d107      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d001      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e000      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3718      	adds	r7, #24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40023800 	.word	0x40023800

08002ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0cc      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f08:	4b68      	ldr	r3, [pc, #416]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d90c      	bls.n	8002f30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f16:	4b65      	ldr	r3, [pc, #404]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1e:	4b63      	ldr	r3, [pc, #396]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e0b8      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d020      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d005      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f48:	4b59      	ldr	r3, [pc, #356]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	4a58      	ldr	r2, [pc, #352]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0308 	and.w	r3, r3, #8
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d005      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f60:	4b53      	ldr	r3, [pc, #332]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	4a52      	ldr	r2, [pc, #328]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f6c:	4b50      	ldr	r3, [pc, #320]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	494d      	ldr	r1, [pc, #308]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d044      	beq.n	8003014 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d107      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f92:	4b47      	ldr	r3, [pc, #284]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d119      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e07f      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d003      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d107      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb2:	4b3f      	ldr	r3, [pc, #252]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d109      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e06f      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc2:	4b3b      	ldr	r3, [pc, #236]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e067      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fd2:	4b37      	ldr	r3, [pc, #220]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f023 0203 	bic.w	r2, r3, #3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	4934      	ldr	r1, [pc, #208]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fe4:	f7fe fa82 	bl	80014ec <HAL_GetTick>
 8002fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fea:	e00a      	b.n	8003002 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fec:	f7fe fa7e 	bl	80014ec <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e04f      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003002:	4b2b      	ldr	r3, [pc, #172]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 020c 	and.w	r2, r3, #12
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	429a      	cmp	r2, r3
 8003012:	d1eb      	bne.n	8002fec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003014:	4b25      	ldr	r3, [pc, #148]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d20c      	bcs.n	800303c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003022:	4b22      	ldr	r3, [pc, #136]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800302a:	4b20      	ldr	r3, [pc, #128]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d001      	beq.n	800303c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e032      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b00      	cmp	r3, #0
 8003046:	d008      	beq.n	800305a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003048:	4b19      	ldr	r3, [pc, #100]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	4916      	ldr	r1, [pc, #88]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	4313      	orrs	r3, r2
 8003058:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b00      	cmp	r3, #0
 8003064:	d009      	beq.n	800307a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003066:	4b12      	ldr	r3, [pc, #72]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	490e      	ldr	r1, [pc, #56]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003076:	4313      	orrs	r3, r2
 8003078:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800307a:	f000 f821 	bl	80030c0 <HAL_RCC_GetSysClockFreq>
 800307e:	4602      	mov	r2, r0
 8003080:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	091b      	lsrs	r3, r3, #4
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	490a      	ldr	r1, [pc, #40]	; (80030b4 <HAL_RCC_ClockConfig+0x1c0>)
 800308c:	5ccb      	ldrb	r3, [r1, r3]
 800308e:	fa22 f303 	lsr.w	r3, r2, r3
 8003092:	4a09      	ldr	r2, [pc, #36]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003096:	4b09      	ldr	r3, [pc, #36]	; (80030bc <HAL_RCC_ClockConfig+0x1c8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f7fe f9e2 	bl	8001464 <HAL_InitTick>

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40023c00 	.word	0x40023c00
 80030b0:	40023800 	.word	0x40023800
 80030b4:	08005b74 	.word	0x08005b74
 80030b8:	20000000 	.word	0x20000000
 80030bc:	20000004 	.word	0x20000004

080030c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030c4:	b090      	sub	sp, #64	; 0x40
 80030c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	637b      	str	r3, [r7, #52]	; 0x34
 80030cc:	2300      	movs	r3, #0
 80030ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030d0:	2300      	movs	r3, #0
 80030d2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030d8:	4b59      	ldr	r3, [pc, #356]	; (8003240 <HAL_RCC_GetSysClockFreq+0x180>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f003 030c 	and.w	r3, r3, #12
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d00d      	beq.n	8003100 <HAL_RCC_GetSysClockFreq+0x40>
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	f200 80a1 	bhi.w	800322c <HAL_RCC_GetSysClockFreq+0x16c>
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d002      	beq.n	80030f4 <HAL_RCC_GetSysClockFreq+0x34>
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d003      	beq.n	80030fa <HAL_RCC_GetSysClockFreq+0x3a>
 80030f2:	e09b      	b.n	800322c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030f4:	4b53      	ldr	r3, [pc, #332]	; (8003244 <HAL_RCC_GetSysClockFreq+0x184>)
 80030f6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80030f8:	e09b      	b.n	8003232 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030fa:	4b53      	ldr	r3, [pc, #332]	; (8003248 <HAL_RCC_GetSysClockFreq+0x188>)
 80030fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030fe:	e098      	b.n	8003232 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003100:	4b4f      	ldr	r3, [pc, #316]	; (8003240 <HAL_RCC_GetSysClockFreq+0x180>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003108:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800310a:	4b4d      	ldr	r3, [pc, #308]	; (8003240 <HAL_RCC_GetSysClockFreq+0x180>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d028      	beq.n	8003168 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003116:	4b4a      	ldr	r3, [pc, #296]	; (8003240 <HAL_RCC_GetSysClockFreq+0x180>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	099b      	lsrs	r3, r3, #6
 800311c:	2200      	movs	r2, #0
 800311e:	623b      	str	r3, [r7, #32]
 8003120:	627a      	str	r2, [r7, #36]	; 0x24
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003128:	2100      	movs	r1, #0
 800312a:	4b47      	ldr	r3, [pc, #284]	; (8003248 <HAL_RCC_GetSysClockFreq+0x188>)
 800312c:	fb03 f201 	mul.w	r2, r3, r1
 8003130:	2300      	movs	r3, #0
 8003132:	fb00 f303 	mul.w	r3, r0, r3
 8003136:	4413      	add	r3, r2
 8003138:	4a43      	ldr	r2, [pc, #268]	; (8003248 <HAL_RCC_GetSysClockFreq+0x188>)
 800313a:	fba0 1202 	umull	r1, r2, r0, r2
 800313e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003140:	460a      	mov	r2, r1
 8003142:	62ba      	str	r2, [r7, #40]	; 0x28
 8003144:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003146:	4413      	add	r3, r2
 8003148:	62fb      	str	r3, [r7, #44]	; 0x2c
 800314a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800314c:	2200      	movs	r2, #0
 800314e:	61bb      	str	r3, [r7, #24]
 8003150:	61fa      	str	r2, [r7, #28]
 8003152:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003156:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800315a:	f7fd fccf 	bl	8000afc <__aeabi_uldivmod>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	4613      	mov	r3, r2
 8003164:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003166:	e053      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003168:	4b35      	ldr	r3, [pc, #212]	; (8003240 <HAL_RCC_GetSysClockFreq+0x180>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	099b      	lsrs	r3, r3, #6
 800316e:	2200      	movs	r2, #0
 8003170:	613b      	str	r3, [r7, #16]
 8003172:	617a      	str	r2, [r7, #20]
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800317a:	f04f 0b00 	mov.w	fp, #0
 800317e:	4652      	mov	r2, sl
 8003180:	465b      	mov	r3, fp
 8003182:	f04f 0000 	mov.w	r0, #0
 8003186:	f04f 0100 	mov.w	r1, #0
 800318a:	0159      	lsls	r1, r3, #5
 800318c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003190:	0150      	lsls	r0, r2, #5
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	ebb2 080a 	subs.w	r8, r2, sl
 800319a:	eb63 090b 	sbc.w	r9, r3, fp
 800319e:	f04f 0200 	mov.w	r2, #0
 80031a2:	f04f 0300 	mov.w	r3, #0
 80031a6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80031aa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80031ae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80031b2:	ebb2 0408 	subs.w	r4, r2, r8
 80031b6:	eb63 0509 	sbc.w	r5, r3, r9
 80031ba:	f04f 0200 	mov.w	r2, #0
 80031be:	f04f 0300 	mov.w	r3, #0
 80031c2:	00eb      	lsls	r3, r5, #3
 80031c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031c8:	00e2      	lsls	r2, r4, #3
 80031ca:	4614      	mov	r4, r2
 80031cc:	461d      	mov	r5, r3
 80031ce:	eb14 030a 	adds.w	r3, r4, sl
 80031d2:	603b      	str	r3, [r7, #0]
 80031d4:	eb45 030b 	adc.w	r3, r5, fp
 80031d8:	607b      	str	r3, [r7, #4]
 80031da:	f04f 0200 	mov.w	r2, #0
 80031de:	f04f 0300 	mov.w	r3, #0
 80031e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031e6:	4629      	mov	r1, r5
 80031e8:	028b      	lsls	r3, r1, #10
 80031ea:	4621      	mov	r1, r4
 80031ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031f0:	4621      	mov	r1, r4
 80031f2:	028a      	lsls	r2, r1, #10
 80031f4:	4610      	mov	r0, r2
 80031f6:	4619      	mov	r1, r3
 80031f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031fa:	2200      	movs	r2, #0
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	60fa      	str	r2, [r7, #12]
 8003200:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003204:	f7fd fc7a 	bl	8000afc <__aeabi_uldivmod>
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	4613      	mov	r3, r2
 800320e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003210:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <HAL_RCC_GetSysClockFreq+0x180>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	0c1b      	lsrs	r3, r3, #16
 8003216:	f003 0303 	and.w	r3, r3, #3
 800321a:	3301      	adds	r3, #1
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003220:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003224:	fbb2 f3f3 	udiv	r3, r2, r3
 8003228:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800322a:	e002      	b.n	8003232 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800322c:	4b05      	ldr	r3, [pc, #20]	; (8003244 <HAL_RCC_GetSysClockFreq+0x184>)
 800322e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003230:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003234:	4618      	mov	r0, r3
 8003236:	3740      	adds	r7, #64	; 0x40
 8003238:	46bd      	mov	sp, r7
 800323a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800323e:	bf00      	nop
 8003240:	40023800 	.word	0x40023800
 8003244:	00f42400 	.word	0x00f42400
 8003248:	017d7840 	.word	0x017d7840

0800324c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003250:	4b03      	ldr	r3, [pc, #12]	; (8003260 <HAL_RCC_GetHCLKFreq+0x14>)
 8003252:	681b      	ldr	r3, [r3, #0]
}
 8003254:	4618      	mov	r0, r3
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	20000000 	.word	0x20000000

08003264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003268:	f7ff fff0 	bl	800324c <HAL_RCC_GetHCLKFreq>
 800326c:	4602      	mov	r2, r0
 800326e:	4b05      	ldr	r3, [pc, #20]	; (8003284 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	0a9b      	lsrs	r3, r3, #10
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	4903      	ldr	r1, [pc, #12]	; (8003288 <HAL_RCC_GetPCLK1Freq+0x24>)
 800327a:	5ccb      	ldrb	r3, [r1, r3]
 800327c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003280:	4618      	mov	r0, r3
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40023800 	.word	0x40023800
 8003288:	08005b84 	.word	0x08005b84

0800328c <user_delay_ms>:
 * @retval zero -> Success / +ve value -> Warning / -ve value -> Error
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev);

/****************** Global Function Definitions *******************************/
void user_delay_ms(uint32_t period){
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
	HAL_Delay(period);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7fe f935 	bl	8001504 <HAL_Delay>
}
 800329a:	bf00      	nop
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <user_i2c_read>:

int8_t user_i2c_read(void *handle, uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len){
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b08a      	sub	sp, #40	; 0x28
 80032a6:	af04      	add	r7, sp, #16
 80032a8:	60f8      	str	r0, [r7, #12]
 80032aa:	607b      	str	r3, [r7, #4]
 80032ac:	460b      	mov	r3, r1
 80032ae:	72fb      	strb	r3, [r7, #11]
 80032b0:	4613      	mov	r3, r2
 80032b2:	72bb      	strb	r3, [r7, #10]
	int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
 80032b4:	2300      	movs	r3, #0
 80032b6:	75fb      	strb	r3, [r7, #23]
	 * | Read       | (....)              |
	 * | Read       | (reg_data[len - 1]) |
	 * | Stop       | -                   |
	 * |------------+---------------------|
	 */
	rslt = HAL_I2C_Mem_Read((I2C_HandleTypeDef *) handle, (dev_id << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, len, 1000);
 80032b8:	7afb      	ldrb	r3, [r7, #11]
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	b299      	uxth	r1, r3
 80032c0:	7abb      	ldrb	r3, [r7, #10]
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032c8:	9302      	str	r3, [sp, #8]
 80032ca:	8c3b      	ldrh	r3, [r7, #32]
 80032cc:	9301      	str	r3, [sp, #4]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	2301      	movs	r3, #1
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f7fe fe13 	bl	8001f00 <HAL_I2C_Mem_Read>
 80032da:	4603      	mov	r3, r0
 80032dc:	75fb      	strb	r3, [r7, #23]

	return rslt;
 80032de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <user_i2c_write>:

int8_t user_i2c_write(void *handle, uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len){
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b08a      	sub	sp, #40	; 0x28
 80032ee:	af04      	add	r7, sp, #16
 80032f0:	60f8      	str	r0, [r7, #12]
 80032f2:	607b      	str	r3, [r7, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	72fb      	strb	r3, [r7, #11]
 80032f8:	4613      	mov	r3, r2
 80032fa:	72bb      	strb	r3, [r7, #10]
	int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
 80032fc:	2300      	movs	r3, #0
 80032fe:	75fb      	strb	r3, [r7, #23]
	 * | Write      | (....)              |
	 * | Write      | (reg_data[len - 1]) |
	 * | Stop       | -                   |
	 * |------------+---------------------|
	 */
	rslt = HAL_I2C_Mem_Write((I2C_HandleTypeDef *) handle, (dev_id << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, len, 1000);
 8003300:	7afb      	ldrb	r3, [r7, #11]
 8003302:	b29b      	uxth	r3, r3
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	b299      	uxth	r1, r3
 8003308:	7abb      	ldrb	r3, [r7, #10]
 800330a:	b29a      	uxth	r2, r3
 800330c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003310:	9302      	str	r3, [sp, #8]
 8003312:	8c3b      	ldrh	r3, [r7, #32]
 8003314:	9301      	str	r3, [sp, #4]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	2301      	movs	r3, #1
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f7fe fcf5 	bl	8001d0c <HAL_I2C_Mem_Write>
 8003322:	4603      	mov	r3, r0
 8003324:	75fb      	strb	r3, [r7, #23]

	return rslt;
 8003326:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800332a:	4618      	mov	r0, r3
 800332c:	3718      	adds	r7, #24
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <bme680_init>:
/*!
 *@brief This API is the entry point.
 *It reads the chip-id and calibration data from the sensor.
 */
int8_t bme680_init(struct bme680_dev *dev)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b084      	sub	sp, #16
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f001 fa75 	bl	800482a <null_ptr_check>
 8003340:	4603      	mov	r3, r0
 8003342:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8003344:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d120      	bne.n	800338e <bme680_init+0x5c>
		/* Soft reset to restore it to default values*/
		rslt = bme680_soft_reset(dev);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f8f5 	bl	800353c <bme680_soft_reset>
 8003352:	4603      	mov	r3, r0
 8003354:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME680_OK) {
 8003356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d117      	bne.n	800338e <bme680_init+0x5c>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, (uint8_t *) (&dev->chip_id), 1, dev);
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	20d0      	movs	r0, #208	; 0xd0
 8003366:	f000 f818 	bl	800339a <bme680_get_regs>
 800336a:	4603      	mov	r3, r0
 800336c:	73fb      	strb	r3, [r7, #15]
			if (rslt == BME680_OK) {
 800336e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10b      	bne.n	800338e <bme680_init+0x5c>
				if (dev->chip_id == BME680_CHIP_ID) {
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	2b61      	cmp	r3, #97	; 0x61
 800337c:	d105      	bne.n	800338a <bme680_init+0x58>
					/* Get the Calibration data */
					rslt = get_calib_data(dev);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 fbd6 	bl	8003b30 <get_calib_data>
 8003384:	4603      	mov	r3, r0
 8003386:	73fb      	strb	r3, [r7, #15]
 8003388:	e001      	b.n	800338e <bme680_init+0x5c>
				} else {
					rslt = BME680_E_DEV_NOT_FOUND;
 800338a:	23fd      	movs	r3, #253	; 0xfd
 800338c:	73fb      	strb	r3, [r7, #15]
				}
			}
		}
	}

	return rslt;
 800338e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 800339a:	b590      	push	{r4, r7, lr}
 800339c:	b089      	sub	sp, #36	; 0x24
 800339e:	af02      	add	r7, sp, #8
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607b      	str	r3, [r7, #4]
 80033a4:	4603      	mov	r3, r0
 80033a6:	73fb      	strb	r3, [r7, #15]
 80033a8:	4613      	mov	r3, r2
 80033aa:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f001 fa3c 	bl	800482a <null_ptr_check>
 80033b2:	4603      	mov	r3, r0
 80033b4:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME680_OK) {
 80033b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d129      	bne.n	8003412 <bme680_get_regs+0x78>
		if (dev->intf == BME680_SPI_INTF) {
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	789b      	ldrb	r3, [r3, #2]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10e      	bne.n	80033e4 <bme680_get_regs+0x4a>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
 80033c6:	7bfb      	ldrb	r3, [r7, #15]
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f001 f955 	bl	800467a <set_mem_page>
 80033d0:	4603      	mov	r3, r0
 80033d2:	75fb      	strb	r3, [r7, #23]
			if (rslt == BME680_OK)
 80033d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d103      	bne.n	80033e4 <bme680_get_regs+0x4a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
 80033de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80033e2:	73fb      	strb	r3, [r7, #15]
		}
		dev->com_rslt = dev->read(dev->handle,dev->dev_id, reg_addr, reg_data, len);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	7859      	ldrb	r1, [r3, #1]
 80033f0:	7bfa      	ldrb	r2, [r7, #15]
 80033f2:	89bb      	ldrh	r3, [r7, #12]
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	47a0      	blx	r4
 80033fa:	4603      	mov	r3, r0
 80033fc:	461a      	mov	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		if (dev->com_rslt != 0)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <bme680_get_regs+0x78>
			rslt = BME680_E_COM_FAIL;
 800340e:	23fe      	movs	r3, #254	; 0xfe
 8003410:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8003412:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003416:	4618      	mov	r0, r3
 8003418:	371c      	adds	r7, #28
 800341a:	46bd      	mov	sp, r7
 800341c:	bd90      	pop	{r4, r7, pc}

0800341e <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
 800341e:	b5b0      	push	{r4, r5, r7, lr}
 8003420:	b092      	sub	sp, #72	; 0x48
 8003422:	af02      	add	r7, sp, #8
 8003424:	60f8      	str	r0, [r7, #12]
 8003426:	60b9      	str	r1, [r7, #8]
 8003428:	603b      	str	r3, [r7, #0]
 800342a:	4613      	mov	r3, r2
 800342c:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 800342e:	2300      	movs	r3, #0
 8003430:	617b      	str	r3, [r7, #20]
 8003432:	f107 0318 	add.w	r3, r7, #24
 8003436:	2224      	movs	r2, #36	; 0x24
 8003438:	2100      	movs	r1, #0
 800343a:	4618      	mov	r0, r3
 800343c:	f001 fd19 	bl	8004e72 <memset>
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003440:	6838      	ldr	r0, [r7, #0]
 8003442:	f001 f9f2 	bl	800482a <null_ptr_check>
 8003446:	4603      	mov	r3, r0
 8003448:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (rslt == BME680_OK) {
 800344c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003450:	2b00      	cmp	r3, #0
 8003452:	d16d      	bne.n	8003530 <bme680_set_regs+0x112>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d065      	beq.n	8003526 <bme680_set_regs+0x108>
 800345a:	79fb      	ldrb	r3, [r7, #7]
 800345c:	2b13      	cmp	r3, #19
 800345e:	d862      	bhi.n	8003526 <bme680_set_regs+0x108>
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
 8003460:	2300      	movs	r3, #0
 8003462:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003464:	e034      	b.n	80034d0 <bme680_set_regs+0xb2>
				if (dev->intf == BME680_SPI_INTF) {
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	789b      	ldrb	r3, [r3, #2]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d118      	bne.n	80034a0 <bme680_set_regs+0x82>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 800346e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	4413      	add	r3, r2
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	6839      	ldr	r1, [r7, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f001 f8fe 	bl	800467a <set_mem_page>
 800347e:	4603      	mov	r3, r0
 8003480:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 8003484:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	4413      	add	r3, r2
 800348a:	781a      	ldrb	r2, [r3, #0]
 800348c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003494:	b2d2      	uxtb	r2, r2
 8003496:	3340      	adds	r3, #64	; 0x40
 8003498:	443b      	add	r3, r7
 800349a:	f803 2c2c 	strb.w	r2, [r3, #-44]
 800349e:	e009      	b.n	80034b4 <bme680_set_regs+0x96>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
 80034a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	441a      	add	r2, r3
 80034a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	7812      	ldrb	r2, [r2, #0]
 80034ac:	3340      	adds	r3, #64	; 0x40
 80034ae:	443b      	add	r3, r7
 80034b0:	f803 2c2c 	strb.w	r2, [r3, #-44]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
 80034b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	441a      	add	r2, r3
 80034ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	3301      	adds	r3, #1
 80034c0:	7812      	ldrb	r2, [r2, #0]
 80034c2:	3340      	adds	r3, #64	; 0x40
 80034c4:	443b      	add	r3, r7
 80034c6:	f803 2c2c 	strb.w	r2, [r3, #-44]
			for (index = 0; index < len; index++) {
 80034ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80034cc:	3301      	adds	r3, #1
 80034ce:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80034d0:	79fb      	ldrb	r3, [r7, #7]
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d3c5      	bcc.n	8003466 <bme680_set_regs+0x48>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
 80034da:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d125      	bne.n	800352e <bme680_set_regs+0x110>
				dev->com_rslt = dev->write(dev->handle,dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	7859      	ldrb	r1, [r3, #1]
 80034ee:	7d3d      	ldrb	r5, [r7, #20]
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	f107 0214 	add.w	r2, r7, #20
 8003500:	3201      	adds	r2, #1
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	4613      	mov	r3, r2
 8003506:	462a      	mov	r2, r5
 8003508:	47a0      	blx	r4
 800350a:	4603      	mov	r3, r0
 800350c:	461a      	mov	r2, r3
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
				if (dev->com_rslt != 0)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 800351a:	2b00      	cmp	r3, #0
 800351c:	d007      	beq.n	800352e <bme680_set_regs+0x110>
					rslt = BME680_E_COM_FAIL;
 800351e:	23fe      	movs	r3, #254	; 0xfe
 8003520:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			if (rslt == BME680_OK) {
 8003524:	e003      	b.n	800352e <bme680_set_regs+0x110>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
 8003526:	23fc      	movs	r3, #252	; 0xfc
 8003528:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800352c:	e000      	b.n	8003530 <bme680_set_regs+0x112>
			if (rslt == BME680_OK) {
 800352e:	bf00      	nop
		}
	}

	return rslt;
 8003530:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8003534:	4618      	mov	r0, r3
 8003536:	3740      	adds	r7, #64	; 0x40
 8003538:	46bd      	mov	sp, r7
 800353a:	bdb0      	pop	{r4, r5, r7, pc}

0800353c <bme680_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 8003544:	23e0      	movs	r3, #224	; 0xe0
 8003546:	73bb      	strb	r3, [r7, #14]
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 8003548:	23b6      	movs	r3, #182	; 0xb6
 800354a:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f001 f96c 	bl	800482a <null_ptr_check>
 8003552:	4603      	mov	r3, r0
 8003554:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8003556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d127      	bne.n	80035ae <bme680_soft_reset+0x72>
		if (dev->intf == BME680_SPI_INTF)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	789b      	ldrb	r3, [r3, #2]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d104      	bne.n	8003570 <bme680_soft_reset+0x34>
			rslt = get_mem_page(dev);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f001 f8f2 	bl	8004750 <get_mem_page>
 800356c:	4603      	mov	r3, r0
 800356e:	73fb      	strb	r3, [r7, #15]

		/* Reset the device */
		if (rslt == BME680_OK) {
 8003570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d11a      	bne.n	80035ae <bme680_soft_reset+0x72>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8003578:	f107 010d 	add.w	r1, r7, #13
 800357c:	f107 000e 	add.w	r0, r7, #14
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f7ff ff4b 	bl	800341e <bme680_set_regs>
 8003588:	4603      	mov	r3, r0
 800358a:	73fb      	strb	r3, [r7, #15]
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003590:	200a      	movs	r0, #10
 8003592:	4798      	blx	r3

			if (rslt == BME680_OK) {
 8003594:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d108      	bne.n	80035ae <bme680_soft_reset+0x72>
				/* After reset get the memory page */
				if (dev->intf == BME680_SPI_INTF)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	789b      	ldrb	r3, [r3, #2]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d104      	bne.n	80035ae <bme680_soft_reset+0x72>
					rslt = get_mem_page(dev);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f001 f8d3 	bl	8004750 <get_mem_page>
 80035aa:	4603      	mov	r3, r0
 80035ac:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return rslt;
 80035ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b088      	sub	sp, #32
 80035be:	af00      	add	r7, sp, #0
 80035c0:	4603      	mov	r3, r0
 80035c2:	6039      	str	r1, [r7, #0]
 80035c4:	80fb      	strh	r3, [r7, #6]
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 80035c6:	2300      	movs	r3, #0
 80035c8:	76fb      	strb	r3, [r7, #27]
	uint8_t count = 0;
 80035ca:	2300      	movs	r3, #0
 80035cc:	77bb      	strb	r3, [r7, #30]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]
 80035d2:	2300      	movs	r3, #0
 80035d4:	833b      	strh	r3, [r7, #24]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 80035d6:	2300      	movs	r3, #0
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	2300      	movs	r3, #0
 80035dc:	823b      	strh	r3, [r7, #16]
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035e4:	777b      	strb	r3, [r7, #29]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80035e6:	6838      	ldr	r0, [r7, #0]
 80035e8:	f001 f91f 	bl	800482a <null_ptr_check>
 80035ec:	4603      	mov	r3, r0
 80035ee:	77fb      	strb	r3, [r7, #31]
	if (rslt == BME680_OK) {
 80035f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f040 81a2 	bne.w	800393e <bme680_set_sensor_settings+0x384>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 80035fa:	88fb      	ldrh	r3, [r7, #6]
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	2b00      	cmp	r3, #0
 8003602:	d004      	beq.n	800360e <bme680_set_sensor_settings+0x54>
			rslt = set_gas_config(dev);
 8003604:	6838      	ldr	r0, [r7, #0]
 8003606:	f000 fbbf 	bl	8003d88 <set_gas_config>
 800360a:	4603      	mov	r3, r0
 800360c:	77fb      	strb	r3, [r7, #31]

		dev->power_mode = BME680_SLEEP_MODE;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		if (rslt == BME680_OK)
 8003616:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d104      	bne.n	8003628 <bme680_set_sensor_settings+0x6e>
			rslt = bme680_set_sensor_mode(dev);
 800361e:	6838      	ldr	r0, [r7, #0]
 8003620:	f000 f993 	bl	800394a <bme680_set_sensor_mode>
 8003624:	4603      	mov	r3, r0
 8003626:	77fb      	strb	r3, [r7, #31]

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
 8003628:	88fb      	ldrh	r3, [r7, #6]
 800362a:	f003 0310 	and.w	r3, r3, #16
 800362e:	2b00      	cmp	r3, #0
 8003630:	d03d      	beq.n	80036ae <bme680_set_sensor_settings+0xf4>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	f103 003b 	add.w	r0, r3, #59	; 0x3b
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	2207      	movs	r2, #7
 800363c:	2100      	movs	r1, #0
 800363e:	f001 f8b9 	bl	80047b4 <boundary_check>
 8003642:	4603      	mov	r3, r0
 8003644:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_ODR_FILT_ADDR;
 8003646:	2375      	movs	r3, #117	; 0x75
 8003648:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 800364a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d108      	bne.n	8003664 <bme680_set_sensor_settings+0xaa>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8003652:	f107 011b 	add.w	r1, r7, #27
 8003656:	7f38      	ldrb	r0, [r7, #28]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	2201      	movs	r2, #1
 800365c:	f7ff fe9d 	bl	800339a <bme680_get_regs>
 8003660:	4603      	mov	r3, r0
 8003662:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_FILTER_SEL)
 8003664:	88fb      	ldrh	r3, [r7, #6]
 8003666:	f003 0310 	and.w	r3, r3, #16
 800366a:	2b00      	cmp	r3, #0
 800366c:	d010      	beq.n	8003690 <bme680_set_sensor_settings+0xd6>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 800366e:	7efb      	ldrb	r3, [r7, #27]
 8003670:	b25b      	sxtb	r3, r3
 8003672:	f023 031c 	bic.w	r3, r3, #28
 8003676:	b25a      	sxtb	r2, r3
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	b25b      	sxtb	r3, r3
 8003682:	f003 031c 	and.w	r3, r3, #28
 8003686:	b25b      	sxtb	r3, r3
 8003688:	4313      	orrs	r3, r2
 800368a:	b25b      	sxtb	r3, r3
 800368c:	b2db      	uxtb	r3, r3
 800368e:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8003690:	7fbb      	ldrb	r3, [r7, #30]
 8003692:	3320      	adds	r3, #32
 8003694:	443b      	add	r3, r7
 8003696:	7f3a      	ldrb	r2, [r7, #28]
 8003698:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 800369c:	7fbb      	ldrb	r3, [r7, #30]
 800369e:	7efa      	ldrb	r2, [r7, #27]
 80036a0:	3320      	adds	r3, #32
 80036a2:	443b      	add	r3, r7
 80036a4:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 80036a8:	7fbb      	ldrb	r3, [r7, #30]
 80036aa:	3301      	adds	r3, #1
 80036ac:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
 80036ae:	88fb      	ldrh	r3, [r7, #6]
 80036b0:	f003 0320 	and.w	r3, r3, #32
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d037      	beq.n	8003728 <bme680_set_sensor_settings+0x16e>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	f103 003d 	add.w	r0, r3, #61	; 0x3d
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2208      	movs	r2, #8
 80036c2:	2100      	movs	r1, #0
 80036c4:	f001 f876 	bl	80047b4 <boundary_check>
 80036c8:	4603      	mov	r3, r0
 80036ca:	77fb      	strb	r3, [r7, #31]
					BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;
 80036cc:	2370      	movs	r3, #112	; 0x70
 80036ce:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 80036d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d108      	bne.n	80036ea <bme680_set_sensor_settings+0x130>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80036d8:	f107 011b 	add.w	r1, r7, #27
 80036dc:	7f38      	ldrb	r0, [r7, #28]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f7ff fe5a 	bl	800339a <bme680_get_regs>
 80036e6:	4603      	mov	r3, r0
 80036e8:	77fb      	strb	r3, [r7, #31]
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 80036ea:	7efb      	ldrb	r3, [r7, #27]
 80036ec:	b25b      	sxtb	r3, r3
 80036ee:	f023 0308 	bic.w	r3, r3, #8
 80036f2:	b25a      	sxtb	r2, r3
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036fa:	b25b      	sxtb	r3, r3
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	b25b      	sxtb	r3, r3
 8003702:	4313      	orrs	r3, r2
 8003704:	b25b      	sxtb	r3, r3
 8003706:	b2db      	uxtb	r3, r3
 8003708:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 800370a:	7fbb      	ldrb	r3, [r7, #30]
 800370c:	3320      	adds	r3, #32
 800370e:	443b      	add	r3, r7
 8003710:	7f3a      	ldrb	r2, [r7, #28]
 8003712:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8003716:	7fbb      	ldrb	r3, [r7, #30]
 8003718:	7efa      	ldrb	r2, [r7, #27]
 800371a:	3320      	adds	r3, #32
 800371c:	443b      	add	r3, r7
 800371e:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8003722:	7fbb      	ldrb	r3, [r7, #30]
 8003724:	3301      	adds	r3, #1
 8003726:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 8003728:	88fb      	ldrh	r3, [r7, #6]
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d050      	beq.n	80037d4 <bme680_set_sensor_settings+0x21a>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	2205      	movs	r2, #5
 800373c:	2100      	movs	r1, #0
 800373e:	f001 f839 	bl	80047b4 <boundary_check>
 8003742:	4603      	mov	r3, r0
 8003744:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8003746:	2374      	movs	r3, #116	; 0x74
 8003748:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 800374a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d108      	bne.n	8003764 <bme680_set_sensor_settings+0x1aa>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8003752:	f107 011b 	add.w	r1, r7, #27
 8003756:	7f38      	ldrb	r0, [r7, #28]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	2201      	movs	r2, #1
 800375c:	f7ff fe1d 	bl	800339a <bme680_get_regs>
 8003760:	4603      	mov	r3, r0
 8003762:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_OST_SEL)
 8003764:	88fb      	ldrh	r3, [r7, #6]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00d      	beq.n	800378a <bme680_set_sensor_settings+0x1d0>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 800376e:	7efb      	ldrb	r3, [r7, #27]
 8003770:	b25b      	sxtb	r3, r3
 8003772:	f003 031f 	and.w	r3, r3, #31
 8003776:	b25a      	sxtb	r2, r3
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800377e:	015b      	lsls	r3, r3, #5
 8003780:	b25b      	sxtb	r3, r3
 8003782:	4313      	orrs	r3, r2
 8003784:	b25b      	sxtb	r3, r3
 8003786:	b2db      	uxtb	r3, r3
 8003788:	76fb      	strb	r3, [r7, #27]

			if (desired_settings & BME680_OSP_SEL)
 800378a:	88fb      	ldrh	r3, [r7, #6]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d010      	beq.n	80037b6 <bme680_set_sensor_settings+0x1fc>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 8003794:	7efb      	ldrb	r3, [r7, #27]
 8003796:	b25b      	sxtb	r3, r3
 8003798:	f023 031c 	bic.w	r3, r3, #28
 800379c:	b25a      	sxtb	r2, r3
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	b25b      	sxtb	r3, r3
 80037a8:	f003 031c 	and.w	r3, r3, #28
 80037ac:	b25b      	sxtb	r3, r3
 80037ae:	4313      	orrs	r3, r2
 80037b0:	b25b      	sxtb	r3, r3
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr;
 80037b6:	7fbb      	ldrb	r3, [r7, #30]
 80037b8:	3320      	adds	r3, #32
 80037ba:	443b      	add	r3, r7
 80037bc:	7f3a      	ldrb	r2, [r7, #28]
 80037be:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 80037c2:	7fbb      	ldrb	r3, [r7, #30]
 80037c4:	7efa      	ldrb	r2, [r7, #27]
 80037c6:	3320      	adds	r3, #32
 80037c8:	443b      	add	r3, r7
 80037ca:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 80037ce:	7fbb      	ldrb	r3, [r7, #30]
 80037d0:	3301      	adds	r3, #1
 80037d2:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
 80037d4:	88fb      	ldrh	r3, [r7, #6]
 80037d6:	f003 0304 	and.w	r3, r3, #4
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d037      	beq.n	800384e <bme680_set_sensor_settings+0x294>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	2205      	movs	r2, #5
 80037e8:	2100      	movs	r1, #0
 80037ea:	f000 ffe3 	bl	80047b4 <boundary_check>
 80037ee:	4603      	mov	r3, r0
 80037f0:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_OS_H_ADDR;
 80037f2:	2372      	movs	r3, #114	; 0x72
 80037f4:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 80037f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d108      	bne.n	8003810 <bme680_set_sensor_settings+0x256>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80037fe:	f107 011b 	add.w	r1, r7, #27
 8003802:	7f38      	ldrb	r0, [r7, #28]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	2201      	movs	r2, #1
 8003808:	f7ff fdc7 	bl	800339a <bme680_get_regs>
 800380c:	4603      	mov	r3, r0
 800380e:	77fb      	strb	r3, [r7, #31]
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8003810:	7efb      	ldrb	r3, [r7, #27]
 8003812:	b25b      	sxtb	r3, r3
 8003814:	f023 0307 	bic.w	r3, r3, #7
 8003818:	b25a      	sxtb	r2, r3
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003820:	b25b      	sxtb	r3, r3
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	b25b      	sxtb	r3, r3
 8003828:	4313      	orrs	r3, r2
 800382a:	b25b      	sxtb	r3, r3
 800382c:	b2db      	uxtb	r3, r3
 800382e:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8003830:	7fbb      	ldrb	r3, [r7, #30]
 8003832:	3320      	adds	r3, #32
 8003834:	443b      	add	r3, r7
 8003836:	7f3a      	ldrb	r2, [r7, #28]
 8003838:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 800383c:	7fbb      	ldrb	r3, [r7, #30]
 800383e:	7efa      	ldrb	r2, [r7, #27]
 8003840:	3320      	adds	r3, #32
 8003842:	443b      	add	r3, r7
 8003844:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8003848:	7fbb      	ldrb	r3, [r7, #30]
 800384a:	3301      	adds	r3, #1
 800384c:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 800384e:	88fb      	ldrh	r3, [r7, #6]
 8003850:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d060      	beq.n	800391a <bme680_set_sensor_settings+0x360>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	f103 003e 	add.w	r0, r3, #62	; 0x3e
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2201      	movs	r2, #1
 8003862:	2100      	movs	r1, #0
 8003864:	f000 ffa6 	bl	80047b4 <boundary_check>
 8003868:	4603      	mov	r3, r0
 800386a:	77fb      	strb	r3, [r7, #31]
					BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
 800386c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d109      	bne.n	8003888 <bme680_set_sensor_settings+0x2ce>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	220a      	movs	r2, #10
 800387e:	2100      	movs	r1, #0
 8003880:	f000 ff98 	bl	80047b4 <boundary_check>
 8003884:	4603      	mov	r3, r0
 8003886:	77fb      	strb	r3, [r7, #31]
						BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;
 8003888:	2371      	movs	r3, #113	; 0x71
 800388a:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 800388c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d108      	bne.n	80038a6 <bme680_set_sensor_settings+0x2ec>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8003894:	f107 011b 	add.w	r1, r7, #27
 8003898:	7f38      	ldrb	r0, [r7, #28]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2201      	movs	r2, #1
 800389e:	f7ff fd7c 	bl	800339a <bme680_get_regs>
 80038a2:	4603      	mov	r3, r0
 80038a4:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_RUN_GAS_SEL)
 80038a6:	88fb      	ldrh	r3, [r7, #6]
 80038a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d010      	beq.n	80038d2 <bme680_set_sensor_settings+0x318>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 80038b0:	7efb      	ldrb	r3, [r7, #27]
 80038b2:	b25b      	sxtb	r3, r3
 80038b4:	f023 0310 	bic.w	r3, r3, #16
 80038b8:	b25a      	sxtb	r2, r3
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038c0:	011b      	lsls	r3, r3, #4
 80038c2:	b25b      	sxtb	r3, r3
 80038c4:	f003 0310 	and.w	r3, r3, #16
 80038c8:	b25b      	sxtb	r3, r3
 80038ca:	4313      	orrs	r3, r2
 80038cc:	b25b      	sxtb	r3, r3
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	76fb      	strb	r3, [r7, #27]

			if (desired_settings & BME680_NBCONV_SEL)
 80038d2:	88fb      	ldrh	r3, [r7, #6]
 80038d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00f      	beq.n	80038fc <bme680_set_sensor_settings+0x342>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 80038dc:	7efb      	ldrb	r3, [r7, #27]
 80038de:	b25b      	sxtb	r3, r3
 80038e0:	f023 030f 	bic.w	r3, r3, #15
 80038e4:	b25a      	sxtb	r2, r3
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ec:	b25b      	sxtb	r3, r3
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	b25b      	sxtb	r3, r3
 80038f4:	4313      	orrs	r3, r2
 80038f6:	b25b      	sxtb	r3, r3
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 80038fc:	7fbb      	ldrb	r3, [r7, #30]
 80038fe:	3320      	adds	r3, #32
 8003900:	443b      	add	r3, r7
 8003902:	7f3a      	ldrb	r2, [r7, #28]
 8003904:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8003908:	7fbb      	ldrb	r3, [r7, #30]
 800390a:	7efa      	ldrb	r2, [r7, #27]
 800390c:	3320      	adds	r3, #32
 800390e:	443b      	add	r3, r7
 8003910:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8003914:	7fbb      	ldrb	r3, [r7, #30]
 8003916:	3301      	adds	r3, #1
 8003918:	77bb      	strb	r3, [r7, #30]
		}

		if (rslt == BME680_OK)
 800391a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d109      	bne.n	8003936 <bme680_set_sensor_settings+0x37c>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 8003922:	7fba      	ldrb	r2, [r7, #30]
 8003924:	f107 010c 	add.w	r1, r7, #12
 8003928:	f107 0014 	add.w	r0, r7, #20
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	f7ff fd76 	bl	800341e <bme680_set_regs>
 8003932:	4603      	mov	r3, r0
 8003934:	77fb      	strb	r3, [r7, #31]

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	7f7a      	ldrb	r2, [r7, #29]
 800393a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}

	return rslt;
 800393e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3720      	adds	r7, #32
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b084      	sub	sp, #16
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
 8003952:	2300      	movs	r3, #0
 8003954:	73bb      	strb	r3, [r7, #14]
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8003956:	2374      	movs	r3, #116	; 0x74
 8003958:	733b      	strb	r3, [r7, #12]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 ff65 	bl	800482a <null_ptr_check>
 8003960:	4603      	mov	r3, r0
 8003962:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8003964:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d14c      	bne.n	8003a06 <bme680_set_sensor_mode+0xbc>
		/* Call repeatedly until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 800396c:	f107 010d 	add.w	r1, r7, #13
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	2074      	movs	r0, #116	; 0x74
 8003976:	f7ff fd10 	bl	800339a <bme680_get_regs>
 800397a:	4603      	mov	r3, r0
 800397c:	73fb      	strb	r3, [r7, #15]
			if (rslt == BME680_OK) {
 800397e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d119      	bne.n	80039ba <bme680_set_sensor_mode+0x70>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 8003986:	7b7b      	ldrb	r3, [r7, #13]
 8003988:	f003 0303 	and.w	r3, r3, #3
 800398c:	73bb      	strb	r3, [r7, #14]

				if (pow_mode != BME680_SLEEP_MODE) {
 800398e:	7bbb      	ldrb	r3, [r7, #14]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d012      	beq.n	80039ba <bme680_set_sensor_mode+0x70>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 8003994:	7b7b      	ldrb	r3, [r7, #13]
 8003996:	f023 0303 	bic.w	r3, r3, #3
 800399a:	b2db      	uxtb	r3, r3
 800399c:	737b      	strb	r3, [r7, #13]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 800399e:	f107 010d 	add.w	r1, r7, #13
 80039a2:	f107 000c 	add.w	r0, r7, #12
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f7ff fd38 	bl	800341e <bme680_set_regs>
 80039ae:	4603      	mov	r3, r0
 80039b0:	73fb      	strb	r3, [r7, #15]
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b6:	200a      	movs	r0, #10
 80039b8:	4798      	blx	r3
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
 80039ba:	7bbb      	ldrb	r3, [r7, #14]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1d5      	bne.n	800396c <bme680_set_sensor_mode+0x22>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d01d      	beq.n	8003a06 <bme680_set_sensor_mode+0xbc>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 80039ca:	7b7b      	ldrb	r3, [r7, #13]
 80039cc:	b25b      	sxtb	r3, r3
 80039ce:	f023 0303 	bic.w	r3, r3, #3
 80039d2:	b25a      	sxtb	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039da:	b25b      	sxtb	r3, r3
 80039dc:	f003 0303 	and.w	r3, r3, #3
 80039e0:	b25b      	sxtb	r3, r3
 80039e2:	4313      	orrs	r3, r2
 80039e4:	b25b      	sxtb	r3, r3
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	737b      	strb	r3, [r7, #13]
			if (rslt == BME680_OK)
 80039ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d109      	bne.n	8003a06 <bme680_set_sensor_mode+0xbc>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80039f2:	f107 010d 	add.w	r1, r7, #13
 80039f6:	f107 000c 	add.w	r0, r7, #12
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f7ff fd0e 	bl	800341e <bme680_set_regs>
 8003a02:	4603      	mov	r3, r0
 8003a04:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 8003a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
	...

08003a14 <bme680_get_profile_dur>:

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 8003a1e:	4a2c      	ldr	r2, [pc, #176]	; (8003ad0 <bme680_get_profile_dur+0xbc>)
 8003a20:	f107 0308 	add.w	r3, r7, #8
 8003a24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a28:	6018      	str	r0, [r3, #0]
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	8019      	strh	r1, [r3, #0]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a34:	3318      	adds	r3, #24
 8003a36:	443b      	add	r3, r7
 8003a38:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003a3c:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003a44:	3318      	adds	r3, #24
 8003a46:	443b      	add	r3, r7
 8003a48:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	4413      	add	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a5a:	3318      	adds	r3, #24
 8003a5c:	443b      	add	r3, r7
 8003a5e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003a62:	461a      	mov	r2, r3
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	4413      	add	r3, r2
 8003a68:	617b      	str	r3, [r7, #20]

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f240 72ab 	movw	r2, #1963	; 0x7ab
 8003a70:	fb02 f303 	mul.w	r3, r2, r3
 8003a74:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f203 7374 	addw	r3, r3, #1908	; 0x774
 8003a7c:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f603 1351 	addw	r3, r3, #2385	; 0x951
 8003a84:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003a8c:	613b      	str	r3, [r7, #16]
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	4a10      	ldr	r2, [pc, #64]	; (8003ad4 <bme680_get_profile_dur+0xc0>)
 8003a92:	fba2 2303 	umull	r2, r3, r2, r3
 8003a96:	099b      	lsrs	r3, r3, #6
 8003a98:	613b      	str	r3, [r7, #16]

	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	613b      	str	r3, [r7, #16]

	*duration = (uint16_t) tph_dur;
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	801a      	strh	r2, [r3, #0]

	/* Get the gas duration only when the run gas is enabled */
	if (dev->gas_sett.run_gas) {
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d008      	beq.n	8003ac4 <bme680_get_profile_dur+0xb0>
		/* The remaining time should be used for heating */
		*duration += dev->gas_sett.heatr_dur;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	881a      	ldrh	r2, [r3, #0]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003abc:	4413      	add	r3, r2
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	801a      	strh	r2, [r3, #0]
	}
}
 8003ac4:	bf00      	nop
 8003ac6:	371c      	adds	r7, #28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	08005acc 	.word	0x08005acc
 8003ad4:	10624dd3 	.word	0x10624dd3

08003ad8 <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003ae2:	6838      	ldr	r0, [r7, #0]
 8003ae4:	f000 fea1 	bl	800482a <null_ptr_check>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8003aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d117      	bne.n	8003b24 <bme680_get_sensor_data+0x4c>
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
 8003af4:	6839      	ldr	r1, [r7, #0]
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 fd05 	bl	8004506 <read_field_data>
 8003afc:	4603      	mov	r3, r0
 8003afe:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME680_OK) {
 8003b00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10d      	bne.n	8003b24 <bme680_get_sensor_data+0x4c>
			if (data->status & BME680_NEW_DATA_MSK)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	b25b      	sxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	da04      	bge.n	8003b1c <bme680_get_sensor_data+0x44>
				dev->new_fields = 1;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b1a:	e003      	b.n	8003b24 <bme680_get_sensor_data+0x4c>
			else
				dev->new_fields = 0;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		}
	}

	return rslt;
 8003b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <get_calib_data>:

/*!
 * @brief This internal API is used to read the calibrated data from the sensor.
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b08e      	sub	sp, #56	; 0x38
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	f107 0310 	add.w	r3, r7, #16
 8003b40:	2225      	movs	r2, #37	; 0x25
 8003b42:	2100      	movs	r1, #0
 8003b44:	4618      	mov	r0, r3
 8003b46:	f001 f994 	bl	8004e72 <memset>
	uint8_t temp_var = 0; /* Temporary variable */
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	72fb      	strb	r3, [r7, #11]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 fe6b 	bl	800482a <null_ptr_check>
 8003b54:	4603      	mov	r3, r0
 8003b56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (rslt == BME680_OK) {
 8003b5a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f040 810c 	bne.w	8003d7c <get_calib_data+0x24c>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
 8003b64:	f107 010c 	add.w	r1, r7, #12
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2219      	movs	r2, #25
 8003b6c:	2089      	movs	r0, #137	; 0x89
 8003b6e:	f7ff fc14 	bl	800339a <bme680_get_regs>
 8003b72:	4603      	mov	r3, r0
 8003b74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		/* Append the second half in the same array */
		if (rslt == BME680_OK)
 8003b78:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10b      	bne.n	8003b98 <get_calib_data+0x68>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
 8003b80:	f107 030c 	add.w	r3, r7, #12
 8003b84:	f103 0119 	add.w	r1, r3, #25
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2210      	movs	r2, #16
 8003b8c:	20e1      	movs	r0, #225	; 0xe1
 8003b8e:	f7ff fc04 	bl	800339a <bme680_get_regs>
 8003b92:	4603      	mov	r3, r0
 8003b94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
																					  , BME680_COEFF_ADDR2_LEN, dev);

		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 8003b98:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003b9c:	021b      	lsls	r3, r3, #8
 8003b9e:	b21a      	sxth	r2, r3
 8003ba0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003ba4:	b21b      	sxth	r3, r3
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	b21b      	sxth	r3, r3
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	82da      	strh	r2, [r3, #22]
				coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
 8003bb0:	7bbb      	ldrb	r3, [r7, #14]
 8003bb2:	021b      	lsls	r3, r3, #8
 8003bb4:	b21a      	sxth	r2, r3
 8003bb6:	7b7b      	ldrb	r3, [r7, #13]
 8003bb8:	b21b      	sxth	r3, r3
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	b21a      	sxth	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	831a      	strh	r2, [r3, #24]
				coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 8003bc2:	7bfb      	ldrb	r3, [r7, #15]
 8003bc4:	b25a      	sxtb	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	769a      	strb	r2, [r3, #26]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 8003bca:	7cbb      	ldrb	r3, [r7, #18]
 8003bcc:	021b      	lsls	r3, r3, #8
 8003bce:	b21a      	sxth	r2, r3
 8003bd0:	7c7b      	ldrb	r3, [r7, #17]
 8003bd2:	b21b      	sxth	r3, r3
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	b21b      	sxth	r3, r3
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	839a      	strh	r2, [r3, #28]
				coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
 8003bde:	7d3b      	ldrb	r3, [r7, #20]
 8003be0:	021b      	lsls	r3, r3, #8
 8003be2:	b21a      	sxth	r2, r3
 8003be4:	7cfb      	ldrb	r3, [r7, #19]
 8003be6:	b21b      	sxth	r3, r3
 8003be8:	4313      	orrs	r3, r2
 8003bea:	b21a      	sxth	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	83da      	strh	r2, [r3, #30]
				coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 8003bf0:	7d7b      	ldrb	r3, [r7, #21]
 8003bf2:	b25a      	sxtb	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f883 2020 	strb.w	r2, [r3, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 8003bfa:	7e3b      	ldrb	r3, [r7, #24]
 8003bfc:	021b      	lsls	r3, r3, #8
 8003bfe:	b21a      	sxth	r2, r3
 8003c00:	7dfb      	ldrb	r3, [r7, #23]
 8003c02:	b21b      	sxth	r3, r3
 8003c04:	4313      	orrs	r3, r2
 8003c06:	b21a      	sxth	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	845a      	strh	r2, [r3, #34]	; 0x22
				coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
 8003c0c:	7ebb      	ldrb	r3, [r7, #26]
 8003c0e:	021b      	lsls	r3, r3, #8
 8003c10:	b21a      	sxth	r2, r3
 8003c12:	7e7b      	ldrb	r3, [r7, #25]
 8003c14:	b21b      	sxth	r3, r3
 8003c16:	4313      	orrs	r3, r2
 8003c18:	b21a      	sxth	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	849a      	strh	r2, [r3, #36]	; 0x24
				coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 8003c1e:	7f3b      	ldrb	r3, [r7, #28]
 8003c20:	b25a      	sxtb	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
 8003c28:	7efb      	ldrb	r3, [r7, #27]
 8003c2a:	b25a      	sxtb	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 8003c32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c36:	021b      	lsls	r3, r3, #8
 8003c38:	b21a      	sxth	r2, r3
 8003c3a:	7ffb      	ldrb	r3, [r7, #31]
 8003c3c:	b21b      	sxth	r3, r3
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	b21a      	sxth	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	851a      	strh	r2, [r3, #40]	; 0x28
				coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
 8003c46:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003c4a:	021b      	lsls	r3, r3, #8
 8003c4c:	b21a      	sxth	r2, r3
 8003c4e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003c52:	b21b      	sxth	r3, r3
 8003c54:	4313      	orrs	r3, r2
 8003c56:	b21a      	sxth	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	855a      	strh	r2, [r3, #42]	; 0x2a
				coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 8003c5c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8003c66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c6a:	011b      	lsls	r3, r3, #4
				| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 8003c6c:	b21a      	sxth	r2, r3
 8003c6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003c72:	b21b      	sxth	r3, r3
 8003c74:	f003 030f 	and.w	r3, r3, #15
 8003c78:	b21b      	sxth	r3, r3
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	b21b      	sxth	r3, r3
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	811a      	strh	r2, [r3, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8003c84:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003c88:	011b      	lsls	r3, r3, #4
				| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
 8003c8a:	b21a      	sxth	r2, r3
 8003c8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003c90:	091b      	lsrs	r3, r3, #4
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	b21b      	sxth	r3, r3
 8003c96:	4313      	orrs	r3, r2
 8003c98:	b21b      	sxth	r3, r3
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	815a      	strh	r2, [r3, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 8003ca0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003ca4:	b25a      	sxtb	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	731a      	strb	r2, [r3, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
 8003caa:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003cae:	b25a      	sxtb	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	735a      	strb	r2, [r3, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
 8003cb4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003cb8:	b25a      	sxtb	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	739a      	strb	r2, [r3, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
 8003cbe:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	73da      	strb	r2, [r3, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
 8003cc6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003cca:	b25a      	sxtb	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	741a      	strb	r2, [r3, #16]

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
 8003cd0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8003cd4:	b25a      	sxtb	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	745a      	strb	r2, [r3, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 8003cda:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003cde:	021b      	lsls	r3, r3, #8
 8003ce0:	b21a      	sxth	r2, r3
 8003ce2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003ce6:	b21b      	sxth	r3, r3
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	b21a      	sxth	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	825a      	strh	r2, [r3, #18]
				coeff_array[BME680_GH2_LSB_REG]));
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
 8003cf0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003cf4:	b25a      	sxtb	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	751a      	strb	r2, [r3, #20]

		/* Other coefficients */
		if (rslt == BME680_OK) {
 8003cfa:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d135      	bne.n	8003d6e <get_calib_data+0x23e>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
 8003d02:	f107 010b 	add.w	r1, r7, #11
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	2002      	movs	r0, #2
 8003d0c:	f7ff fb45 	bl	800339a <bme680_get_regs>
 8003d10:	4603      	mov	r3, r0
 8003d12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 8003d16:	7afb      	ldrb	r3, [r7, #11]
 8003d18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	da00      	bge.n	8003d22 <get_calib_data+0x1f2>
 8003d20:	330f      	adds	r3, #15
 8003d22:	111b      	asrs	r3, r3, #4
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if (rslt == BME680_OK) {
 8003d2c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d11c      	bne.n	8003d6e <get_calib_data+0x23e>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
 8003d34:	f107 010b 	add.w	r1, r7, #11
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	2000      	movs	r0, #0
 8003d3e:	f7ff fb2c 	bl	800339a <bme680_get_regs>
 8003d42:	4603      	mov	r3, r0
 8003d44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

				dev->calib.res_heat_val = (int8_t) temp_var;
 8003d48:	7afb      	ldrb	r3, [r7, #11]
 8003d4a:	b25a      	sxtb	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				if (rslt == BME680_OK)
 8003d52:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d109      	bne.n	8003d6e <get_calib_data+0x23e>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
 8003d5a:	f107 010b 	add.w	r1, r7, #11
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	2004      	movs	r0, #4
 8003d64:	f7ff fb19 	bl	800339a <bme680_get_regs>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}
		}
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
 8003d6e:	7afb      	ldrb	r3, [r7, #11]
 8003d70:	b25b      	sxtb	r3, r3
 8003d72:	111b      	asrs	r3, r3, #4
 8003d74:	b25a      	sxtb	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	}

	return rslt;
 8003d7c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3738      	adds	r7, #56	; 0x38
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <set_gas_config>:

/*!
 * @brief This internal API is used to set the gas configuration of the sensor.
 */
static int8_t set_gas_config(struct bme680_dev *dev)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 fd4a 	bl	800482a <null_ptr_check>
 8003d96:	4603      	mov	r3, r0
 8003d98:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8003d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d132      	bne.n	8003e08 <set_gas_config+0x80>

		uint8_t reg_addr[2] = {0};
 8003da2:	2300      	movs	r3, #0
 8003da4:	81bb      	strh	r3, [r7, #12]
		uint8_t reg_data[2] = {0};
 8003da6:	2300      	movs	r3, #0
 8003da8:	813b      	strh	r3, [r7, #8]

		if (dev->power_mode == BME680_FORCED_MODE) {
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d119      	bne.n	8003de8 <set_gas_config+0x60>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 8003db4:	235a      	movs	r3, #90	; 0x5a
 8003db6:	733b      	strb	r3, [r7, #12]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f000 faff 	bl	80043c4 <calc_heater_res>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	723b      	strb	r3, [r7, #8]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
 8003dca:	2364      	movs	r3, #100	; 0x64
 8003dcc:	737b      	strb	r3, [r7, #13]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 fb71 	bl	80044bc <calc_heater_dur>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	727b      	strb	r3, [r7, #9]
			dev->gas_sett.nb_conv = 0;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003de6:	e001      	b.n	8003dec <set_gas_config+0x64>
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
 8003de8:	2301      	movs	r3, #1
 8003dea:	73fb      	strb	r3, [r7, #15]
		}
		if (rslt == BME680_OK)
 8003dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d109      	bne.n	8003e08 <set_gas_config+0x80>
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 8003df4:	f107 0108 	add.w	r1, r7, #8
 8003df8:	f107 000c 	add.w	r0, r7, #12
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	f7ff fb0d 	bl	800341e <bme680_set_regs>
 8003e04:	4603      	mov	r3, r0
 8003e06:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8003e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <calc_temperature>:

/*!
 * @brief This internal API is used to calculate the temperature value.
 */
static int16_t calc_temperature(uint32_t temp_adc, struct bme680_dev *dev)
{
 8003e14:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003e18:	b091      	sub	sp, #68	; 0x44
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	61f8      	str	r0, [r7, #28]
 8003e1e:	61b9      	str	r1, [r7, #24]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	10da      	asrs	r2, r3, #3
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	8adb      	ldrh	r3, [r3, #22]
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	17da      	asrs	r2, r3, #31
 8003e2e:	603b      	str	r3, [r7, #0]
 8003e30:	607a      	str	r2, [r7, #4]
 8003e32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e36:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8003e40:	b21b      	sxth	r3, r3
 8003e42:	17da      	asrs	r2, r3, #31
 8003e44:	613b      	str	r3, [r7, #16]
 8003e46:	617a      	str	r2, [r7, #20]
 8003e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003e4e:	460a      	mov	r2, r1
 8003e50:	fb02 f203 	mul.w	r2, r2, r3
 8003e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e56:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003e5a:	4601      	mov	r1, r0
 8003e5c:	fb01 f303 	mul.w	r3, r1, r3
 8003e60:	4413      	add	r3, r2
 8003e62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e64:	6939      	ldr	r1, [r7, #16]
 8003e66:	fba2 4501 	umull	r4, r5, r2, r1
 8003e6a:	442b      	add	r3, r5
 8003e6c:	461d      	mov	r5, r3
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	f04f 0300 	mov.w	r3, #0
 8003e76:	0ae2      	lsrs	r2, r4, #11
 8003e78:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
 8003e7c:	12eb      	asrs	r3, r5, #11
 8003e7e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8003e82:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e86:	f04f 0000 	mov.w	r0, #0
 8003e8a:	f04f 0100 	mov.w	r1, #0
 8003e8e:	0850      	lsrs	r0, r2, #1
 8003e90:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8003e94:	1059      	asrs	r1, r3, #1
 8003e96:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8003e9a:	f04f 0200 	mov.w	r2, #0
 8003e9e:	f04f 0300 	mov.w	r3, #0
 8003ea2:	0862      	lsrs	r2, r4, #1
 8003ea4:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8003ea8:	106b      	asrs	r3, r5, #1
 8003eaa:	fb02 f501 	mul.w	r5, r2, r1
 8003eae:	fb00 f403 	mul.w	r4, r0, r3
 8003eb2:	442c      	add	r4, r5
 8003eb4:	fba0 ab02 	umull	sl, fp, r0, r2
 8003eb8:	eb04 030b 	add.w	r3, r4, fp
 8003ebc:	469b      	mov	fp, r3
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	f04f 0300 	mov.w	r3, #0
 8003ec6:	ea4f 321a 	mov.w	r2, sl, lsr #12
 8003eca:	ea42 520b 	orr.w	r2, r2, fp, lsl #20
 8003ece:	ea4f 332b 	mov.w	r3, fp, asr #12
 8003ed2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8003edc:	011b      	lsls	r3, r3, #4
 8003ede:	17da      	asrs	r2, r3, #31
 8003ee0:	60bb      	str	r3, [r7, #8]
 8003ee2:	60fa      	str	r2, [r7, #12]
 8003ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003eea:	462a      	mov	r2, r5
 8003eec:	fb02 f203 	mul.w	r2, r2, r3
 8003ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef2:	4621      	mov	r1, r4
 8003ef4:	fb01 f303 	mul.w	r3, r1, r3
 8003ef8:	4413      	add	r3, r2
 8003efa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003efc:	4621      	mov	r1, r4
 8003efe:	fba2 8901 	umull	r8, r9, r2, r1
 8003f02:	444b      	add	r3, r9
 8003f04:	4699      	mov	r9, r3
 8003f06:	f04f 0200 	mov.w	r2, #0
 8003f0a:	f04f 0300 	mov.w	r3, #0
 8003f0e:	ea4f 3298 	mov.w	r2, r8, lsr #14
 8003f12:	ea42 4289 	orr.w	r2, r2, r9, lsl #18
 8003f16:	ea4f 33a9 	mov.w	r3, r9, asr #14
 8003f1a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8003f1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f22:	4413      	add	r3, r2
 8003f24:	461a      	mov	r2, r3
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	631a      	str	r2, [r3, #48]	; 0x30
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f2e:	4613      	mov	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	3380      	adds	r3, #128	; 0x80
 8003f36:	121b      	asrs	r3, r3, #8
 8003f38:	84fb      	strh	r3, [r7, #38]	; 0x26

	return calc_temp;
 8003f3a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3744      	adds	r7, #68	; 0x44
 8003f42:	46bd      	mov	sp, r7
 8003f44:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003f48:	4770      	bx	lr

08003f4a <calc_pressure>:

/*!
 * @brief This internal API is used to calculate the pressure value.
 */
static uint32_t calc_pressure(uint32_t pres_adc, const struct bme680_dev *dev)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b087      	sub	sp, #28
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
 8003f52:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t var3;
	int32_t pressure_comp;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f58:	105b      	asrs	r3, r3, #1
 8003f5a:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 8003f5e:	613b      	str	r3, [r7, #16]
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	109b      	asrs	r3, r3, #2
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	1092      	asrs	r2, r2, #2
 8003f68:	fb02 f303 	mul.w	r3, r2, r3
 8003f6c:	12db      	asrs	r3, r3, #11
			(int32_t)dev->calib.par_p6) >> 2;
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	f992 2026 	ldrsb.w	r2, [r2, #38]	; 0x26
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8003f74:	fb02 f303 	mul.w	r3, r2, r3
 8003f78:	109b      	asrs	r3, r3, #2
 8003f7a:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003f82:	461a      	mov	r2, r3
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	fb02 f303 	mul.w	r3, r2, r3
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	4413      	add	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	109a      	asrs	r2, r3, #2
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8003f9c:	041b      	lsls	r3, r3, #16
 8003f9e:	4413      	add	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	109b      	asrs	r3, r3, #2
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	1092      	asrs	r2, r2, #2
 8003faa:	fb02 f303 	mul.w	r3, r2, r3
 8003fae:	135b      	asrs	r3, r3, #13
			((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	f992 2020 	ldrsb.w	r2, [r2, #32]
 8003fb6:	0152      	lsls	r2, r2, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8003fb8:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8003fbc:	10da      	asrs	r2, r3, #3
					(((int32_t)dev->calib.par_p2 * var1) >> 1);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	fb01 f303 	mul.w	r3, r1, r3
 8003fcc:	105b      	asrs	r3, r3, #1
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8003fce:	4413      	add	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]
	var1 = var1 >> 18;
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	149b      	asrs	r3, r3, #18
 8003fd6:	613b      	str	r3, [r7, #16]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	8b92      	ldrh	r2, [r2, #28]
 8003fe2:	fb02 f303 	mul.w	r3, r2, r3
 8003fe6:	13db      	asrs	r3, r3, #15
 8003fe8:	613b      	str	r3, [r7, #16]
	pressure_comp = 1048576 - pres_adc;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8003ff0:	617b      	str	r3, [r7, #20]
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	131b      	asrs	r3, r3, #12
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	f640 4335 	movw	r3, #3125	; 0xc35
 8004000:	fb02 f303 	mul.w	r3, r2, r3
 8004004:	617b      	str	r3, [r7, #20]
	if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800400c:	db06      	blt.n	800401c <calc_pressure+0xd2>
		pressure_comp = ((pressure_comp / var1) << 1);
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	fb92 f3f3 	sdiv	r3, r2, r3
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	617b      	str	r3, [r7, #20]
 800401a:	e005      	b.n	8004028 <calc_pressure+0xde>
	else
		pressure_comp = ((pressure_comp << 1) / var1);
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	005a      	lsls	r2, r3, #1
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	fb92 f3f3 	sdiv	r3, r2, r3
 8004026:	617b      	str	r3, [r7, #20]
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800402e:	4619      	mov	r1, r3
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	10db      	asrs	r3, r3, #3
			(pressure_comp >> 3)) >> 13)) >> 12;
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	10d2      	asrs	r2, r2, #3
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8004038:	fb02 f303 	mul.w	r3, r2, r3
			(pressure_comp >> 3)) >> 13)) >> 12;
 800403c:	135b      	asrs	r3, r3, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 800403e:	fb01 f303 	mul.w	r3, r1, r3
 8004042:	131b      	asrs	r3, r3, #12
 8004044:	613b      	str	r3, [r7, #16]
	var2 = ((int32_t)(pressure_comp >> 2) *
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	109b      	asrs	r3, r3, #2
			(int32_t)dev->calib.par_p8) >> 13;
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	f9b2 2028 	ldrsh.w	r2, [r2, #40]	; 0x28
	var2 = ((int32_t)(pressure_comp >> 2) *
 8004050:	fb02 f303 	mul.w	r3, r2, r3
 8004054:	135b      	asrs	r3, r3, #13
 8004056:	60fb      	str	r3, [r7, #12]
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	121b      	asrs	r3, r3, #8
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	1212      	asrs	r2, r2, #8
 8004060:	fb02 f303 	mul.w	r3, r2, r3
			(int32_t)(pressure_comp >> 8) *
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	1212      	asrs	r2, r2, #8
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8004068:	fb02 f303 	mul.w	r3, r2, r3
			(int32_t)dev->calib.par_p10) >> 17;
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
			(int32_t)(pressure_comp >> 8) *
 8004072:	fb02 f303 	mul.w	r3, r2, r3
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8004076:	145b      	asrs	r3, r3, #17
 8004078:	60bb      	str	r3, [r7, #8]

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	441a      	add	r2, r3
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	441a      	add	r2, r3
			((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	f993 3027 	ldrsb.w	r3, [r3, #39]	; 0x27
 800408a:	01db      	lsls	r3, r3, #7
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 800408c:	4413      	add	r3, r2
			((int32_t)dev->calib.par_p7 << 7)) >> 4);
 800408e:	111b      	asrs	r3, r3, #4
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	4413      	add	r3, r2
 8004094:	617b      	str	r3, [r7, #20]

	return (uint32_t)pressure_comp;
 8004096:	697b      	ldr	r3, [r7, #20]

}
 8004098:	4618      	mov	r0, r3
 800409a:	371c      	adds	r7, #28
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <calc_humidity>:

/*!
 * @brief This internal API is used to calculate the humidity value.
 */
static uint32_t calc_humidity(uint16_t hum_adc, const struct bme680_dev *dev)
{
 80040a4:	b490      	push	{r4, r7}
 80040a6:	b08a      	sub	sp, #40	; 0x28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	4603      	mov	r3, r0
 80040ac:	6039      	str	r1, [r7, #0]
 80040ae:	80fb      	strh	r3, [r7, #6]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040b4:	4613      	mov	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	3380      	adds	r3, #128	; 0x80
 80040bc:	121b      	asrs	r3, r3, #8
 80040be:	623b      	str	r3, [r7, #32]
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 80040c0:	88fa      	ldrh	r2, [r7, #6]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	891b      	ldrh	r3, [r3, #8]
 80040c6:	011b      	lsls	r3, r3, #4
 80040c8:	1ad2      	subs	r2, r2, r3
				- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80040d0:	4619      	mov	r1, r3
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	fb01 f303 	mul.w	r3, r1, r3
 80040d8:	493d      	ldr	r1, [pc, #244]	; (80041d0 <calc_humidity+0x12c>)
 80040da:	fb81 0103 	smull	r0, r1, r1, r3
 80040de:	1149      	asrs	r1, r1, #5
 80040e0:	17db      	asrs	r3, r3, #31
 80040e2:	1acb      	subs	r3, r1, r3
 80040e4:	105b      	asrs	r3, r3, #1
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	61fb      	str	r3, [r7, #28]
	var2 = ((int32_t) dev->calib.par_h2
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	895b      	ldrh	r3, [r3, #10]
 80040ee:	4618      	mov	r0, r3
			* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	f993 300d 	ldrsb.w	r3, [r3, #13]
 80040f6:	461a      	mov	r2, r3
 80040f8:	6a3b      	ldr	r3, [r7, #32]
 80040fa:	fb02 f303 	mul.w	r3, r2, r3
 80040fe:	4a34      	ldr	r2, [pc, #208]	; (80041d0 <calc_humidity+0x12c>)
 8004100:	fb82 1203 	smull	r1, r2, r2, r3
 8004104:	1152      	asrs	r2, r2, #5
 8004106:	17db      	asrs	r3, r3, #31
 8004108:	1ad2      	subs	r2, r2, r3
					+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8004110:	4619      	mov	r1, r3
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	fb01 f303 	mul.w	r3, r1, r3
 8004118:	492d      	ldr	r1, [pc, #180]	; (80041d0 <calc_humidity+0x12c>)
 800411a:	fb81 4103 	smull	r4, r1, r1, r3
 800411e:	1149      	asrs	r1, r1, #5
 8004120:	17db      	asrs	r3, r3, #31
 8004122:	1acb      	subs	r3, r1, r3
 8004124:	6a39      	ldr	r1, [r7, #32]
 8004126:	fb01 f303 	mul.w	r3, r1, r3
 800412a:	119b      	asrs	r3, r3, #6
							/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 800412c:	4928      	ldr	r1, [pc, #160]	; (80041d0 <calc_humidity+0x12c>)
 800412e:	fb81 4103 	smull	r4, r1, r1, r3
 8004132:	1149      	asrs	r1, r1, #5
 8004134:	17db      	asrs	r3, r3, #31
 8004136:	1acb      	subs	r3, r1, r3
					+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8004138:	4413      	add	r3, r2
							/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 800413a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
			* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 800413e:	fb00 f303 	mul.w	r3, r0, r3
	var2 = ((int32_t) dev->calib.par_h2
 8004142:	129b      	asrs	r3, r3, #10
 8004144:	61bb      	str	r3, [r7, #24]
	var3 = var1 * var2;
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	fb02 f303 	mul.w	r3, r2, r3
 800414e:	617b      	str	r3, [r7, #20]
	var4 = (int32_t) dev->calib.par_h6 << 7;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	7bdb      	ldrb	r3, [r3, #15]
 8004154:	01db      	lsls	r3, r3, #7
 8004156:	613b      	str	r3, [r7, #16]
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800415e:	461a      	mov	r2, r3
 8004160:	6a3b      	ldr	r3, [r7, #32]
 8004162:	fb02 f303 	mul.w	r3, r2, r3
 8004166:	4a1a      	ldr	r2, [pc, #104]	; (80041d0 <calc_humidity+0x12c>)
 8004168:	fb82 1203 	smull	r1, r2, r2, r3
 800416c:	1152      	asrs	r2, r2, #5
 800416e:	17db      	asrs	r3, r3, #31
 8004170:	1ad2      	subs	r2, r2, r3
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	4413      	add	r3, r2
 8004176:	111b      	asrs	r3, r3, #4
 8004178:	613b      	str	r3, [r7, #16]
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	139b      	asrs	r3, r3, #14
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	1392      	asrs	r2, r2, #14
 8004182:	fb02 f303 	mul.w	r3, r2, r3
 8004186:	129b      	asrs	r3, r3, #10
 8004188:	60fb      	str	r3, [r7, #12]
	var6 = (var4 * var5) >> 1;
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	fb02 f303 	mul.w	r3, r2, r3
 8004192:	105b      	asrs	r3, r3, #1
 8004194:	60bb      	str	r3, [r7, #8]
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	4413      	add	r3, r2
 800419c:	129b      	asrs	r3, r3, #10
 800419e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041a2:	fb02 f303 	mul.w	r3, r2, r3
 80041a6:	131b      	asrs	r3, r3, #12
 80041a8:	627b      	str	r3, [r7, #36]	; 0x24

	if (calc_hum > 100000) /* Cap at 100%rH */
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	4a09      	ldr	r2, [pc, #36]	; (80041d4 <calc_humidity+0x130>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	dd02      	ble.n	80041b8 <calc_humidity+0x114>
		calc_hum = 100000;
 80041b2:	4b08      	ldr	r3, [pc, #32]	; (80041d4 <calc_humidity+0x130>)
 80041b4:	627b      	str	r3, [r7, #36]	; 0x24
 80041b6:	e004      	b.n	80041c2 <calc_humidity+0x11e>
	else if (calc_hum < 0)
 80041b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	da01      	bge.n	80041c2 <calc_humidity+0x11e>
		calc_hum = 0;
 80041be:	2300      	movs	r3, #0
 80041c0:	627b      	str	r3, [r7, #36]	; 0x24

	return (uint32_t) calc_hum;
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3728      	adds	r7, #40	; 0x28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bc90      	pop	{r4, r7}
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	51eb851f 	.word	0x51eb851f
 80041d4:	000186a0 	.word	0x000186a0

080041d8 <calc_gas_resistance>:

/*!
 * @brief This internal API is used to calculate the Gas Resistance value.
 */
static uint32_t calc_gas_resistance(uint16_t gas_res_adc, uint8_t gas_range, const struct bme680_dev *dev)
{
 80041d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041dc:	b0bc      	sub	sp, #240	; 0xf0
 80041de:	af00      	add	r7, sp, #0
 80041e0:	4603      	mov	r3, r0
 80041e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80041e4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80041e8:	460b      	mov	r3, r1
 80041ea:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;
	/**Look up table 1 for the possible gas range values */
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 80041ee:	4b73      	ldr	r3, [pc, #460]	; (80043bc <calc_gas_resistance+0x1e4>)
 80041f0:	f107 0594 	add.w	r5, r7, #148	; 0x94
 80041f4:	461c      	mov	r4, r3
 80041f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004200:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004202:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004206:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2130303777),
			UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2143188679), UINT32_C(2136746228),
			UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2147483647) };
	/**Look up table 2 for the possible gas range values */
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
 800420a:	4b6d      	ldr	r3, [pc, #436]	; (80043c0 <calc_gas_resistance+0x1e8>)
 800420c:	f107 0554 	add.w	r5, r7, #84	; 0x54
 8004210:	461c      	mov	r4, r3
 8004212:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004214:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004216:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004218:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800421a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800421c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800421e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004222:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			UINT32_C(255744255), UINT32_C(127110228), UINT32_C(64000000), UINT32_C(32258064), UINT32_C(16016016),
			UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
			UINT32_C(250000), UINT32_C(125000) };

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8004226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004228:	f993 3036 	ldrsb.w	r3, [r3, #54]	; 0x36
 800422c:	b25b      	sxtb	r3, r3
 800422e:	17da      	asrs	r2, r3, #31
 8004230:	63bb      	str	r3, [r7, #56]	; 0x38
 8004232:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004234:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8004238:	4622      	mov	r2, r4
 800423a:	462b      	mov	r3, r5
 800423c:	f04f 0000 	mov.w	r0, #0
 8004240:	f04f 0100 	mov.w	r1, #0
 8004244:	0099      	lsls	r1, r3, #2
 8004246:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800424a:	0090      	lsls	r0, r2, #2
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	4621      	mov	r1, r4
 8004252:	1851      	adds	r1, r2, r1
 8004254:	6339      	str	r1, [r7, #48]	; 0x30
 8004256:	4629      	mov	r1, r5
 8004258:	eb43 0101 	adc.w	r1, r3, r1
 800425c:	6379      	str	r1, [r7, #52]	; 0x34
 800425e:	f240 533c 	movw	r3, #1340	; 0x53c
 8004262:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004266:	4602      	mov	r2, r0
 8004268:	18d3      	adds	r3, r2, r3
 800426a:	62bb      	str	r3, [r7, #40]	; 0x28
 800426c:	460b      	mov	r3, r1
 800426e:	f143 0300 	adc.w	r3, r3, #0
 8004272:	62fb      	str	r3, [r7, #44]	; 0x2c
			((int64_t) lookupTable1[gas_range])) >> 16;
 8004274:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	33a8      	adds	r3, #168	; 0xa8
 800427c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004280:	4413      	add	r3, r2
 8004282:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8004286:	2200      	movs	r2, #0
 8004288:	643b      	str	r3, [r7, #64]	; 0x40
 800428a:	647a      	str	r2, [r7, #68]	; 0x44
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 800428c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004290:	460b      	mov	r3, r1
 8004292:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8004296:	4622      	mov	r2, r4
 8004298:	fb02 f203 	mul.w	r2, r2, r3
 800429c:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40
 80042a0:	462b      	mov	r3, r5
 80042a2:	4604      	mov	r4, r0
 80042a4:	460d      	mov	r5, r1
 80042a6:	4621      	mov	r1, r4
 80042a8:	fb01 f303 	mul.w	r3, r1, r3
 80042ac:	4413      	add	r3, r2
 80042ae:	4622      	mov	r2, r4
 80042b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042b2:	fba2 8901 	umull	r8, r9, r2, r1
 80042b6:	444b      	add	r3, r9
 80042b8:	4699      	mov	r9, r3
 80042ba:	f04f 0200 	mov.w	r2, #0
 80042be:	f04f 0300 	mov.w	r3, #0
 80042c2:	ea4f 4218 	mov.w	r2, r8, lsr #16
 80042c6:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 80042ca:	ea4f 4329 	mov.w	r3, r9, asr #16
 80042ce:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 80042d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80042d6:	2200      	movs	r2, #0
 80042d8:	623b      	str	r3, [r7, #32]
 80042da:	627a      	str	r2, [r7, #36]	; 0x24
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	f04f 0300 	mov.w	r3, #0
 80042e4:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80042e8:	4629      	mov	r1, r5
 80042ea:	03cb      	lsls	r3, r1, #15
 80042ec:	4621      	mov	r1, r4
 80042ee:	ea43 4351 	orr.w	r3, r3, r1, lsr #17
 80042f2:	4621      	mov	r1, r4
 80042f4:	03ca      	lsls	r2, r1, #15
 80042f6:	f112 417f 	adds.w	r1, r2, #4278190080	; 0xff000000
 80042fa:	61b9      	str	r1, [r7, #24]
 80042fc:	f143 33ff 	adc.w	r3, r3, #4294967295
 8004300:	61fb      	str	r3, [r7, #28]
 8004302:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8004306:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800430a:	4621      	mov	r1, r4
 800430c:	1889      	adds	r1, r1, r2
 800430e:	6139      	str	r1, [r7, #16]
 8004310:	4629      	mov	r1, r5
 8004312:	eb43 0101 	adc.w	r1, r3, r1
 8004316:	6179      	str	r1, [r7, #20]
 8004318:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800431c:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8004320:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	33a8      	adds	r3, #168	; 0xa8
 8004328:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800432c:	4413      	add	r3, r2
 800432e:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8004332:	2200      	movs	r2, #0
 8004334:	60bb      	str	r3, [r7, #8]
 8004336:	60fa      	str	r2, [r7, #12]
 8004338:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800433c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004340:	462a      	mov	r2, r5
 8004342:	fb02 f203 	mul.w	r2, r2, r3
 8004346:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800434a:	4621      	mov	r1, r4
 800434c:	fb01 f303 	mul.w	r3, r1, r3
 8004350:	4413      	add	r3, r2
 8004352:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8004356:	4621      	mov	r1, r4
 8004358:	fba2 ab01 	umull	sl, fp, r2, r1
 800435c:	445b      	add	r3, fp
 800435e:	469b      	mov	fp, r3
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	f04f 0300 	mov.w	r3, #0
 8004368:	ea4f 225a 	mov.w	r2, sl, lsr #9
 800436c:	ea42 52cb 	orr.w	r2, r2, fp, lsl #23
 8004370:	ea4f 236b 	mov.w	r3, fp, asr #9
 8004374:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8004378:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	f04f 0300 	mov.w	r3, #0
 8004384:	0842      	lsrs	r2, r0, #1
 8004386:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800438a:	104b      	asrs	r3, r1, #1
 800438c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004390:	1814      	adds	r4, r2, r0
 8004392:	603c      	str	r4, [r7, #0]
 8004394:	414b      	adcs	r3, r1
 8004396:	607b      	str	r3, [r7, #4]
 8004398:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800439c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043a0:	f7fc fb5c 	bl	8000a5c <__aeabi_ldivmod>
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	4613      	mov	r3, r2
 80043aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

	return calc_gas_res;
 80043ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	37f0      	adds	r7, #240	; 0xf0
 80043b6:	46bd      	mov	sp, r7
 80043b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043bc:	08005ad4 	.word	0x08005ad4
 80043c0:	08005b14 	.word	0x08005b14

080043c4 <calc_heater_res>:

/*!
 * @brief This internal API is used to calculate the Heat Resistance value.
 */
static uint8_t calc_heater_res(uint16_t temp, const struct bme680_dev *dev)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b08b      	sub	sp, #44	; 0x2c
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	4603      	mov	r3, r0
 80043cc:	6039      	str	r1, [r7, #0]
 80043ce:	80fb      	strh	r3, [r7, #6]
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp > 400) /* Cap temperature */
 80043d0:	88fb      	ldrh	r3, [r7, #6]
 80043d2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80043d6:	d902      	bls.n	80043de <calc_heater_res+0x1a>
		temp = 400;
 80043d8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80043dc:	80fb      	strh	r3, [r7, #6]

	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80043e4:	461a      	mov	r2, r3
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80043ec:	fb02 f303 	mul.w	r3, r2, r3
 80043f0:	4a2f      	ldr	r2, [pc, #188]	; (80044b0 <calc_heater_res+0xec>)
 80043f2:	fb82 1203 	smull	r1, r2, r2, r3
 80043f6:	1192      	asrs	r2, r2, #6
 80043f8:	17db      	asrs	r3, r3, #31
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	021b      	lsls	r3, r3, #8
 80043fe:	627b      	str	r3, [r7, #36]	; 0x24
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8004406:	f503 7244 	add.w	r2, r3, #784	; 0x310
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004410:	f503 3316 	add.w	r3, r3, #153600	; 0x25800
 8004414:	f203 1399 	addw	r3, r3, #409	; 0x199
 8004418:	88f9      	ldrh	r1, [r7, #6]
 800441a:	fb01 f303 	mul.w	r3, r1, r3
 800441e:	4925      	ldr	r1, [pc, #148]	; (80044b4 <calc_heater_res+0xf0>)
 8004420:	fb81 0103 	smull	r0, r1, r1, r3
 8004424:	10c9      	asrs	r1, r1, #3
 8004426:	17db      	asrs	r3, r3, #31
 8004428:	1acb      	subs	r3, r1, r3
 800442a:	f503 1348 	add.w	r3, r3, #3276800	; 0x320000
 800442e:	4921      	ldr	r1, [pc, #132]	; (80044b4 <calc_heater_res+0xf0>)
 8004430:	fb81 0103 	smull	r0, r1, r1, r3
 8004434:	1089      	asrs	r1, r1, #2
 8004436:	17db      	asrs	r3, r3, #31
 8004438:	1acb      	subs	r3, r1, r3
 800443a:	fb02 f303 	mul.w	r3, r2, r3
 800443e:	623b      	str	r3, [r7, #32]
	var3 = var1 + (var2 / 2);
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	0fda      	lsrs	r2, r3, #31
 8004444:	4413      	add	r3, r2
 8004446:	105b      	asrs	r3, r3, #1
 8004448:	461a      	mov	r2, r3
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	4413      	add	r3, r2
 800444e:	61fb      	str	r3, [r7, #28]
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004456:	3304      	adds	r3, #4
 8004458:	69fa      	ldr	r2, [r7, #28]
 800445a:	fb92 f3f3 	sdiv	r3, r2, r3
 800445e:	61bb      	str	r3, [r7, #24]
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	f993 3035 	ldrsb.w	r3, [r3, #53]	; 0x35
 8004466:	461a      	mov	r2, r3
 8004468:	4613      	mov	r3, r2
 800446a:	019b      	lsls	r3, r3, #6
 800446c:	4413      	add	r3, r2
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	4413      	add	r3, r2
 8004472:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8004476:	617b      	str	r3, [r7, #20]
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	fb92 f3f3 	sdiv	r3, r2, r3
 8004480:	f1a3 02fa 	sub.w	r2, r3, #250	; 0xfa
 8004484:	4613      	mov	r3, r2
 8004486:	011b      	lsls	r3, r3, #4
 8004488:	4413      	add	r3, r2
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	613b      	str	r3, [r7, #16]
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	3332      	adds	r3, #50	; 0x32
 8004492:	4a09      	ldr	r2, [pc, #36]	; (80044b8 <calc_heater_res+0xf4>)
 8004494:	fb82 1203 	smull	r1, r2, r2, r3
 8004498:	1152      	asrs	r2, r2, #5
 800449a:	17db      	asrs	r3, r3, #31
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	73fb      	strb	r3, [r7, #15]

	return heatr_res;
 80044a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	372c      	adds	r7, #44	; 0x2c
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	10624dd3 	.word	0x10624dd3
 80044b4:	66666667 	.word	0x66666667
 80044b8:	51eb851f 	.word	0x51eb851f

080044bc <calc_heater_dur>:

/*!
 * @brief This internal API is used to calculate the Heat duration value.
 */
static uint8_t calc_heater_dur(uint16_t dur)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	4603      	mov	r3, r0
 80044c4:	80fb      	strh	r3, [r7, #6]
	uint8_t factor = 0;
 80044c6:	2300      	movs	r3, #0
 80044c8:	73fb      	strb	r3, [r7, #15]
	uint8_t durval;

	if (dur >= 0xfc0) {
 80044ca:	88fb      	ldrh	r3, [r7, #6]
 80044cc:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 80044d0:	d308      	bcc.n	80044e4 <calc_heater_dur+0x28>
		durval = 0xff; /* Max duration*/
 80044d2:	23ff      	movs	r3, #255	; 0xff
 80044d4:	73bb      	strb	r3, [r7, #14]
 80044d6:	e00f      	b.n	80044f8 <calc_heater_dur+0x3c>
	} else {
		while (dur > 0x3F) {
			dur = dur / 4;
 80044d8:	88fb      	ldrh	r3, [r7, #6]
 80044da:	089b      	lsrs	r3, r3, #2
 80044dc:	80fb      	strh	r3, [r7, #6]
			factor += 1;
 80044de:	7bfb      	ldrb	r3, [r7, #15]
 80044e0:	3301      	adds	r3, #1
 80044e2:	73fb      	strb	r3, [r7, #15]
		while (dur > 0x3F) {
 80044e4:	88fb      	ldrh	r3, [r7, #6]
 80044e6:	2b3f      	cmp	r3, #63	; 0x3f
 80044e8:	d8f6      	bhi.n	80044d8 <calc_heater_dur+0x1c>
		}
		durval = (uint8_t) (dur + (factor * 64));
 80044ea:	88fb      	ldrh	r3, [r7, #6]
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	7bfb      	ldrb	r3, [r7, #15]
 80044f0:	019b      	lsls	r3, r3, #6
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	4413      	add	r3, r2
 80044f6:	73bb      	strb	r3, [r7, #14]
	}

	return durval;
 80044f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <read_field_data>:

/*!
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b08a      	sub	sp, #40	; 0x28
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
 800450e:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 8004510:	2300      	movs	r3, #0
 8004512:	60bb      	str	r3, [r7, #8]
 8004514:	f107 030c 	add.w	r3, r7, #12
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]
 800451c:	605a      	str	r2, [r3, #4]
 800451e:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t gas_range;
	uint32_t adc_temp;
	uint32_t adc_pres;
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;
 8004522:	230a      	movs	r3, #10
 8004524:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8004528:	6838      	ldr	r0, [r7, #0]
 800452a:	f000 f97e 	bl	800482a <null_ptr_check>
 800452e:	4603      	mov	r3, r0
 8004530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	do {
		if (rslt == BME680_OK) {
 8004534:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004538:	2b00      	cmp	r3, #0
 800453a:	f040 8087 	bne.w	800464c <read_field_data+0x146>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 800453e:	f107 0108 	add.w	r1, r7, #8
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	220f      	movs	r2, #15
 8004546:	201d      	movs	r0, #29
 8004548:	f7fe ff27 	bl	800339a <bme680_get_regs>
 800454c:	4603      	mov	r3, r0
 800454e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
 8004552:	7a3b      	ldrb	r3, [r7, #8]
 8004554:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004558:	b2da      	uxtb	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	701a      	strb	r2, [r3, #0]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 800455e:	7a3b      	ldrb	r3, [r7, #8]
 8004560:	f003 030f 	and.w	r3, r3, #15
 8004564:	b2da      	uxtb	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	705a      	strb	r2, [r3, #1]
			data->meas_index = buff[1];
 800456a:	7a7a      	ldrb	r2, [r7, #9]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	709a      	strb	r2, [r3, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 8004570:	7abb      	ldrb	r3, [r7, #10]
 8004572:	031a      	lsls	r2, r3, #12
 8004574:	7afb      	ldrb	r3, [r7, #11]
 8004576:	011b      	lsls	r3, r3, #4
 8004578:	4313      	orrs	r3, r2
					| ((uint32_t) buff[4] / 16));
 800457a:	7b3a      	ldrb	r2, [r7, #12]
 800457c:	0912      	lsrs	r2, r2, #4
 800457e:	b2d2      	uxtb	r2, r2
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 8004580:	4313      	orrs	r3, r2
 8004582:	623b      	str	r3, [r7, #32]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8004584:	7b7b      	ldrb	r3, [r7, #13]
 8004586:	031a      	lsls	r2, r3, #12
 8004588:	7bbb      	ldrb	r3, [r7, #14]
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	4313      	orrs	r3, r2
					| ((uint32_t) buff[7] / 16));
 800458e:	7bfa      	ldrb	r2, [r7, #15]
 8004590:	0912      	lsrs	r2, r2, #4
 8004592:	b2d2      	uxtb	r2, r2
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8004594:	4313      	orrs	r3, r2
 8004596:	61fb      	str	r3, [r7, #28]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8004598:	7c3b      	ldrb	r3, [r7, #16]
 800459a:	b29b      	uxth	r3, r3
 800459c:	021b      	lsls	r3, r3, #8
 800459e:	b29a      	uxth	r2, r3
 80045a0:	7c7b      	ldrb	r3, [r7, #17]
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	4313      	orrs	r3, r2
 80045a6:	837b      	strh	r3, [r7, #26]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80045a8:	7d7b      	ldrb	r3, [r7, #21]
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	7dbb      	ldrb	r3, [r7, #22]
 80045b2:	099b      	lsrs	r3, r3, #6
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	4313      	orrs	r3, r2
 80045ba:	833b      	strh	r3, [r7, #24]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;
 80045bc:	7dbb      	ldrb	r3, [r7, #22]
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	75fb      	strb	r3, [r7, #23]

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	b25a      	sxtb	r2, r3
 80045ca:	7dbb      	ldrb	r3, [r7, #22]
 80045cc:	b25b      	sxtb	r3, r3
 80045ce:	f003 0320 	and.w	r3, r3, #32
 80045d2:	b25b      	sxtb	r3, r3
 80045d4:	4313      	orrs	r3, r2
 80045d6:	b25b      	sxtb	r3, r3
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	701a      	strb	r2, [r3, #0]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	b25a      	sxtb	r2, r3
 80045e4:	7dbb      	ldrb	r3, [r7, #22]
 80045e6:	b25b      	sxtb	r3, r3
 80045e8:	f003 0310 	and.w	r3, r3, #16
 80045ec:	b25b      	sxtb	r3, r3
 80045ee:	4313      	orrs	r3, r2
 80045f0:	b25b      	sxtb	r3, r3
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	701a      	strb	r2, [r3, #0]

			if (data->status & BME680_NEW_DATA_MSK) {
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	b25b      	sxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	da20      	bge.n	8004644 <read_field_data+0x13e>
				data->temperature = calc_temperature(adc_temp, dev);
 8004602:	6839      	ldr	r1, [r7, #0]
 8004604:	69f8      	ldr	r0, [r7, #28]
 8004606:	f7ff fc05 	bl	8003e14 <calc_temperature>
 800460a:	4603      	mov	r3, r0
 800460c:	461a      	mov	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	809a      	strh	r2, [r3, #4]
				data->pressure = calc_pressure(adc_pres, dev);
 8004612:	6839      	ldr	r1, [r7, #0]
 8004614:	6a38      	ldr	r0, [r7, #32]
 8004616:	f7ff fc98 	bl	8003f4a <calc_pressure>
 800461a:	4602      	mov	r2, r0
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	609a      	str	r2, [r3, #8]
				data->humidity = calc_humidity(adc_hum, dev);
 8004620:	8b7b      	ldrh	r3, [r7, #26]
 8004622:	6839      	ldr	r1, [r7, #0]
 8004624:	4618      	mov	r0, r3
 8004626:	f7ff fd3d 	bl	80040a4 <calc_humidity>
 800462a:	4602      	mov	r2, r0
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	60da      	str	r2, [r3, #12]
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 8004630:	7df9      	ldrb	r1, [r7, #23]
 8004632:	8b3b      	ldrh	r3, [r7, #24]
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	4618      	mov	r0, r3
 8004638:	f7ff fdce 	bl	80041d8 <calc_gas_resistance>
 800463c:	4602      	mov	r2, r0
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	611a      	str	r2, [r3, #16]
				break;
 8004642:	e00d      	b.n	8004660 <read_field_data+0x15a>
			}
			/* Delay to poll the data */
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004648:	200a      	movs	r0, #10
 800464a:	4798      	blx	r3
		}
		tries--;
 800464c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004650:	3b01      	subs	r3, #1
 8004652:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	} while (tries);
 8004656:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800465a:	2b00      	cmp	r3, #0
 800465c:	f47f af6a 	bne.w	8004534 <read_field_data+0x2e>

	if (!tries)
 8004660:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004664:	2b00      	cmp	r3, #0
 8004666:	d102      	bne.n	800466e <read_field_data+0x168>
		rslt = BME680_W_NO_NEW_DATA;
 8004668:	2302      	movs	r3, #2
 800466a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return rslt;
 800466e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004672:	4618      	mov	r0, r3
 8004674:	3728      	adds	r7, #40	; 0x28
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 800467a:	b590      	push	{r4, r7, lr}
 800467c:	b087      	sub	sp, #28
 800467e:	af02      	add	r7, sp, #8
 8004680:	4603      	mov	r3, r0
 8004682:	6039      	str	r1, [r7, #0]
 8004684:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 8004686:	6838      	ldr	r0, [r7, #0]
 8004688:	f000 f8cf 	bl	800482a <null_ptr_check>
 800468c:	4603      	mov	r3, r0
 800468e:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8004690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d155      	bne.n	8004744 <set_mem_page+0xca>
		if (reg_addr > 0x7f)
 8004698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800469c:	2b00      	cmp	r3, #0
 800469e:	da02      	bge.n	80046a6 <set_mem_page+0x2c>
			mem_page = BME680_MEM_PAGE1;
 80046a0:	2300      	movs	r3, #0
 80046a2:	73bb      	strb	r3, [r7, #14]
 80046a4:	e001      	b.n	80046aa <set_mem_page+0x30>
		else
			mem_page = BME680_MEM_PAGE0;
 80046a6:	2310      	movs	r3, #16
 80046a8:	73bb      	strb	r3, [r7, #14]

		if (mem_page != dev->mem_page) {
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	78db      	ldrb	r3, [r3, #3]
 80046ae:	7bba      	ldrb	r2, [r7, #14]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d047      	beq.n	8004744 <set_mem_page+0xca>
			dev->mem_page = mem_page;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	7bba      	ldrb	r2, [r7, #14]
 80046b8:	70da      	strb	r2, [r3, #3]

			dev->com_rslt = dev->read(dev->handle,dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	7859      	ldrb	r1, [r3, #1]
 80046c6:	f107 030d 	add.w	r3, r7, #13
 80046ca:	2201      	movs	r2, #1
 80046cc:	9200      	str	r2, [sp, #0]
 80046ce:	22f3      	movs	r2, #243	; 0xf3
 80046d0:	47a0      	blx	r4
 80046d2:	4603      	mov	r3, r0
 80046d4:	461a      	mov	r2, r3
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (dev->com_rslt != 0)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <set_mem_page+0x70>
				rslt = BME680_E_COM_FAIL;
 80046e6:	23fe      	movs	r3, #254	; 0xfe
 80046e8:	73fb      	strb	r3, [r7, #15]

			if (rslt == BME680_OK) {
 80046ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d128      	bne.n	8004744 <set_mem_page+0xca>
				reg = reg & (~BME680_MEM_PAGE_MSK);
 80046f2:	7b7b      	ldrb	r3, [r7, #13]
 80046f4:	f023 0310 	bic.w	r3, r3, #16
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	737b      	strb	r3, [r7, #13]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	78db      	ldrb	r3, [r3, #3]
 8004700:	b25b      	sxtb	r3, r3
 8004702:	f003 0310 	and.w	r3, r3, #16
 8004706:	b25a      	sxtb	r2, r3
 8004708:	7b7b      	ldrb	r3, [r7, #13]
 800470a:	b25b      	sxtb	r3, r3
 800470c:	4313      	orrs	r3, r2
 800470e:	b25b      	sxtb	r3, r3
 8004710:	b2db      	uxtb	r3, r3
 8004712:	737b      	strb	r3, [r7, #13]

				dev->com_rslt = dev->write(dev->handle,dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	7859      	ldrb	r1, [r3, #1]
 8004720:	f107 030d 	add.w	r3, r7, #13
 8004724:	2201      	movs	r2, #1
 8004726:	9200      	str	r2, [sp, #0]
 8004728:	2273      	movs	r2, #115	; 0x73
 800472a:	47a0      	blx	r4
 800472c:	4603      	mov	r3, r0
 800472e:	461a      	mov	r2, r3
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
						&reg, 1);
				if (dev->com_rslt != 0)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <set_mem_page+0xca>
					rslt = BME680_E_COM_FAIL;
 8004740:	23fe      	movs	r3, #254	; 0xfe
 8004742:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return rslt;
 8004744:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004748:	4618      	mov	r0, r3
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	bd90      	pop	{r4, r7, pc}

08004750 <get_mem_page>:

/*!
 * @brief This internal API is used to get the memory page based on register address.
 */
static int8_t get_mem_page(struct bme680_dev *dev)
{
 8004750:	b590      	push	{r4, r7, lr}
 8004752:	b087      	sub	sp, #28
 8004754:	af02      	add	r7, sp, #8
 8004756:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f866 	bl	800482a <null_ptr_check>
 800475e:	4603      	mov	r3, r0
 8004760:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8004762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d11e      	bne.n	80047a8 <get_mem_page+0x58>
		dev->com_rslt = dev->read(dev->handle,dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	7859      	ldrb	r1, [r3, #1]
 8004776:	f107 030e 	add.w	r3, r7, #14
 800477a:	2201      	movs	r2, #1
 800477c:	9200      	str	r2, [sp, #0]
 800477e:	22f3      	movs	r2, #243	; 0xf3
 8004780:	47a0      	blx	r4
 8004782:	4603      	mov	r3, r0
 8004784:	461a      	mov	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		if (dev->com_rslt != 0)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 8004792:	2b00      	cmp	r3, #0
 8004794:	d002      	beq.n	800479c <get_mem_page+0x4c>
			rslt = BME680_E_COM_FAIL;
 8004796:	23fe      	movs	r3, #254	; 0xfe
 8004798:	73fb      	strb	r3, [r7, #15]
 800479a:	e005      	b.n	80047a8 <get_mem_page+0x58>
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
 800479c:	7bbb      	ldrb	r3, [r7, #14]
 800479e:	f003 0310 	and.w	r3, r3, #16
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	70da      	strb	r2, [r3, #3]
	}

	return rslt;
 80047a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd90      	pop	{r4, r7, pc}

080047b4 <boundary_check>:
/*!
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	607b      	str	r3, [r7, #4]
 80047be:	460b      	mov	r3, r1
 80047c0:	72fb      	strb	r3, [r7, #11]
 80047c2:	4613      	mov	r3, r2
 80047c4:	72bb      	strb	r3, [r7, #10]
	int8_t rslt = BME680_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	75fb      	strb	r3, [r7, #23]

	if (value != NULL) {
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d022      	beq.n	8004816 <boundary_check+0x62>
		/* Check if value is below minimum value */
		if (*value < min) {
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	7afa      	ldrb	r2, [r7, #11]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d90b      	bls.n	80047f2 <boundary_check+0x3e>
			/* Auto correct the invalid value to minimum value */
			*value = min;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	7afa      	ldrb	r2, [r7, #11]
 80047de:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MIN_CORRECTION;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80047e6:	f043 0301 	orr.w	r3, r3, #1
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		}
		/* Check if value is above maximum value */
		if (*value > max) {
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	7aba      	ldrb	r2, [r7, #10]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d20e      	bcs.n	800481a <boundary_check+0x66>
			/* Auto correct the invalid value to maximum value */
			*value = max;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	7aba      	ldrb	r2, [r7, #10]
 8004800:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004808:	f043 0302 	orr.w	r3, r3, #2
 800480c:	b2da      	uxtb	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004814:	e001      	b.n	800481a <boundary_check+0x66>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
 8004816:	23ff      	movs	r3, #255	; 0xff
 8004818:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800481a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800481e:	4618      	mov	r0, r3
 8004820:	371c      	adds	r7, #28
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
 800482a:	b480      	push	{r7}
 800482c:	b085      	sub	sp, #20
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00b      	beq.n	8004850 <null_ptr_check+0x26>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800483c:	2b00      	cmp	r3, #0
 800483e:	d007      	beq.n	8004850 <null_ptr_check+0x26>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004844:	2b00      	cmp	r3, #0
 8004846:	d003      	beq.n	8004850 <null_ptr_check+0x26>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800484c:	2b00      	cmp	r3, #0
 800484e:	d102      	bne.n	8004856 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 8004850:	23ff      	movs	r3, #255	; 0xff
 8004852:	73fb      	strb	r3, [r7, #15]
 8004854:	e001      	b.n	800485a <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME680_OK;
 8004856:	2300      	movs	r3, #0
 8004858:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800485a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
	...

0800486c <init_bme680>:

#include "sig_sensors.h"

extern I2C_HandleTypeDef hi2c1;

void init_bme680(st_bme680_t *bme){
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
	int8_t rslt = BME680_OK;
 8004874:	2300      	movs	r3, #0
 8004876:	73fb      	strb	r3, [r7, #15]
	uint8_t set_required_settings;


	/*  Inicialização */
	bme->gas_sensor.dev_id = BME680_I2C_ADDR_PRIMARY;  // SDO Grounded -> 0x76 left aligned
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2276      	movs	r2, #118	; 0x76
 800487c:	705a      	strb	r2, [r3, #1]
	bme->gas_sensor.intf = BME680_I2C_INTF;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	709a      	strb	r2, [r3, #2]
	bme->gas_sensor.handle = (I2C_HandleTypeDef *) &hi2c1;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a2f      	ldr	r2, [pc, #188]	; (8004944 <init_bme680+0xd8>)
 8004888:	659a      	str	r2, [r3, #88]	; 0x58
	bme->gas_sensor.read = user_i2c_read;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a2e      	ldr	r2, [pc, #184]	; (8004948 <init_bme680+0xdc>)
 800488e:	649a      	str	r2, [r3, #72]	; 0x48
	bme->gas_sensor.write = user_i2c_write;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a2e      	ldr	r2, [pc, #184]	; (800494c <init_bme680+0xe0>)
 8004894:	64da      	str	r2, [r3, #76]	; 0x4c
	bme->gas_sensor.delay_ms = user_delay_ms;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a2d      	ldr	r2, [pc, #180]	; (8004950 <init_bme680+0xe4>)
 800489a:	651a      	str	r2, [r3, #80]	; 0x50
	/* amb_temp can be set to 25 prior to configuring the gas sensor
	 * or by performing a few temperature readings without operating the gas sensor-> */
	bme->gas_sensor.amb_temp = 25;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2219      	movs	r2, #25
 80048a0:	711a      	strb	r2, [r3, #4]

	rslt = bme680_init( &bme->gas_sensor );
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7fe fd44 	bl	8003332 <bme680_init>
 80048aa:	4603      	mov	r3, r0
 80048ac:	73fb      	strb	r3, [r7, #15]
	if(rslt!=BME680_OK)
 80048ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d005      	beq.n	80048c2 <init_bme680+0x56>
		printf("Erro ao inicializar BME = %d\r\n", rslt);
 80048b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048ba:	4619      	mov	r1, r3
 80048bc:	4825      	ldr	r0, [pc, #148]	; (8004954 <init_bme680+0xe8>)
 80048be:	f000 fa83 	bl	8004dc8 <iprintf>


	/*  Configuração */
	/* Set the temperature, pressure and humidity settings */
	bme->gas_sensor.tph_sett.os_hum = BME680_OS_2X;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2202      	movs	r2, #2
 80048c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	bme->gas_sensor.tph_sett.os_pres = BME680_OS_4X;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2203      	movs	r2, #3
 80048ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	bme->gas_sensor.tph_sett.os_temp = BME680_OS_8X;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2204      	movs	r2, #4
 80048d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	bme->gas_sensor.tph_sett.filter = BME680_FILTER_SIZE_3;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2202      	movs	r2, #2
 80048de:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

	/* Set the remaining gas sensor settings and link the heating profile */
	bme->gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	/* Create a ramp heat waveform in 3 steps */
	bme->gas_sensor.gas_sett.heatr_temp = 320; /* degree Celsius */
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80048f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	bme->gas_sensor.gas_sett.heatr_dur = 150; /* milliseconds */
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2296      	movs	r2, #150	; 0x96
 80048f8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	/* Select the power mode */
	/* Must be set before writing the sensor configuration */
	bme->gas_sensor.power_mode = BME680_FORCED_MODE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	/* Set the required sensor settings needed */
	set_required_settings = BME680_OST_SEL | BME680_OSP_SEL | BME680_OSH_SEL | BME680_FILTER_SEL
 8004904:	23df      	movs	r3, #223	; 0xdf
 8004906:	73bb      	strb	r3, [r7, #14]
			| BME680_GAS_SENSOR_SEL;

	/* Set the desired sensor configuration */
	rslt = bme680_set_sensor_settings(set_required_settings, &bme->gas_sensor);
 8004908:	7bbb      	ldrb	r3, [r7, #14]
 800490a:	b29b      	uxth	r3, r3
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	4611      	mov	r1, r2
 8004910:	4618      	mov	r0, r3
 8004912:	f7fe fe52 	bl	80035ba <bme680_set_sensor_settings>
 8004916:	4603      	mov	r3, r0
 8004918:	73fb      	strb	r3, [r7, #15]

	/* Set the power mode */
	rslt = bme680_set_sensor_mode(&bme->gas_sensor);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff f814 	bl	800394a <bme680_set_sensor_mode>
 8004922:	4603      	mov	r3, r0
 8004924:	73fb      	strb	r3, [r7, #15]

	bme680_get_profile_dur(&bme->meas_period, &bme->gas_sensor);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	336c      	adds	r3, #108	; 0x6c
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	4611      	mov	r1, r2
 800492e:	4618      	mov	r0, r3
 8004930:	f7ff f870 	bl	8003a14 <bme680_get_profile_dur>

	bme_GetGasReference(bme);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f80f 	bl	8004958 <bme_GetGasReference>

}
 800493a:	bf00      	nop
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	20000084 	.word	0x20000084
 8004948:	080032a3 	.word	0x080032a3
 800494c:	080032eb 	.word	0x080032eb
 8004950:	0800328d 	.word	0x0800328d
 8004954:	08005b54 	.word	0x08005b54

08004958 <bme_GetGasReference>:

void bme_GetGasReference(st_bme680_t *bme){
 8004958:	b580      	push	{r7, lr}
 800495a:	b088      	sub	sp, #32
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
	uint8_t readings = 1;
 8004960:	2301      	movs	r3, #1
 8004962:	77fb      	strb	r3, [r7, #31]
	struct bme680_field_data data;

	while( readings <= 10 ){
 8004964:	e021      	b.n	80049aa <bme_GetGasReference+0x52>
		bme680_get_sensor_data(&data, &bme->gas_sensor);
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	f107 0308 	add.w	r3, r7, #8
 800496c:	4611      	mov	r1, r2
 800496e:	4618      	mov	r0, r3
 8004970:	f7ff f8b2 	bl	8003ad8 <bme680_get_sensor_data>
		if(data.status & BME680_GASM_VALID_MSK){
 8004974:	7a3b      	ldrb	r3, [r7, #8]
 8004976:	f003 0320 	and.w	r3, r3, #32
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00f      	beq.n	800499e <bme_GetGasReference+0x46>
			bme->gas_reference += data.gas_resistance;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	ee07 3a90 	vmov	s15, r3
 800498a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800498e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
			readings++;
 8004998:	7ffb      	ldrb	r3, [r7, #31]
 800499a:	3301      	adds	r3, #1
 800499c:	77fb      	strb	r3, [r7, #31]
		}
		user_delay_ms(bme->meas_period);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fe fc71 	bl	800328c <user_delay_ms>
	while( readings <= 10 ){
 80049aa:	7ffb      	ldrb	r3, [r7, #31]
 80049ac:	2b0a      	cmp	r3, #10
 80049ae:	d9da      	bls.n	8004966 <bme_GetGasReference+0xe>
	}
	bme->gas_reference = bme->gas_reference / readings;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 80049b6:	7ffb      	ldrb	r3, [r7, #31]
 80049b8:	ee07 3a90 	vmov	s15, r3
 80049bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
}
 80049ca:	bf00      	nop
 80049cc:	3720      	adds	r7, #32
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
	...

080049d4 <bme_GetGasScore>:

int16_t bme_GetGasScore(st_bme680_t *bme){
 80049d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80049d8:	b084      	sub	sp, #16
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
	int16_t gas_score = 0;
 80049de:	2300      	movs	r3, #0
 80049e0:	81fb      	strh	r3, [r7, #14]

	//Calculate gas contribution to IAQ index
	gas_score = (0.75 / (bme->gas_upper_limit - bme->gas_lower_limit) * bme->gas_reference - (bme->gas_lower_limit * (0.75 / (bme->gas_upper_limit - bme->gas_lower_limit)))) * 100.00;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7fb fd8f 	bl	8000514 <__aeabi_i2d>
 80049f6:	4602      	mov	r2, r0
 80049f8:	460b      	mov	r3, r1
 80049fa:	f04f 0000 	mov.w	r0, #0
 80049fe:	492f      	ldr	r1, [pc, #188]	; (8004abc <bme_GetGasScore+0xe8>)
 8004a00:	f7fb ff1c 	bl	800083c <__aeabi_ddiv>
 8004a04:	4602      	mov	r2, r0
 8004a06:	460b      	mov	r3, r1
 8004a08:	4614      	mov	r4, r2
 8004a0a:	461d      	mov	r5, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7fb fd91 	bl	8000538 <__aeabi_f2d>
 8004a16:	4602      	mov	r2, r0
 8004a18:	460b      	mov	r3, r1
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	4629      	mov	r1, r5
 8004a1e:	f7fb fde3 	bl	80005e8 <__aeabi_dmul>
 8004a22:	4602      	mov	r2, r0
 8004a24:	460b      	mov	r3, r1
 8004a26:	4690      	mov	r8, r2
 8004a28:	4699      	mov	r9, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7fb fd6f 	bl	8000514 <__aeabi_i2d>
 8004a36:	4604      	mov	r4, r0
 8004a38:	460d      	mov	r5, r1
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7fb fd63 	bl	8000514 <__aeabi_i2d>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	460b      	mov	r3, r1
 8004a52:	f04f 0000 	mov.w	r0, #0
 8004a56:	4919      	ldr	r1, [pc, #100]	; (8004abc <bme_GetGasScore+0xe8>)
 8004a58:	f7fb fef0 	bl	800083c <__aeabi_ddiv>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	4620      	mov	r0, r4
 8004a62:	4629      	mov	r1, r5
 8004a64:	f7fb fdc0 	bl	80005e8 <__aeabi_dmul>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	4640      	mov	r0, r8
 8004a6e:	4649      	mov	r1, r9
 8004a70:	f7fb fc02 	bl	8000278 <__aeabi_dsub>
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	4610      	mov	r0, r2
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	4b0f      	ldr	r3, [pc, #60]	; (8004ac0 <bme_GetGasScore+0xec>)
 8004a82:	f7fb fdb1 	bl	80005e8 <__aeabi_dmul>
 8004a86:	4602      	mov	r2, r0
 8004a88:	460b      	mov	r3, r1
 8004a8a:	4610      	mov	r0, r2
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	f7fb ffbd 	bl	8000a0c <__aeabi_d2iz>
 8004a92:	4603      	mov	r3, r0
 8004a94:	81fb      	strh	r3, [r7, #14]
	if (gas_score > 75) gas_score = 75; // Sometimes gas readings can go outside of expected scale maximum
 8004a96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a9a:	2b4b      	cmp	r3, #75	; 0x4b
 8004a9c:	dd01      	ble.n	8004aa2 <bme_GetGasScore+0xce>
 8004a9e:	234b      	movs	r3, #75	; 0x4b
 8004aa0:	81fb      	strh	r3, [r7, #14]
	if (gas_score <  0) gas_score = 0;  // Sometimes gas readings can go outside of expected scale minimum
 8004aa2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	da01      	bge.n	8004aae <bme_GetGasScore+0xda>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	81fb      	strh	r3, [r7, #14]

	return gas_score;
 8004aae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004abc:	3fe80000 	.word	0x3fe80000
 8004ac0:	40590000 	.word	0x40590000
 8004ac4:	00000000 	.word	0x00000000

08004ac8 <bme_GetHumidityScore>:

int16_t bme_GetHumidityScore(st_bme680_t *bme){
 8004ac8:	b5b0      	push	{r4, r5, r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
	int16_t humidity_score = 0;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	81fb      	strh	r3, [r7, #14]

	if (bme->humidity >= 38 && bme->humidity <= 42) // Humidity +/-5% around optimum
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004ada:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8004c00 <bme_GetHumidityScore+0x138>
 8004ade:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ae6:	db0c      	blt.n	8004b02 <bme_GetHumidityScore+0x3a>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004aee:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8004c04 <bme_GetHumidityScore+0x13c>
 8004af2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004afa:	d802      	bhi.n	8004b02 <bme_GetHumidityScore+0x3a>
		humidity_score = 0.25 * 100;
 8004afc:	2319      	movs	r3, #25
 8004afe:	81fb      	strh	r3, [r7, #14]
 8004b00:	e072      	b.n	8004be8 <bme_GetHumidityScore+0x120>
	else
	{ // Humidity is sub-optimal
		if (bme->humidity < 38)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004b08:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8004c00 <bme_GetHumidityScore+0x138>
 8004b0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b14:	d52d      	bpl.n	8004b72 <bme_GetHumidityScore+0xaa>
			humidity_score = 0.25 / bme->hum_reference * bme->humidity * 100;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7fb fd0b 	bl	8000538 <__aeabi_f2d>
 8004b22:	4602      	mov	r2, r0
 8004b24:	460b      	mov	r3, r1
 8004b26:	f04f 0000 	mov.w	r0, #0
 8004b2a:	4937      	ldr	r1, [pc, #220]	; (8004c08 <bme_GetHumidityScore+0x140>)
 8004b2c:	f7fb fe86 	bl	800083c <__aeabi_ddiv>
 8004b30:	4602      	mov	r2, r0
 8004b32:	460b      	mov	r3, r1
 8004b34:	4614      	mov	r4, r2
 8004b36:	461d      	mov	r5, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7fb fcfb 	bl	8000538 <__aeabi_f2d>
 8004b42:	4602      	mov	r2, r0
 8004b44:	460b      	mov	r3, r1
 8004b46:	4620      	mov	r0, r4
 8004b48:	4629      	mov	r1, r5
 8004b4a:	f7fb fd4d 	bl	80005e8 <__aeabi_dmul>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	460b      	mov	r3, r1
 8004b52:	4610      	mov	r0, r2
 8004b54:	4619      	mov	r1, r3
 8004b56:	f04f 0200 	mov.w	r2, #0
 8004b5a:	4b2c      	ldr	r3, [pc, #176]	; (8004c0c <bme_GetHumidityScore+0x144>)
 8004b5c:	f7fb fd44 	bl	80005e8 <__aeabi_dmul>
 8004b60:	4602      	mov	r2, r0
 8004b62:	460b      	mov	r3, r1
 8004b64:	4610      	mov	r0, r2
 8004b66:	4619      	mov	r1, r3
 8004b68:	f7fb ff50 	bl	8000a0c <__aeabi_d2iz>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	81fb      	strh	r3, [r7, #14]
 8004b70:	e03a      	b.n	8004be8 <bme_GetHumidityScore+0x120>
		else
		{
			humidity_score = ((-0.25 / (100 - bme->hum_reference) * bme->humidity) + 0.416666) * 100;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8004b78:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8004c10 <bme_GetHumidityScore+0x148>
 8004b7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b80:	ee17 0a90 	vmov	r0, s15
 8004b84:	f7fb fcd8 	bl	8000538 <__aeabi_f2d>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	f04f 0000 	mov.w	r0, #0
 8004b90:	4920      	ldr	r1, [pc, #128]	; (8004c14 <bme_GetHumidityScore+0x14c>)
 8004b92:	f7fb fe53 	bl	800083c <__aeabi_ddiv>
 8004b96:	4602      	mov	r2, r0
 8004b98:	460b      	mov	r3, r1
 8004b9a:	4614      	mov	r4, r2
 8004b9c:	461d      	mov	r5, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7fb fcc8 	bl	8000538 <__aeabi_f2d>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	460b      	mov	r3, r1
 8004bac:	4620      	mov	r0, r4
 8004bae:	4629      	mov	r1, r5
 8004bb0:	f7fb fd1a 	bl	80005e8 <__aeabi_dmul>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	4610      	mov	r0, r2
 8004bba:	4619      	mov	r1, r3
 8004bbc:	a30e      	add	r3, pc, #56	; (adr r3, 8004bf8 <bme_GetHumidityScore+0x130>)
 8004bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc2:	f7fb fb5b 	bl	800027c <__adddf3>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	460b      	mov	r3, r1
 8004bca:	4610      	mov	r0, r2
 8004bcc:	4619      	mov	r1, r3
 8004bce:	f04f 0200 	mov.w	r2, #0
 8004bd2:	4b0e      	ldr	r3, [pc, #56]	; (8004c0c <bme_GetHumidityScore+0x144>)
 8004bd4:	f7fb fd08 	bl	80005e8 <__aeabi_dmul>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4610      	mov	r0, r2
 8004bde:	4619      	mov	r1, r3
 8004be0:	f7fb ff14 	bl	8000a0c <__aeabi_d2iz>
 8004be4:	4603      	mov	r3, r0
 8004be6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return humidity_score;
 8004be8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bdb0      	pop	{r4, r5, r7, pc}
 8004bf4:	f3af 8000 	nop.w
 8004bf8:	ded6ba8c 	.word	0xded6ba8c
 8004bfc:	3fdaaaa7 	.word	0x3fdaaaa7
 8004c00:	42180000 	.word	0x42180000
 8004c04:	42280000 	.word	0x42280000
 8004c08:	3fd00000 	.word	0x3fd00000
 8004c0c:	40590000 	.word	0x40590000
 8004c10:	42c80000 	.word	0x42c80000
 8004c14:	bfd00000 	.word	0xbfd00000

08004c18 <bme_calculateIAQ>:

void bme_calculateIAQ(int16_t score){
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	4603      	mov	r3, r0
 8004c20:	80fb      	strh	r3, [r7, #6]
	score = (100 - score) * 5;
 8004c22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c26:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	0092      	lsls	r2, r2, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	80fb      	strh	r3, [r7, #6]
//		printf("Unhealthy for Sensitive Groups\r\n");
//	else if (score >=  51 && score <= 150 )
//		printf("Moderate\r\n");
//	else if (score >=  00 && score <=  50 )
//		printf("Good\r\n");
}
 8004c36:	bf00      	nop
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
	...

08004c44 <std>:
 8004c44:	2300      	movs	r3, #0
 8004c46:	b510      	push	{r4, lr}
 8004c48:	4604      	mov	r4, r0
 8004c4a:	e9c0 3300 	strd	r3, r3, [r0]
 8004c4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c52:	6083      	str	r3, [r0, #8]
 8004c54:	8181      	strh	r1, [r0, #12]
 8004c56:	6643      	str	r3, [r0, #100]	; 0x64
 8004c58:	81c2      	strh	r2, [r0, #14]
 8004c5a:	6183      	str	r3, [r0, #24]
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	2208      	movs	r2, #8
 8004c60:	305c      	adds	r0, #92	; 0x5c
 8004c62:	f000 f906 	bl	8004e72 <memset>
 8004c66:	4b0d      	ldr	r3, [pc, #52]	; (8004c9c <std+0x58>)
 8004c68:	6263      	str	r3, [r4, #36]	; 0x24
 8004c6a:	4b0d      	ldr	r3, [pc, #52]	; (8004ca0 <std+0x5c>)
 8004c6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c6e:	4b0d      	ldr	r3, [pc, #52]	; (8004ca4 <std+0x60>)
 8004c70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c72:	4b0d      	ldr	r3, [pc, #52]	; (8004ca8 <std+0x64>)
 8004c74:	6323      	str	r3, [r4, #48]	; 0x30
 8004c76:	4b0d      	ldr	r3, [pc, #52]	; (8004cac <std+0x68>)
 8004c78:	6224      	str	r4, [r4, #32]
 8004c7a:	429c      	cmp	r4, r3
 8004c7c:	d006      	beq.n	8004c8c <std+0x48>
 8004c7e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004c82:	4294      	cmp	r4, r2
 8004c84:	d002      	beq.n	8004c8c <std+0x48>
 8004c86:	33d0      	adds	r3, #208	; 0xd0
 8004c88:	429c      	cmp	r4, r3
 8004c8a:	d105      	bne.n	8004c98 <std+0x54>
 8004c8c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c94:	f000 b966 	b.w	8004f64 <__retarget_lock_init_recursive>
 8004c98:	bd10      	pop	{r4, pc}
 8004c9a:	bf00      	nop
 8004c9c:	08004ded 	.word	0x08004ded
 8004ca0:	08004e0f 	.word	0x08004e0f
 8004ca4:	08004e47 	.word	0x08004e47
 8004ca8:	08004e6b 	.word	0x08004e6b
 8004cac:	2000016c 	.word	0x2000016c

08004cb0 <stdio_exit_handler>:
 8004cb0:	4a02      	ldr	r2, [pc, #8]	; (8004cbc <stdio_exit_handler+0xc>)
 8004cb2:	4903      	ldr	r1, [pc, #12]	; (8004cc0 <stdio_exit_handler+0x10>)
 8004cb4:	4803      	ldr	r0, [pc, #12]	; (8004cc4 <stdio_exit_handler+0x14>)
 8004cb6:	f000 b869 	b.w	8004d8c <_fwalk_sglue>
 8004cba:	bf00      	nop
 8004cbc:	2000000c 	.word	0x2000000c
 8004cc0:	08005811 	.word	0x08005811
 8004cc4:	20000018 	.word	0x20000018

08004cc8 <cleanup_stdio>:
 8004cc8:	6841      	ldr	r1, [r0, #4]
 8004cca:	4b0c      	ldr	r3, [pc, #48]	; (8004cfc <cleanup_stdio+0x34>)
 8004ccc:	4299      	cmp	r1, r3
 8004cce:	b510      	push	{r4, lr}
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	d001      	beq.n	8004cd8 <cleanup_stdio+0x10>
 8004cd4:	f000 fd9c 	bl	8005810 <_fflush_r>
 8004cd8:	68a1      	ldr	r1, [r4, #8]
 8004cda:	4b09      	ldr	r3, [pc, #36]	; (8004d00 <cleanup_stdio+0x38>)
 8004cdc:	4299      	cmp	r1, r3
 8004cde:	d002      	beq.n	8004ce6 <cleanup_stdio+0x1e>
 8004ce0:	4620      	mov	r0, r4
 8004ce2:	f000 fd95 	bl	8005810 <_fflush_r>
 8004ce6:	68e1      	ldr	r1, [r4, #12]
 8004ce8:	4b06      	ldr	r3, [pc, #24]	; (8004d04 <cleanup_stdio+0x3c>)
 8004cea:	4299      	cmp	r1, r3
 8004cec:	d004      	beq.n	8004cf8 <cleanup_stdio+0x30>
 8004cee:	4620      	mov	r0, r4
 8004cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cf4:	f000 bd8c 	b.w	8005810 <_fflush_r>
 8004cf8:	bd10      	pop	{r4, pc}
 8004cfa:	bf00      	nop
 8004cfc:	2000016c 	.word	0x2000016c
 8004d00:	200001d4 	.word	0x200001d4
 8004d04:	2000023c 	.word	0x2000023c

08004d08 <global_stdio_init.part.0>:
 8004d08:	b510      	push	{r4, lr}
 8004d0a:	4b0b      	ldr	r3, [pc, #44]	; (8004d38 <global_stdio_init.part.0+0x30>)
 8004d0c:	4c0b      	ldr	r4, [pc, #44]	; (8004d3c <global_stdio_init.part.0+0x34>)
 8004d0e:	4a0c      	ldr	r2, [pc, #48]	; (8004d40 <global_stdio_init.part.0+0x38>)
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	4620      	mov	r0, r4
 8004d14:	2200      	movs	r2, #0
 8004d16:	2104      	movs	r1, #4
 8004d18:	f7ff ff94 	bl	8004c44 <std>
 8004d1c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004d20:	2201      	movs	r2, #1
 8004d22:	2109      	movs	r1, #9
 8004d24:	f7ff ff8e 	bl	8004c44 <std>
 8004d28:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d32:	2112      	movs	r1, #18
 8004d34:	f7ff bf86 	b.w	8004c44 <std>
 8004d38:	200002a4 	.word	0x200002a4
 8004d3c:	2000016c 	.word	0x2000016c
 8004d40:	08004cb1 	.word	0x08004cb1

08004d44 <__sfp_lock_acquire>:
 8004d44:	4801      	ldr	r0, [pc, #4]	; (8004d4c <__sfp_lock_acquire+0x8>)
 8004d46:	f000 b90e 	b.w	8004f66 <__retarget_lock_acquire_recursive>
 8004d4a:	bf00      	nop
 8004d4c:	200002ad 	.word	0x200002ad

08004d50 <__sfp_lock_release>:
 8004d50:	4801      	ldr	r0, [pc, #4]	; (8004d58 <__sfp_lock_release+0x8>)
 8004d52:	f000 b909 	b.w	8004f68 <__retarget_lock_release_recursive>
 8004d56:	bf00      	nop
 8004d58:	200002ad 	.word	0x200002ad

08004d5c <__sinit>:
 8004d5c:	b510      	push	{r4, lr}
 8004d5e:	4604      	mov	r4, r0
 8004d60:	f7ff fff0 	bl	8004d44 <__sfp_lock_acquire>
 8004d64:	6a23      	ldr	r3, [r4, #32]
 8004d66:	b11b      	cbz	r3, 8004d70 <__sinit+0x14>
 8004d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d6c:	f7ff bff0 	b.w	8004d50 <__sfp_lock_release>
 8004d70:	4b04      	ldr	r3, [pc, #16]	; (8004d84 <__sinit+0x28>)
 8004d72:	6223      	str	r3, [r4, #32]
 8004d74:	4b04      	ldr	r3, [pc, #16]	; (8004d88 <__sinit+0x2c>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1f5      	bne.n	8004d68 <__sinit+0xc>
 8004d7c:	f7ff ffc4 	bl	8004d08 <global_stdio_init.part.0>
 8004d80:	e7f2      	b.n	8004d68 <__sinit+0xc>
 8004d82:	bf00      	nop
 8004d84:	08004cc9 	.word	0x08004cc9
 8004d88:	200002a4 	.word	0x200002a4

08004d8c <_fwalk_sglue>:
 8004d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d90:	4607      	mov	r7, r0
 8004d92:	4688      	mov	r8, r1
 8004d94:	4614      	mov	r4, r2
 8004d96:	2600      	movs	r6, #0
 8004d98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d9c:	f1b9 0901 	subs.w	r9, r9, #1
 8004da0:	d505      	bpl.n	8004dae <_fwalk_sglue+0x22>
 8004da2:	6824      	ldr	r4, [r4, #0]
 8004da4:	2c00      	cmp	r4, #0
 8004da6:	d1f7      	bne.n	8004d98 <_fwalk_sglue+0xc>
 8004da8:	4630      	mov	r0, r6
 8004daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dae:	89ab      	ldrh	r3, [r5, #12]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d907      	bls.n	8004dc4 <_fwalk_sglue+0x38>
 8004db4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004db8:	3301      	adds	r3, #1
 8004dba:	d003      	beq.n	8004dc4 <_fwalk_sglue+0x38>
 8004dbc:	4629      	mov	r1, r5
 8004dbe:	4638      	mov	r0, r7
 8004dc0:	47c0      	blx	r8
 8004dc2:	4306      	orrs	r6, r0
 8004dc4:	3568      	adds	r5, #104	; 0x68
 8004dc6:	e7e9      	b.n	8004d9c <_fwalk_sglue+0x10>

08004dc8 <iprintf>:
 8004dc8:	b40f      	push	{r0, r1, r2, r3}
 8004dca:	b507      	push	{r0, r1, r2, lr}
 8004dcc:	4906      	ldr	r1, [pc, #24]	; (8004de8 <iprintf+0x20>)
 8004dce:	ab04      	add	r3, sp, #16
 8004dd0:	6808      	ldr	r0, [r1, #0]
 8004dd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dd6:	6881      	ldr	r1, [r0, #8]
 8004dd8:	9301      	str	r3, [sp, #4]
 8004dda:	f000 f9e9 	bl	80051b0 <_vfiprintf_r>
 8004dde:	b003      	add	sp, #12
 8004de0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004de4:	b004      	add	sp, #16
 8004de6:	4770      	bx	lr
 8004de8:	20000064 	.word	0x20000064

08004dec <__sread>:
 8004dec:	b510      	push	{r4, lr}
 8004dee:	460c      	mov	r4, r1
 8004df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004df4:	f000 f868 	bl	8004ec8 <_read_r>
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	bfab      	itete	ge
 8004dfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004dfe:	89a3      	ldrhlt	r3, [r4, #12]
 8004e00:	181b      	addge	r3, r3, r0
 8004e02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e06:	bfac      	ite	ge
 8004e08:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e0a:	81a3      	strhlt	r3, [r4, #12]
 8004e0c:	bd10      	pop	{r4, pc}

08004e0e <__swrite>:
 8004e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e12:	461f      	mov	r7, r3
 8004e14:	898b      	ldrh	r3, [r1, #12]
 8004e16:	05db      	lsls	r3, r3, #23
 8004e18:	4605      	mov	r5, r0
 8004e1a:	460c      	mov	r4, r1
 8004e1c:	4616      	mov	r6, r2
 8004e1e:	d505      	bpl.n	8004e2c <__swrite+0x1e>
 8004e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e24:	2302      	movs	r3, #2
 8004e26:	2200      	movs	r2, #0
 8004e28:	f000 f83c 	bl	8004ea4 <_lseek_r>
 8004e2c:	89a3      	ldrh	r3, [r4, #12]
 8004e2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e36:	81a3      	strh	r3, [r4, #12]
 8004e38:	4632      	mov	r2, r6
 8004e3a:	463b      	mov	r3, r7
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e42:	f000 b853 	b.w	8004eec <_write_r>

08004e46 <__sseek>:
 8004e46:	b510      	push	{r4, lr}
 8004e48:	460c      	mov	r4, r1
 8004e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e4e:	f000 f829 	bl	8004ea4 <_lseek_r>
 8004e52:	1c43      	adds	r3, r0, #1
 8004e54:	89a3      	ldrh	r3, [r4, #12]
 8004e56:	bf15      	itete	ne
 8004e58:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e62:	81a3      	strheq	r3, [r4, #12]
 8004e64:	bf18      	it	ne
 8004e66:	81a3      	strhne	r3, [r4, #12]
 8004e68:	bd10      	pop	{r4, pc}

08004e6a <__sclose>:
 8004e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e6e:	f000 b809 	b.w	8004e84 <_close_r>

08004e72 <memset>:
 8004e72:	4402      	add	r2, r0
 8004e74:	4603      	mov	r3, r0
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d100      	bne.n	8004e7c <memset+0xa>
 8004e7a:	4770      	bx	lr
 8004e7c:	f803 1b01 	strb.w	r1, [r3], #1
 8004e80:	e7f9      	b.n	8004e76 <memset+0x4>
	...

08004e84 <_close_r>:
 8004e84:	b538      	push	{r3, r4, r5, lr}
 8004e86:	4d06      	ldr	r5, [pc, #24]	; (8004ea0 <_close_r+0x1c>)
 8004e88:	2300      	movs	r3, #0
 8004e8a:	4604      	mov	r4, r0
 8004e8c:	4608      	mov	r0, r1
 8004e8e:	602b      	str	r3, [r5, #0]
 8004e90:	f7fc fa1f 	bl	80012d2 <_close>
 8004e94:	1c43      	adds	r3, r0, #1
 8004e96:	d102      	bne.n	8004e9e <_close_r+0x1a>
 8004e98:	682b      	ldr	r3, [r5, #0]
 8004e9a:	b103      	cbz	r3, 8004e9e <_close_r+0x1a>
 8004e9c:	6023      	str	r3, [r4, #0]
 8004e9e:	bd38      	pop	{r3, r4, r5, pc}
 8004ea0:	200002a8 	.word	0x200002a8

08004ea4 <_lseek_r>:
 8004ea4:	b538      	push	{r3, r4, r5, lr}
 8004ea6:	4d07      	ldr	r5, [pc, #28]	; (8004ec4 <_lseek_r+0x20>)
 8004ea8:	4604      	mov	r4, r0
 8004eaa:	4608      	mov	r0, r1
 8004eac:	4611      	mov	r1, r2
 8004eae:	2200      	movs	r2, #0
 8004eb0:	602a      	str	r2, [r5, #0]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	f7fc fa34 	bl	8001320 <_lseek>
 8004eb8:	1c43      	adds	r3, r0, #1
 8004eba:	d102      	bne.n	8004ec2 <_lseek_r+0x1e>
 8004ebc:	682b      	ldr	r3, [r5, #0]
 8004ebe:	b103      	cbz	r3, 8004ec2 <_lseek_r+0x1e>
 8004ec0:	6023      	str	r3, [r4, #0]
 8004ec2:	bd38      	pop	{r3, r4, r5, pc}
 8004ec4:	200002a8 	.word	0x200002a8

08004ec8 <_read_r>:
 8004ec8:	b538      	push	{r3, r4, r5, lr}
 8004eca:	4d07      	ldr	r5, [pc, #28]	; (8004ee8 <_read_r+0x20>)
 8004ecc:	4604      	mov	r4, r0
 8004ece:	4608      	mov	r0, r1
 8004ed0:	4611      	mov	r1, r2
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	602a      	str	r2, [r5, #0]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	f7fc f9c2 	bl	8001260 <_read>
 8004edc:	1c43      	adds	r3, r0, #1
 8004ede:	d102      	bne.n	8004ee6 <_read_r+0x1e>
 8004ee0:	682b      	ldr	r3, [r5, #0]
 8004ee2:	b103      	cbz	r3, 8004ee6 <_read_r+0x1e>
 8004ee4:	6023      	str	r3, [r4, #0]
 8004ee6:	bd38      	pop	{r3, r4, r5, pc}
 8004ee8:	200002a8 	.word	0x200002a8

08004eec <_write_r>:
 8004eec:	b538      	push	{r3, r4, r5, lr}
 8004eee:	4d07      	ldr	r5, [pc, #28]	; (8004f0c <_write_r+0x20>)
 8004ef0:	4604      	mov	r4, r0
 8004ef2:	4608      	mov	r0, r1
 8004ef4:	4611      	mov	r1, r2
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	602a      	str	r2, [r5, #0]
 8004efa:	461a      	mov	r2, r3
 8004efc:	f7fc f9cd 	bl	800129a <_write>
 8004f00:	1c43      	adds	r3, r0, #1
 8004f02:	d102      	bne.n	8004f0a <_write_r+0x1e>
 8004f04:	682b      	ldr	r3, [r5, #0]
 8004f06:	b103      	cbz	r3, 8004f0a <_write_r+0x1e>
 8004f08:	6023      	str	r3, [r4, #0]
 8004f0a:	bd38      	pop	{r3, r4, r5, pc}
 8004f0c:	200002a8 	.word	0x200002a8

08004f10 <__errno>:
 8004f10:	4b01      	ldr	r3, [pc, #4]	; (8004f18 <__errno+0x8>)
 8004f12:	6818      	ldr	r0, [r3, #0]
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	20000064 	.word	0x20000064

08004f1c <__libc_init_array>:
 8004f1c:	b570      	push	{r4, r5, r6, lr}
 8004f1e:	4d0d      	ldr	r5, [pc, #52]	; (8004f54 <__libc_init_array+0x38>)
 8004f20:	4c0d      	ldr	r4, [pc, #52]	; (8004f58 <__libc_init_array+0x3c>)
 8004f22:	1b64      	subs	r4, r4, r5
 8004f24:	10a4      	asrs	r4, r4, #2
 8004f26:	2600      	movs	r6, #0
 8004f28:	42a6      	cmp	r6, r4
 8004f2a:	d109      	bne.n	8004f40 <__libc_init_array+0x24>
 8004f2c:	4d0b      	ldr	r5, [pc, #44]	; (8004f5c <__libc_init_array+0x40>)
 8004f2e:	4c0c      	ldr	r4, [pc, #48]	; (8004f60 <__libc_init_array+0x44>)
 8004f30:	f000 fdc0 	bl	8005ab4 <_init>
 8004f34:	1b64      	subs	r4, r4, r5
 8004f36:	10a4      	asrs	r4, r4, #2
 8004f38:	2600      	movs	r6, #0
 8004f3a:	42a6      	cmp	r6, r4
 8004f3c:	d105      	bne.n	8004f4a <__libc_init_array+0x2e>
 8004f3e:	bd70      	pop	{r4, r5, r6, pc}
 8004f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f44:	4798      	blx	r3
 8004f46:	3601      	adds	r6, #1
 8004f48:	e7ee      	b.n	8004f28 <__libc_init_array+0xc>
 8004f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f4e:	4798      	blx	r3
 8004f50:	3601      	adds	r6, #1
 8004f52:	e7f2      	b.n	8004f3a <__libc_init_array+0x1e>
 8004f54:	08005bc8 	.word	0x08005bc8
 8004f58:	08005bc8 	.word	0x08005bc8
 8004f5c:	08005bc8 	.word	0x08005bc8
 8004f60:	08005bcc 	.word	0x08005bcc

08004f64 <__retarget_lock_init_recursive>:
 8004f64:	4770      	bx	lr

08004f66 <__retarget_lock_acquire_recursive>:
 8004f66:	4770      	bx	lr

08004f68 <__retarget_lock_release_recursive>:
 8004f68:	4770      	bx	lr
	...

08004f6c <_free_r>:
 8004f6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f6e:	2900      	cmp	r1, #0
 8004f70:	d044      	beq.n	8004ffc <_free_r+0x90>
 8004f72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f76:	9001      	str	r0, [sp, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f1a1 0404 	sub.w	r4, r1, #4
 8004f7e:	bfb8      	it	lt
 8004f80:	18e4      	addlt	r4, r4, r3
 8004f82:	f000 f8df 	bl	8005144 <__malloc_lock>
 8004f86:	4a1e      	ldr	r2, [pc, #120]	; (8005000 <_free_r+0x94>)
 8004f88:	9801      	ldr	r0, [sp, #4]
 8004f8a:	6813      	ldr	r3, [r2, #0]
 8004f8c:	b933      	cbnz	r3, 8004f9c <_free_r+0x30>
 8004f8e:	6063      	str	r3, [r4, #4]
 8004f90:	6014      	str	r4, [r2, #0]
 8004f92:	b003      	add	sp, #12
 8004f94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f98:	f000 b8da 	b.w	8005150 <__malloc_unlock>
 8004f9c:	42a3      	cmp	r3, r4
 8004f9e:	d908      	bls.n	8004fb2 <_free_r+0x46>
 8004fa0:	6825      	ldr	r5, [r4, #0]
 8004fa2:	1961      	adds	r1, r4, r5
 8004fa4:	428b      	cmp	r3, r1
 8004fa6:	bf01      	itttt	eq
 8004fa8:	6819      	ldreq	r1, [r3, #0]
 8004faa:	685b      	ldreq	r3, [r3, #4]
 8004fac:	1949      	addeq	r1, r1, r5
 8004fae:	6021      	streq	r1, [r4, #0]
 8004fb0:	e7ed      	b.n	8004f8e <_free_r+0x22>
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	b10b      	cbz	r3, 8004fbc <_free_r+0x50>
 8004fb8:	42a3      	cmp	r3, r4
 8004fba:	d9fa      	bls.n	8004fb2 <_free_r+0x46>
 8004fbc:	6811      	ldr	r1, [r2, #0]
 8004fbe:	1855      	adds	r5, r2, r1
 8004fc0:	42a5      	cmp	r5, r4
 8004fc2:	d10b      	bne.n	8004fdc <_free_r+0x70>
 8004fc4:	6824      	ldr	r4, [r4, #0]
 8004fc6:	4421      	add	r1, r4
 8004fc8:	1854      	adds	r4, r2, r1
 8004fca:	42a3      	cmp	r3, r4
 8004fcc:	6011      	str	r1, [r2, #0]
 8004fce:	d1e0      	bne.n	8004f92 <_free_r+0x26>
 8004fd0:	681c      	ldr	r4, [r3, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	6053      	str	r3, [r2, #4]
 8004fd6:	440c      	add	r4, r1
 8004fd8:	6014      	str	r4, [r2, #0]
 8004fda:	e7da      	b.n	8004f92 <_free_r+0x26>
 8004fdc:	d902      	bls.n	8004fe4 <_free_r+0x78>
 8004fde:	230c      	movs	r3, #12
 8004fe0:	6003      	str	r3, [r0, #0]
 8004fe2:	e7d6      	b.n	8004f92 <_free_r+0x26>
 8004fe4:	6825      	ldr	r5, [r4, #0]
 8004fe6:	1961      	adds	r1, r4, r5
 8004fe8:	428b      	cmp	r3, r1
 8004fea:	bf04      	itt	eq
 8004fec:	6819      	ldreq	r1, [r3, #0]
 8004fee:	685b      	ldreq	r3, [r3, #4]
 8004ff0:	6063      	str	r3, [r4, #4]
 8004ff2:	bf04      	itt	eq
 8004ff4:	1949      	addeq	r1, r1, r5
 8004ff6:	6021      	streq	r1, [r4, #0]
 8004ff8:	6054      	str	r4, [r2, #4]
 8004ffa:	e7ca      	b.n	8004f92 <_free_r+0x26>
 8004ffc:	b003      	add	sp, #12
 8004ffe:	bd30      	pop	{r4, r5, pc}
 8005000:	200002b0 	.word	0x200002b0

08005004 <sbrk_aligned>:
 8005004:	b570      	push	{r4, r5, r6, lr}
 8005006:	4e0e      	ldr	r6, [pc, #56]	; (8005040 <sbrk_aligned+0x3c>)
 8005008:	460c      	mov	r4, r1
 800500a:	6831      	ldr	r1, [r6, #0]
 800500c:	4605      	mov	r5, r0
 800500e:	b911      	cbnz	r1, 8005016 <sbrk_aligned+0x12>
 8005010:	f000 fcbc 	bl	800598c <_sbrk_r>
 8005014:	6030      	str	r0, [r6, #0]
 8005016:	4621      	mov	r1, r4
 8005018:	4628      	mov	r0, r5
 800501a:	f000 fcb7 	bl	800598c <_sbrk_r>
 800501e:	1c43      	adds	r3, r0, #1
 8005020:	d00a      	beq.n	8005038 <sbrk_aligned+0x34>
 8005022:	1cc4      	adds	r4, r0, #3
 8005024:	f024 0403 	bic.w	r4, r4, #3
 8005028:	42a0      	cmp	r0, r4
 800502a:	d007      	beq.n	800503c <sbrk_aligned+0x38>
 800502c:	1a21      	subs	r1, r4, r0
 800502e:	4628      	mov	r0, r5
 8005030:	f000 fcac 	bl	800598c <_sbrk_r>
 8005034:	3001      	adds	r0, #1
 8005036:	d101      	bne.n	800503c <sbrk_aligned+0x38>
 8005038:	f04f 34ff 	mov.w	r4, #4294967295
 800503c:	4620      	mov	r0, r4
 800503e:	bd70      	pop	{r4, r5, r6, pc}
 8005040:	200002b4 	.word	0x200002b4

08005044 <_malloc_r>:
 8005044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005048:	1ccd      	adds	r5, r1, #3
 800504a:	f025 0503 	bic.w	r5, r5, #3
 800504e:	3508      	adds	r5, #8
 8005050:	2d0c      	cmp	r5, #12
 8005052:	bf38      	it	cc
 8005054:	250c      	movcc	r5, #12
 8005056:	2d00      	cmp	r5, #0
 8005058:	4607      	mov	r7, r0
 800505a:	db01      	blt.n	8005060 <_malloc_r+0x1c>
 800505c:	42a9      	cmp	r1, r5
 800505e:	d905      	bls.n	800506c <_malloc_r+0x28>
 8005060:	230c      	movs	r3, #12
 8005062:	603b      	str	r3, [r7, #0]
 8005064:	2600      	movs	r6, #0
 8005066:	4630      	mov	r0, r6
 8005068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800506c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005140 <_malloc_r+0xfc>
 8005070:	f000 f868 	bl	8005144 <__malloc_lock>
 8005074:	f8d8 3000 	ldr.w	r3, [r8]
 8005078:	461c      	mov	r4, r3
 800507a:	bb5c      	cbnz	r4, 80050d4 <_malloc_r+0x90>
 800507c:	4629      	mov	r1, r5
 800507e:	4638      	mov	r0, r7
 8005080:	f7ff ffc0 	bl	8005004 <sbrk_aligned>
 8005084:	1c43      	adds	r3, r0, #1
 8005086:	4604      	mov	r4, r0
 8005088:	d155      	bne.n	8005136 <_malloc_r+0xf2>
 800508a:	f8d8 4000 	ldr.w	r4, [r8]
 800508e:	4626      	mov	r6, r4
 8005090:	2e00      	cmp	r6, #0
 8005092:	d145      	bne.n	8005120 <_malloc_r+0xdc>
 8005094:	2c00      	cmp	r4, #0
 8005096:	d048      	beq.n	800512a <_malloc_r+0xe6>
 8005098:	6823      	ldr	r3, [r4, #0]
 800509a:	4631      	mov	r1, r6
 800509c:	4638      	mov	r0, r7
 800509e:	eb04 0903 	add.w	r9, r4, r3
 80050a2:	f000 fc73 	bl	800598c <_sbrk_r>
 80050a6:	4581      	cmp	r9, r0
 80050a8:	d13f      	bne.n	800512a <_malloc_r+0xe6>
 80050aa:	6821      	ldr	r1, [r4, #0]
 80050ac:	1a6d      	subs	r5, r5, r1
 80050ae:	4629      	mov	r1, r5
 80050b0:	4638      	mov	r0, r7
 80050b2:	f7ff ffa7 	bl	8005004 <sbrk_aligned>
 80050b6:	3001      	adds	r0, #1
 80050b8:	d037      	beq.n	800512a <_malloc_r+0xe6>
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	442b      	add	r3, r5
 80050be:	6023      	str	r3, [r4, #0]
 80050c0:	f8d8 3000 	ldr.w	r3, [r8]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d038      	beq.n	800513a <_malloc_r+0xf6>
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	42a2      	cmp	r2, r4
 80050cc:	d12b      	bne.n	8005126 <_malloc_r+0xe2>
 80050ce:	2200      	movs	r2, #0
 80050d0:	605a      	str	r2, [r3, #4]
 80050d2:	e00f      	b.n	80050f4 <_malloc_r+0xb0>
 80050d4:	6822      	ldr	r2, [r4, #0]
 80050d6:	1b52      	subs	r2, r2, r5
 80050d8:	d41f      	bmi.n	800511a <_malloc_r+0xd6>
 80050da:	2a0b      	cmp	r2, #11
 80050dc:	d917      	bls.n	800510e <_malloc_r+0xca>
 80050de:	1961      	adds	r1, r4, r5
 80050e0:	42a3      	cmp	r3, r4
 80050e2:	6025      	str	r5, [r4, #0]
 80050e4:	bf18      	it	ne
 80050e6:	6059      	strne	r1, [r3, #4]
 80050e8:	6863      	ldr	r3, [r4, #4]
 80050ea:	bf08      	it	eq
 80050ec:	f8c8 1000 	streq.w	r1, [r8]
 80050f0:	5162      	str	r2, [r4, r5]
 80050f2:	604b      	str	r3, [r1, #4]
 80050f4:	4638      	mov	r0, r7
 80050f6:	f104 060b 	add.w	r6, r4, #11
 80050fa:	f000 f829 	bl	8005150 <__malloc_unlock>
 80050fe:	f026 0607 	bic.w	r6, r6, #7
 8005102:	1d23      	adds	r3, r4, #4
 8005104:	1af2      	subs	r2, r6, r3
 8005106:	d0ae      	beq.n	8005066 <_malloc_r+0x22>
 8005108:	1b9b      	subs	r3, r3, r6
 800510a:	50a3      	str	r3, [r4, r2]
 800510c:	e7ab      	b.n	8005066 <_malloc_r+0x22>
 800510e:	42a3      	cmp	r3, r4
 8005110:	6862      	ldr	r2, [r4, #4]
 8005112:	d1dd      	bne.n	80050d0 <_malloc_r+0x8c>
 8005114:	f8c8 2000 	str.w	r2, [r8]
 8005118:	e7ec      	b.n	80050f4 <_malloc_r+0xb0>
 800511a:	4623      	mov	r3, r4
 800511c:	6864      	ldr	r4, [r4, #4]
 800511e:	e7ac      	b.n	800507a <_malloc_r+0x36>
 8005120:	4634      	mov	r4, r6
 8005122:	6876      	ldr	r6, [r6, #4]
 8005124:	e7b4      	b.n	8005090 <_malloc_r+0x4c>
 8005126:	4613      	mov	r3, r2
 8005128:	e7cc      	b.n	80050c4 <_malloc_r+0x80>
 800512a:	230c      	movs	r3, #12
 800512c:	603b      	str	r3, [r7, #0]
 800512e:	4638      	mov	r0, r7
 8005130:	f000 f80e 	bl	8005150 <__malloc_unlock>
 8005134:	e797      	b.n	8005066 <_malloc_r+0x22>
 8005136:	6025      	str	r5, [r4, #0]
 8005138:	e7dc      	b.n	80050f4 <_malloc_r+0xb0>
 800513a:	605b      	str	r3, [r3, #4]
 800513c:	deff      	udf	#255	; 0xff
 800513e:	bf00      	nop
 8005140:	200002b0 	.word	0x200002b0

08005144 <__malloc_lock>:
 8005144:	4801      	ldr	r0, [pc, #4]	; (800514c <__malloc_lock+0x8>)
 8005146:	f7ff bf0e 	b.w	8004f66 <__retarget_lock_acquire_recursive>
 800514a:	bf00      	nop
 800514c:	200002ac 	.word	0x200002ac

08005150 <__malloc_unlock>:
 8005150:	4801      	ldr	r0, [pc, #4]	; (8005158 <__malloc_unlock+0x8>)
 8005152:	f7ff bf09 	b.w	8004f68 <__retarget_lock_release_recursive>
 8005156:	bf00      	nop
 8005158:	200002ac 	.word	0x200002ac

0800515c <__sfputc_r>:
 800515c:	6893      	ldr	r3, [r2, #8]
 800515e:	3b01      	subs	r3, #1
 8005160:	2b00      	cmp	r3, #0
 8005162:	b410      	push	{r4}
 8005164:	6093      	str	r3, [r2, #8]
 8005166:	da08      	bge.n	800517a <__sfputc_r+0x1e>
 8005168:	6994      	ldr	r4, [r2, #24]
 800516a:	42a3      	cmp	r3, r4
 800516c:	db01      	blt.n	8005172 <__sfputc_r+0x16>
 800516e:	290a      	cmp	r1, #10
 8005170:	d103      	bne.n	800517a <__sfputc_r+0x1e>
 8005172:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005176:	f000 bb73 	b.w	8005860 <__swbuf_r>
 800517a:	6813      	ldr	r3, [r2, #0]
 800517c:	1c58      	adds	r0, r3, #1
 800517e:	6010      	str	r0, [r2, #0]
 8005180:	7019      	strb	r1, [r3, #0]
 8005182:	4608      	mov	r0, r1
 8005184:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005188:	4770      	bx	lr

0800518a <__sfputs_r>:
 800518a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518c:	4606      	mov	r6, r0
 800518e:	460f      	mov	r7, r1
 8005190:	4614      	mov	r4, r2
 8005192:	18d5      	adds	r5, r2, r3
 8005194:	42ac      	cmp	r4, r5
 8005196:	d101      	bne.n	800519c <__sfputs_r+0x12>
 8005198:	2000      	movs	r0, #0
 800519a:	e007      	b.n	80051ac <__sfputs_r+0x22>
 800519c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051a0:	463a      	mov	r2, r7
 80051a2:	4630      	mov	r0, r6
 80051a4:	f7ff ffda 	bl	800515c <__sfputc_r>
 80051a8:	1c43      	adds	r3, r0, #1
 80051aa:	d1f3      	bne.n	8005194 <__sfputs_r+0xa>
 80051ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080051b0 <_vfiprintf_r>:
 80051b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b4:	460d      	mov	r5, r1
 80051b6:	b09d      	sub	sp, #116	; 0x74
 80051b8:	4614      	mov	r4, r2
 80051ba:	4698      	mov	r8, r3
 80051bc:	4606      	mov	r6, r0
 80051be:	b118      	cbz	r0, 80051c8 <_vfiprintf_r+0x18>
 80051c0:	6a03      	ldr	r3, [r0, #32]
 80051c2:	b90b      	cbnz	r3, 80051c8 <_vfiprintf_r+0x18>
 80051c4:	f7ff fdca 	bl	8004d5c <__sinit>
 80051c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051ca:	07d9      	lsls	r1, r3, #31
 80051cc:	d405      	bmi.n	80051da <_vfiprintf_r+0x2a>
 80051ce:	89ab      	ldrh	r3, [r5, #12]
 80051d0:	059a      	lsls	r2, r3, #22
 80051d2:	d402      	bmi.n	80051da <_vfiprintf_r+0x2a>
 80051d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051d6:	f7ff fec6 	bl	8004f66 <__retarget_lock_acquire_recursive>
 80051da:	89ab      	ldrh	r3, [r5, #12]
 80051dc:	071b      	lsls	r3, r3, #28
 80051de:	d501      	bpl.n	80051e4 <_vfiprintf_r+0x34>
 80051e0:	692b      	ldr	r3, [r5, #16]
 80051e2:	b99b      	cbnz	r3, 800520c <_vfiprintf_r+0x5c>
 80051e4:	4629      	mov	r1, r5
 80051e6:	4630      	mov	r0, r6
 80051e8:	f000 fb78 	bl	80058dc <__swsetup_r>
 80051ec:	b170      	cbz	r0, 800520c <_vfiprintf_r+0x5c>
 80051ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051f0:	07dc      	lsls	r4, r3, #31
 80051f2:	d504      	bpl.n	80051fe <_vfiprintf_r+0x4e>
 80051f4:	f04f 30ff 	mov.w	r0, #4294967295
 80051f8:	b01d      	add	sp, #116	; 0x74
 80051fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051fe:	89ab      	ldrh	r3, [r5, #12]
 8005200:	0598      	lsls	r0, r3, #22
 8005202:	d4f7      	bmi.n	80051f4 <_vfiprintf_r+0x44>
 8005204:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005206:	f7ff feaf 	bl	8004f68 <__retarget_lock_release_recursive>
 800520a:	e7f3      	b.n	80051f4 <_vfiprintf_r+0x44>
 800520c:	2300      	movs	r3, #0
 800520e:	9309      	str	r3, [sp, #36]	; 0x24
 8005210:	2320      	movs	r3, #32
 8005212:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005216:	f8cd 800c 	str.w	r8, [sp, #12]
 800521a:	2330      	movs	r3, #48	; 0x30
 800521c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80053d0 <_vfiprintf_r+0x220>
 8005220:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005224:	f04f 0901 	mov.w	r9, #1
 8005228:	4623      	mov	r3, r4
 800522a:	469a      	mov	sl, r3
 800522c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005230:	b10a      	cbz	r2, 8005236 <_vfiprintf_r+0x86>
 8005232:	2a25      	cmp	r2, #37	; 0x25
 8005234:	d1f9      	bne.n	800522a <_vfiprintf_r+0x7a>
 8005236:	ebba 0b04 	subs.w	fp, sl, r4
 800523a:	d00b      	beq.n	8005254 <_vfiprintf_r+0xa4>
 800523c:	465b      	mov	r3, fp
 800523e:	4622      	mov	r2, r4
 8005240:	4629      	mov	r1, r5
 8005242:	4630      	mov	r0, r6
 8005244:	f7ff ffa1 	bl	800518a <__sfputs_r>
 8005248:	3001      	adds	r0, #1
 800524a:	f000 80a9 	beq.w	80053a0 <_vfiprintf_r+0x1f0>
 800524e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005250:	445a      	add	r2, fp
 8005252:	9209      	str	r2, [sp, #36]	; 0x24
 8005254:	f89a 3000 	ldrb.w	r3, [sl]
 8005258:	2b00      	cmp	r3, #0
 800525a:	f000 80a1 	beq.w	80053a0 <_vfiprintf_r+0x1f0>
 800525e:	2300      	movs	r3, #0
 8005260:	f04f 32ff 	mov.w	r2, #4294967295
 8005264:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005268:	f10a 0a01 	add.w	sl, sl, #1
 800526c:	9304      	str	r3, [sp, #16]
 800526e:	9307      	str	r3, [sp, #28]
 8005270:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005274:	931a      	str	r3, [sp, #104]	; 0x68
 8005276:	4654      	mov	r4, sl
 8005278:	2205      	movs	r2, #5
 800527a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800527e:	4854      	ldr	r0, [pc, #336]	; (80053d0 <_vfiprintf_r+0x220>)
 8005280:	f7fa ffa6 	bl	80001d0 <memchr>
 8005284:	9a04      	ldr	r2, [sp, #16]
 8005286:	b9d8      	cbnz	r0, 80052c0 <_vfiprintf_r+0x110>
 8005288:	06d1      	lsls	r1, r2, #27
 800528a:	bf44      	itt	mi
 800528c:	2320      	movmi	r3, #32
 800528e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005292:	0713      	lsls	r3, r2, #28
 8005294:	bf44      	itt	mi
 8005296:	232b      	movmi	r3, #43	; 0x2b
 8005298:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800529c:	f89a 3000 	ldrb.w	r3, [sl]
 80052a0:	2b2a      	cmp	r3, #42	; 0x2a
 80052a2:	d015      	beq.n	80052d0 <_vfiprintf_r+0x120>
 80052a4:	9a07      	ldr	r2, [sp, #28]
 80052a6:	4654      	mov	r4, sl
 80052a8:	2000      	movs	r0, #0
 80052aa:	f04f 0c0a 	mov.w	ip, #10
 80052ae:	4621      	mov	r1, r4
 80052b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052b4:	3b30      	subs	r3, #48	; 0x30
 80052b6:	2b09      	cmp	r3, #9
 80052b8:	d94d      	bls.n	8005356 <_vfiprintf_r+0x1a6>
 80052ba:	b1b0      	cbz	r0, 80052ea <_vfiprintf_r+0x13a>
 80052bc:	9207      	str	r2, [sp, #28]
 80052be:	e014      	b.n	80052ea <_vfiprintf_r+0x13a>
 80052c0:	eba0 0308 	sub.w	r3, r0, r8
 80052c4:	fa09 f303 	lsl.w	r3, r9, r3
 80052c8:	4313      	orrs	r3, r2
 80052ca:	9304      	str	r3, [sp, #16]
 80052cc:	46a2      	mov	sl, r4
 80052ce:	e7d2      	b.n	8005276 <_vfiprintf_r+0xc6>
 80052d0:	9b03      	ldr	r3, [sp, #12]
 80052d2:	1d19      	adds	r1, r3, #4
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	9103      	str	r1, [sp, #12]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	bfbb      	ittet	lt
 80052dc:	425b      	neglt	r3, r3
 80052de:	f042 0202 	orrlt.w	r2, r2, #2
 80052e2:	9307      	strge	r3, [sp, #28]
 80052e4:	9307      	strlt	r3, [sp, #28]
 80052e6:	bfb8      	it	lt
 80052e8:	9204      	strlt	r2, [sp, #16]
 80052ea:	7823      	ldrb	r3, [r4, #0]
 80052ec:	2b2e      	cmp	r3, #46	; 0x2e
 80052ee:	d10c      	bne.n	800530a <_vfiprintf_r+0x15a>
 80052f0:	7863      	ldrb	r3, [r4, #1]
 80052f2:	2b2a      	cmp	r3, #42	; 0x2a
 80052f4:	d134      	bne.n	8005360 <_vfiprintf_r+0x1b0>
 80052f6:	9b03      	ldr	r3, [sp, #12]
 80052f8:	1d1a      	adds	r2, r3, #4
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	9203      	str	r2, [sp, #12]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	bfb8      	it	lt
 8005302:	f04f 33ff 	movlt.w	r3, #4294967295
 8005306:	3402      	adds	r4, #2
 8005308:	9305      	str	r3, [sp, #20]
 800530a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80053e0 <_vfiprintf_r+0x230>
 800530e:	7821      	ldrb	r1, [r4, #0]
 8005310:	2203      	movs	r2, #3
 8005312:	4650      	mov	r0, sl
 8005314:	f7fa ff5c 	bl	80001d0 <memchr>
 8005318:	b138      	cbz	r0, 800532a <_vfiprintf_r+0x17a>
 800531a:	9b04      	ldr	r3, [sp, #16]
 800531c:	eba0 000a 	sub.w	r0, r0, sl
 8005320:	2240      	movs	r2, #64	; 0x40
 8005322:	4082      	lsls	r2, r0
 8005324:	4313      	orrs	r3, r2
 8005326:	3401      	adds	r4, #1
 8005328:	9304      	str	r3, [sp, #16]
 800532a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800532e:	4829      	ldr	r0, [pc, #164]	; (80053d4 <_vfiprintf_r+0x224>)
 8005330:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005334:	2206      	movs	r2, #6
 8005336:	f7fa ff4b 	bl	80001d0 <memchr>
 800533a:	2800      	cmp	r0, #0
 800533c:	d03f      	beq.n	80053be <_vfiprintf_r+0x20e>
 800533e:	4b26      	ldr	r3, [pc, #152]	; (80053d8 <_vfiprintf_r+0x228>)
 8005340:	bb1b      	cbnz	r3, 800538a <_vfiprintf_r+0x1da>
 8005342:	9b03      	ldr	r3, [sp, #12]
 8005344:	3307      	adds	r3, #7
 8005346:	f023 0307 	bic.w	r3, r3, #7
 800534a:	3308      	adds	r3, #8
 800534c:	9303      	str	r3, [sp, #12]
 800534e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005350:	443b      	add	r3, r7
 8005352:	9309      	str	r3, [sp, #36]	; 0x24
 8005354:	e768      	b.n	8005228 <_vfiprintf_r+0x78>
 8005356:	fb0c 3202 	mla	r2, ip, r2, r3
 800535a:	460c      	mov	r4, r1
 800535c:	2001      	movs	r0, #1
 800535e:	e7a6      	b.n	80052ae <_vfiprintf_r+0xfe>
 8005360:	2300      	movs	r3, #0
 8005362:	3401      	adds	r4, #1
 8005364:	9305      	str	r3, [sp, #20]
 8005366:	4619      	mov	r1, r3
 8005368:	f04f 0c0a 	mov.w	ip, #10
 800536c:	4620      	mov	r0, r4
 800536e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005372:	3a30      	subs	r2, #48	; 0x30
 8005374:	2a09      	cmp	r2, #9
 8005376:	d903      	bls.n	8005380 <_vfiprintf_r+0x1d0>
 8005378:	2b00      	cmp	r3, #0
 800537a:	d0c6      	beq.n	800530a <_vfiprintf_r+0x15a>
 800537c:	9105      	str	r1, [sp, #20]
 800537e:	e7c4      	b.n	800530a <_vfiprintf_r+0x15a>
 8005380:	fb0c 2101 	mla	r1, ip, r1, r2
 8005384:	4604      	mov	r4, r0
 8005386:	2301      	movs	r3, #1
 8005388:	e7f0      	b.n	800536c <_vfiprintf_r+0x1bc>
 800538a:	ab03      	add	r3, sp, #12
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	462a      	mov	r2, r5
 8005390:	4b12      	ldr	r3, [pc, #72]	; (80053dc <_vfiprintf_r+0x22c>)
 8005392:	a904      	add	r1, sp, #16
 8005394:	4630      	mov	r0, r6
 8005396:	f3af 8000 	nop.w
 800539a:	4607      	mov	r7, r0
 800539c:	1c78      	adds	r0, r7, #1
 800539e:	d1d6      	bne.n	800534e <_vfiprintf_r+0x19e>
 80053a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053a2:	07d9      	lsls	r1, r3, #31
 80053a4:	d405      	bmi.n	80053b2 <_vfiprintf_r+0x202>
 80053a6:	89ab      	ldrh	r3, [r5, #12]
 80053a8:	059a      	lsls	r2, r3, #22
 80053aa:	d402      	bmi.n	80053b2 <_vfiprintf_r+0x202>
 80053ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053ae:	f7ff fddb 	bl	8004f68 <__retarget_lock_release_recursive>
 80053b2:	89ab      	ldrh	r3, [r5, #12]
 80053b4:	065b      	lsls	r3, r3, #25
 80053b6:	f53f af1d 	bmi.w	80051f4 <_vfiprintf_r+0x44>
 80053ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053bc:	e71c      	b.n	80051f8 <_vfiprintf_r+0x48>
 80053be:	ab03      	add	r3, sp, #12
 80053c0:	9300      	str	r3, [sp, #0]
 80053c2:	462a      	mov	r2, r5
 80053c4:	4b05      	ldr	r3, [pc, #20]	; (80053dc <_vfiprintf_r+0x22c>)
 80053c6:	a904      	add	r1, sp, #16
 80053c8:	4630      	mov	r0, r6
 80053ca:	f000 f879 	bl	80054c0 <_printf_i>
 80053ce:	e7e4      	b.n	800539a <_vfiprintf_r+0x1ea>
 80053d0:	08005b8c 	.word	0x08005b8c
 80053d4:	08005b96 	.word	0x08005b96
 80053d8:	00000000 	.word	0x00000000
 80053dc:	0800518b 	.word	0x0800518b
 80053e0:	08005b92 	.word	0x08005b92

080053e4 <_printf_common>:
 80053e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053e8:	4616      	mov	r6, r2
 80053ea:	4699      	mov	r9, r3
 80053ec:	688a      	ldr	r2, [r1, #8]
 80053ee:	690b      	ldr	r3, [r1, #16]
 80053f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053f4:	4293      	cmp	r3, r2
 80053f6:	bfb8      	it	lt
 80053f8:	4613      	movlt	r3, r2
 80053fa:	6033      	str	r3, [r6, #0]
 80053fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005400:	4607      	mov	r7, r0
 8005402:	460c      	mov	r4, r1
 8005404:	b10a      	cbz	r2, 800540a <_printf_common+0x26>
 8005406:	3301      	adds	r3, #1
 8005408:	6033      	str	r3, [r6, #0]
 800540a:	6823      	ldr	r3, [r4, #0]
 800540c:	0699      	lsls	r1, r3, #26
 800540e:	bf42      	ittt	mi
 8005410:	6833      	ldrmi	r3, [r6, #0]
 8005412:	3302      	addmi	r3, #2
 8005414:	6033      	strmi	r3, [r6, #0]
 8005416:	6825      	ldr	r5, [r4, #0]
 8005418:	f015 0506 	ands.w	r5, r5, #6
 800541c:	d106      	bne.n	800542c <_printf_common+0x48>
 800541e:	f104 0a19 	add.w	sl, r4, #25
 8005422:	68e3      	ldr	r3, [r4, #12]
 8005424:	6832      	ldr	r2, [r6, #0]
 8005426:	1a9b      	subs	r3, r3, r2
 8005428:	42ab      	cmp	r3, r5
 800542a:	dc26      	bgt.n	800547a <_printf_common+0x96>
 800542c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005430:	1e13      	subs	r3, r2, #0
 8005432:	6822      	ldr	r2, [r4, #0]
 8005434:	bf18      	it	ne
 8005436:	2301      	movne	r3, #1
 8005438:	0692      	lsls	r2, r2, #26
 800543a:	d42b      	bmi.n	8005494 <_printf_common+0xb0>
 800543c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005440:	4649      	mov	r1, r9
 8005442:	4638      	mov	r0, r7
 8005444:	47c0      	blx	r8
 8005446:	3001      	adds	r0, #1
 8005448:	d01e      	beq.n	8005488 <_printf_common+0xa4>
 800544a:	6823      	ldr	r3, [r4, #0]
 800544c:	6922      	ldr	r2, [r4, #16]
 800544e:	f003 0306 	and.w	r3, r3, #6
 8005452:	2b04      	cmp	r3, #4
 8005454:	bf02      	ittt	eq
 8005456:	68e5      	ldreq	r5, [r4, #12]
 8005458:	6833      	ldreq	r3, [r6, #0]
 800545a:	1aed      	subeq	r5, r5, r3
 800545c:	68a3      	ldr	r3, [r4, #8]
 800545e:	bf0c      	ite	eq
 8005460:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005464:	2500      	movne	r5, #0
 8005466:	4293      	cmp	r3, r2
 8005468:	bfc4      	itt	gt
 800546a:	1a9b      	subgt	r3, r3, r2
 800546c:	18ed      	addgt	r5, r5, r3
 800546e:	2600      	movs	r6, #0
 8005470:	341a      	adds	r4, #26
 8005472:	42b5      	cmp	r5, r6
 8005474:	d11a      	bne.n	80054ac <_printf_common+0xc8>
 8005476:	2000      	movs	r0, #0
 8005478:	e008      	b.n	800548c <_printf_common+0xa8>
 800547a:	2301      	movs	r3, #1
 800547c:	4652      	mov	r2, sl
 800547e:	4649      	mov	r1, r9
 8005480:	4638      	mov	r0, r7
 8005482:	47c0      	blx	r8
 8005484:	3001      	adds	r0, #1
 8005486:	d103      	bne.n	8005490 <_printf_common+0xac>
 8005488:	f04f 30ff 	mov.w	r0, #4294967295
 800548c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005490:	3501      	adds	r5, #1
 8005492:	e7c6      	b.n	8005422 <_printf_common+0x3e>
 8005494:	18e1      	adds	r1, r4, r3
 8005496:	1c5a      	adds	r2, r3, #1
 8005498:	2030      	movs	r0, #48	; 0x30
 800549a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800549e:	4422      	add	r2, r4
 80054a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054a8:	3302      	adds	r3, #2
 80054aa:	e7c7      	b.n	800543c <_printf_common+0x58>
 80054ac:	2301      	movs	r3, #1
 80054ae:	4622      	mov	r2, r4
 80054b0:	4649      	mov	r1, r9
 80054b2:	4638      	mov	r0, r7
 80054b4:	47c0      	blx	r8
 80054b6:	3001      	adds	r0, #1
 80054b8:	d0e6      	beq.n	8005488 <_printf_common+0xa4>
 80054ba:	3601      	adds	r6, #1
 80054bc:	e7d9      	b.n	8005472 <_printf_common+0x8e>
	...

080054c0 <_printf_i>:
 80054c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054c4:	7e0f      	ldrb	r7, [r1, #24]
 80054c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054c8:	2f78      	cmp	r7, #120	; 0x78
 80054ca:	4691      	mov	r9, r2
 80054cc:	4680      	mov	r8, r0
 80054ce:	460c      	mov	r4, r1
 80054d0:	469a      	mov	sl, r3
 80054d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054d6:	d807      	bhi.n	80054e8 <_printf_i+0x28>
 80054d8:	2f62      	cmp	r7, #98	; 0x62
 80054da:	d80a      	bhi.n	80054f2 <_printf_i+0x32>
 80054dc:	2f00      	cmp	r7, #0
 80054de:	f000 80d4 	beq.w	800568a <_printf_i+0x1ca>
 80054e2:	2f58      	cmp	r7, #88	; 0x58
 80054e4:	f000 80c0 	beq.w	8005668 <_printf_i+0x1a8>
 80054e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054f0:	e03a      	b.n	8005568 <_printf_i+0xa8>
 80054f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054f6:	2b15      	cmp	r3, #21
 80054f8:	d8f6      	bhi.n	80054e8 <_printf_i+0x28>
 80054fa:	a101      	add	r1, pc, #4	; (adr r1, 8005500 <_printf_i+0x40>)
 80054fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005500:	08005559 	.word	0x08005559
 8005504:	0800556d 	.word	0x0800556d
 8005508:	080054e9 	.word	0x080054e9
 800550c:	080054e9 	.word	0x080054e9
 8005510:	080054e9 	.word	0x080054e9
 8005514:	080054e9 	.word	0x080054e9
 8005518:	0800556d 	.word	0x0800556d
 800551c:	080054e9 	.word	0x080054e9
 8005520:	080054e9 	.word	0x080054e9
 8005524:	080054e9 	.word	0x080054e9
 8005528:	080054e9 	.word	0x080054e9
 800552c:	08005671 	.word	0x08005671
 8005530:	08005599 	.word	0x08005599
 8005534:	0800562b 	.word	0x0800562b
 8005538:	080054e9 	.word	0x080054e9
 800553c:	080054e9 	.word	0x080054e9
 8005540:	08005693 	.word	0x08005693
 8005544:	080054e9 	.word	0x080054e9
 8005548:	08005599 	.word	0x08005599
 800554c:	080054e9 	.word	0x080054e9
 8005550:	080054e9 	.word	0x080054e9
 8005554:	08005633 	.word	0x08005633
 8005558:	682b      	ldr	r3, [r5, #0]
 800555a:	1d1a      	adds	r2, r3, #4
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	602a      	str	r2, [r5, #0]
 8005560:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005564:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005568:	2301      	movs	r3, #1
 800556a:	e09f      	b.n	80056ac <_printf_i+0x1ec>
 800556c:	6820      	ldr	r0, [r4, #0]
 800556e:	682b      	ldr	r3, [r5, #0]
 8005570:	0607      	lsls	r7, r0, #24
 8005572:	f103 0104 	add.w	r1, r3, #4
 8005576:	6029      	str	r1, [r5, #0]
 8005578:	d501      	bpl.n	800557e <_printf_i+0xbe>
 800557a:	681e      	ldr	r6, [r3, #0]
 800557c:	e003      	b.n	8005586 <_printf_i+0xc6>
 800557e:	0646      	lsls	r6, r0, #25
 8005580:	d5fb      	bpl.n	800557a <_printf_i+0xba>
 8005582:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005586:	2e00      	cmp	r6, #0
 8005588:	da03      	bge.n	8005592 <_printf_i+0xd2>
 800558a:	232d      	movs	r3, #45	; 0x2d
 800558c:	4276      	negs	r6, r6
 800558e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005592:	485a      	ldr	r0, [pc, #360]	; (80056fc <_printf_i+0x23c>)
 8005594:	230a      	movs	r3, #10
 8005596:	e012      	b.n	80055be <_printf_i+0xfe>
 8005598:	682b      	ldr	r3, [r5, #0]
 800559a:	6820      	ldr	r0, [r4, #0]
 800559c:	1d19      	adds	r1, r3, #4
 800559e:	6029      	str	r1, [r5, #0]
 80055a0:	0605      	lsls	r5, r0, #24
 80055a2:	d501      	bpl.n	80055a8 <_printf_i+0xe8>
 80055a4:	681e      	ldr	r6, [r3, #0]
 80055a6:	e002      	b.n	80055ae <_printf_i+0xee>
 80055a8:	0641      	lsls	r1, r0, #25
 80055aa:	d5fb      	bpl.n	80055a4 <_printf_i+0xe4>
 80055ac:	881e      	ldrh	r6, [r3, #0]
 80055ae:	4853      	ldr	r0, [pc, #332]	; (80056fc <_printf_i+0x23c>)
 80055b0:	2f6f      	cmp	r7, #111	; 0x6f
 80055b2:	bf0c      	ite	eq
 80055b4:	2308      	moveq	r3, #8
 80055b6:	230a      	movne	r3, #10
 80055b8:	2100      	movs	r1, #0
 80055ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055be:	6865      	ldr	r5, [r4, #4]
 80055c0:	60a5      	str	r5, [r4, #8]
 80055c2:	2d00      	cmp	r5, #0
 80055c4:	bfa2      	ittt	ge
 80055c6:	6821      	ldrge	r1, [r4, #0]
 80055c8:	f021 0104 	bicge.w	r1, r1, #4
 80055cc:	6021      	strge	r1, [r4, #0]
 80055ce:	b90e      	cbnz	r6, 80055d4 <_printf_i+0x114>
 80055d0:	2d00      	cmp	r5, #0
 80055d2:	d04b      	beq.n	800566c <_printf_i+0x1ac>
 80055d4:	4615      	mov	r5, r2
 80055d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80055da:	fb03 6711 	mls	r7, r3, r1, r6
 80055de:	5dc7      	ldrb	r7, [r0, r7]
 80055e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80055e4:	4637      	mov	r7, r6
 80055e6:	42bb      	cmp	r3, r7
 80055e8:	460e      	mov	r6, r1
 80055ea:	d9f4      	bls.n	80055d6 <_printf_i+0x116>
 80055ec:	2b08      	cmp	r3, #8
 80055ee:	d10b      	bne.n	8005608 <_printf_i+0x148>
 80055f0:	6823      	ldr	r3, [r4, #0]
 80055f2:	07de      	lsls	r6, r3, #31
 80055f4:	d508      	bpl.n	8005608 <_printf_i+0x148>
 80055f6:	6923      	ldr	r3, [r4, #16]
 80055f8:	6861      	ldr	r1, [r4, #4]
 80055fa:	4299      	cmp	r1, r3
 80055fc:	bfde      	ittt	le
 80055fe:	2330      	movle	r3, #48	; 0x30
 8005600:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005604:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005608:	1b52      	subs	r2, r2, r5
 800560a:	6122      	str	r2, [r4, #16]
 800560c:	f8cd a000 	str.w	sl, [sp]
 8005610:	464b      	mov	r3, r9
 8005612:	aa03      	add	r2, sp, #12
 8005614:	4621      	mov	r1, r4
 8005616:	4640      	mov	r0, r8
 8005618:	f7ff fee4 	bl	80053e4 <_printf_common>
 800561c:	3001      	adds	r0, #1
 800561e:	d14a      	bne.n	80056b6 <_printf_i+0x1f6>
 8005620:	f04f 30ff 	mov.w	r0, #4294967295
 8005624:	b004      	add	sp, #16
 8005626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	f043 0320 	orr.w	r3, r3, #32
 8005630:	6023      	str	r3, [r4, #0]
 8005632:	4833      	ldr	r0, [pc, #204]	; (8005700 <_printf_i+0x240>)
 8005634:	2778      	movs	r7, #120	; 0x78
 8005636:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800563a:	6823      	ldr	r3, [r4, #0]
 800563c:	6829      	ldr	r1, [r5, #0]
 800563e:	061f      	lsls	r7, r3, #24
 8005640:	f851 6b04 	ldr.w	r6, [r1], #4
 8005644:	d402      	bmi.n	800564c <_printf_i+0x18c>
 8005646:	065f      	lsls	r7, r3, #25
 8005648:	bf48      	it	mi
 800564a:	b2b6      	uxthmi	r6, r6
 800564c:	07df      	lsls	r7, r3, #31
 800564e:	bf48      	it	mi
 8005650:	f043 0320 	orrmi.w	r3, r3, #32
 8005654:	6029      	str	r1, [r5, #0]
 8005656:	bf48      	it	mi
 8005658:	6023      	strmi	r3, [r4, #0]
 800565a:	b91e      	cbnz	r6, 8005664 <_printf_i+0x1a4>
 800565c:	6823      	ldr	r3, [r4, #0]
 800565e:	f023 0320 	bic.w	r3, r3, #32
 8005662:	6023      	str	r3, [r4, #0]
 8005664:	2310      	movs	r3, #16
 8005666:	e7a7      	b.n	80055b8 <_printf_i+0xf8>
 8005668:	4824      	ldr	r0, [pc, #144]	; (80056fc <_printf_i+0x23c>)
 800566a:	e7e4      	b.n	8005636 <_printf_i+0x176>
 800566c:	4615      	mov	r5, r2
 800566e:	e7bd      	b.n	80055ec <_printf_i+0x12c>
 8005670:	682b      	ldr	r3, [r5, #0]
 8005672:	6826      	ldr	r6, [r4, #0]
 8005674:	6961      	ldr	r1, [r4, #20]
 8005676:	1d18      	adds	r0, r3, #4
 8005678:	6028      	str	r0, [r5, #0]
 800567a:	0635      	lsls	r5, r6, #24
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	d501      	bpl.n	8005684 <_printf_i+0x1c4>
 8005680:	6019      	str	r1, [r3, #0]
 8005682:	e002      	b.n	800568a <_printf_i+0x1ca>
 8005684:	0670      	lsls	r0, r6, #25
 8005686:	d5fb      	bpl.n	8005680 <_printf_i+0x1c0>
 8005688:	8019      	strh	r1, [r3, #0]
 800568a:	2300      	movs	r3, #0
 800568c:	6123      	str	r3, [r4, #16]
 800568e:	4615      	mov	r5, r2
 8005690:	e7bc      	b.n	800560c <_printf_i+0x14c>
 8005692:	682b      	ldr	r3, [r5, #0]
 8005694:	1d1a      	adds	r2, r3, #4
 8005696:	602a      	str	r2, [r5, #0]
 8005698:	681d      	ldr	r5, [r3, #0]
 800569a:	6862      	ldr	r2, [r4, #4]
 800569c:	2100      	movs	r1, #0
 800569e:	4628      	mov	r0, r5
 80056a0:	f7fa fd96 	bl	80001d0 <memchr>
 80056a4:	b108      	cbz	r0, 80056aa <_printf_i+0x1ea>
 80056a6:	1b40      	subs	r0, r0, r5
 80056a8:	6060      	str	r0, [r4, #4]
 80056aa:	6863      	ldr	r3, [r4, #4]
 80056ac:	6123      	str	r3, [r4, #16]
 80056ae:	2300      	movs	r3, #0
 80056b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056b4:	e7aa      	b.n	800560c <_printf_i+0x14c>
 80056b6:	6923      	ldr	r3, [r4, #16]
 80056b8:	462a      	mov	r2, r5
 80056ba:	4649      	mov	r1, r9
 80056bc:	4640      	mov	r0, r8
 80056be:	47d0      	blx	sl
 80056c0:	3001      	adds	r0, #1
 80056c2:	d0ad      	beq.n	8005620 <_printf_i+0x160>
 80056c4:	6823      	ldr	r3, [r4, #0]
 80056c6:	079b      	lsls	r3, r3, #30
 80056c8:	d413      	bmi.n	80056f2 <_printf_i+0x232>
 80056ca:	68e0      	ldr	r0, [r4, #12]
 80056cc:	9b03      	ldr	r3, [sp, #12]
 80056ce:	4298      	cmp	r0, r3
 80056d0:	bfb8      	it	lt
 80056d2:	4618      	movlt	r0, r3
 80056d4:	e7a6      	b.n	8005624 <_printf_i+0x164>
 80056d6:	2301      	movs	r3, #1
 80056d8:	4632      	mov	r2, r6
 80056da:	4649      	mov	r1, r9
 80056dc:	4640      	mov	r0, r8
 80056de:	47d0      	blx	sl
 80056e0:	3001      	adds	r0, #1
 80056e2:	d09d      	beq.n	8005620 <_printf_i+0x160>
 80056e4:	3501      	adds	r5, #1
 80056e6:	68e3      	ldr	r3, [r4, #12]
 80056e8:	9903      	ldr	r1, [sp, #12]
 80056ea:	1a5b      	subs	r3, r3, r1
 80056ec:	42ab      	cmp	r3, r5
 80056ee:	dcf2      	bgt.n	80056d6 <_printf_i+0x216>
 80056f0:	e7eb      	b.n	80056ca <_printf_i+0x20a>
 80056f2:	2500      	movs	r5, #0
 80056f4:	f104 0619 	add.w	r6, r4, #25
 80056f8:	e7f5      	b.n	80056e6 <_printf_i+0x226>
 80056fa:	bf00      	nop
 80056fc:	08005b9d 	.word	0x08005b9d
 8005700:	08005bae 	.word	0x08005bae

08005704 <__sflush_r>:
 8005704:	898a      	ldrh	r2, [r1, #12]
 8005706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800570a:	4605      	mov	r5, r0
 800570c:	0710      	lsls	r0, r2, #28
 800570e:	460c      	mov	r4, r1
 8005710:	d458      	bmi.n	80057c4 <__sflush_r+0xc0>
 8005712:	684b      	ldr	r3, [r1, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	dc05      	bgt.n	8005724 <__sflush_r+0x20>
 8005718:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800571a:	2b00      	cmp	r3, #0
 800571c:	dc02      	bgt.n	8005724 <__sflush_r+0x20>
 800571e:	2000      	movs	r0, #0
 8005720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005724:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005726:	2e00      	cmp	r6, #0
 8005728:	d0f9      	beq.n	800571e <__sflush_r+0x1a>
 800572a:	2300      	movs	r3, #0
 800572c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005730:	682f      	ldr	r7, [r5, #0]
 8005732:	6a21      	ldr	r1, [r4, #32]
 8005734:	602b      	str	r3, [r5, #0]
 8005736:	d032      	beq.n	800579e <__sflush_r+0x9a>
 8005738:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800573a:	89a3      	ldrh	r3, [r4, #12]
 800573c:	075a      	lsls	r2, r3, #29
 800573e:	d505      	bpl.n	800574c <__sflush_r+0x48>
 8005740:	6863      	ldr	r3, [r4, #4]
 8005742:	1ac0      	subs	r0, r0, r3
 8005744:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005746:	b10b      	cbz	r3, 800574c <__sflush_r+0x48>
 8005748:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800574a:	1ac0      	subs	r0, r0, r3
 800574c:	2300      	movs	r3, #0
 800574e:	4602      	mov	r2, r0
 8005750:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005752:	6a21      	ldr	r1, [r4, #32]
 8005754:	4628      	mov	r0, r5
 8005756:	47b0      	blx	r6
 8005758:	1c43      	adds	r3, r0, #1
 800575a:	89a3      	ldrh	r3, [r4, #12]
 800575c:	d106      	bne.n	800576c <__sflush_r+0x68>
 800575e:	6829      	ldr	r1, [r5, #0]
 8005760:	291d      	cmp	r1, #29
 8005762:	d82b      	bhi.n	80057bc <__sflush_r+0xb8>
 8005764:	4a29      	ldr	r2, [pc, #164]	; (800580c <__sflush_r+0x108>)
 8005766:	410a      	asrs	r2, r1
 8005768:	07d6      	lsls	r6, r2, #31
 800576a:	d427      	bmi.n	80057bc <__sflush_r+0xb8>
 800576c:	2200      	movs	r2, #0
 800576e:	6062      	str	r2, [r4, #4]
 8005770:	04d9      	lsls	r1, r3, #19
 8005772:	6922      	ldr	r2, [r4, #16]
 8005774:	6022      	str	r2, [r4, #0]
 8005776:	d504      	bpl.n	8005782 <__sflush_r+0x7e>
 8005778:	1c42      	adds	r2, r0, #1
 800577a:	d101      	bne.n	8005780 <__sflush_r+0x7c>
 800577c:	682b      	ldr	r3, [r5, #0]
 800577e:	b903      	cbnz	r3, 8005782 <__sflush_r+0x7e>
 8005780:	6560      	str	r0, [r4, #84]	; 0x54
 8005782:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005784:	602f      	str	r7, [r5, #0]
 8005786:	2900      	cmp	r1, #0
 8005788:	d0c9      	beq.n	800571e <__sflush_r+0x1a>
 800578a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800578e:	4299      	cmp	r1, r3
 8005790:	d002      	beq.n	8005798 <__sflush_r+0x94>
 8005792:	4628      	mov	r0, r5
 8005794:	f7ff fbea 	bl	8004f6c <_free_r>
 8005798:	2000      	movs	r0, #0
 800579a:	6360      	str	r0, [r4, #52]	; 0x34
 800579c:	e7c0      	b.n	8005720 <__sflush_r+0x1c>
 800579e:	2301      	movs	r3, #1
 80057a0:	4628      	mov	r0, r5
 80057a2:	47b0      	blx	r6
 80057a4:	1c41      	adds	r1, r0, #1
 80057a6:	d1c8      	bne.n	800573a <__sflush_r+0x36>
 80057a8:	682b      	ldr	r3, [r5, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0c5      	beq.n	800573a <__sflush_r+0x36>
 80057ae:	2b1d      	cmp	r3, #29
 80057b0:	d001      	beq.n	80057b6 <__sflush_r+0xb2>
 80057b2:	2b16      	cmp	r3, #22
 80057b4:	d101      	bne.n	80057ba <__sflush_r+0xb6>
 80057b6:	602f      	str	r7, [r5, #0]
 80057b8:	e7b1      	b.n	800571e <__sflush_r+0x1a>
 80057ba:	89a3      	ldrh	r3, [r4, #12]
 80057bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057c0:	81a3      	strh	r3, [r4, #12]
 80057c2:	e7ad      	b.n	8005720 <__sflush_r+0x1c>
 80057c4:	690f      	ldr	r7, [r1, #16]
 80057c6:	2f00      	cmp	r7, #0
 80057c8:	d0a9      	beq.n	800571e <__sflush_r+0x1a>
 80057ca:	0793      	lsls	r3, r2, #30
 80057cc:	680e      	ldr	r6, [r1, #0]
 80057ce:	bf08      	it	eq
 80057d0:	694b      	ldreq	r3, [r1, #20]
 80057d2:	600f      	str	r7, [r1, #0]
 80057d4:	bf18      	it	ne
 80057d6:	2300      	movne	r3, #0
 80057d8:	eba6 0807 	sub.w	r8, r6, r7
 80057dc:	608b      	str	r3, [r1, #8]
 80057de:	f1b8 0f00 	cmp.w	r8, #0
 80057e2:	dd9c      	ble.n	800571e <__sflush_r+0x1a>
 80057e4:	6a21      	ldr	r1, [r4, #32]
 80057e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80057e8:	4643      	mov	r3, r8
 80057ea:	463a      	mov	r2, r7
 80057ec:	4628      	mov	r0, r5
 80057ee:	47b0      	blx	r6
 80057f0:	2800      	cmp	r0, #0
 80057f2:	dc06      	bgt.n	8005802 <__sflush_r+0xfe>
 80057f4:	89a3      	ldrh	r3, [r4, #12]
 80057f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057fa:	81a3      	strh	r3, [r4, #12]
 80057fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005800:	e78e      	b.n	8005720 <__sflush_r+0x1c>
 8005802:	4407      	add	r7, r0
 8005804:	eba8 0800 	sub.w	r8, r8, r0
 8005808:	e7e9      	b.n	80057de <__sflush_r+0xda>
 800580a:	bf00      	nop
 800580c:	dfbffffe 	.word	0xdfbffffe

08005810 <_fflush_r>:
 8005810:	b538      	push	{r3, r4, r5, lr}
 8005812:	690b      	ldr	r3, [r1, #16]
 8005814:	4605      	mov	r5, r0
 8005816:	460c      	mov	r4, r1
 8005818:	b913      	cbnz	r3, 8005820 <_fflush_r+0x10>
 800581a:	2500      	movs	r5, #0
 800581c:	4628      	mov	r0, r5
 800581e:	bd38      	pop	{r3, r4, r5, pc}
 8005820:	b118      	cbz	r0, 800582a <_fflush_r+0x1a>
 8005822:	6a03      	ldr	r3, [r0, #32]
 8005824:	b90b      	cbnz	r3, 800582a <_fflush_r+0x1a>
 8005826:	f7ff fa99 	bl	8004d5c <__sinit>
 800582a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d0f3      	beq.n	800581a <_fflush_r+0xa>
 8005832:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005834:	07d0      	lsls	r0, r2, #31
 8005836:	d404      	bmi.n	8005842 <_fflush_r+0x32>
 8005838:	0599      	lsls	r1, r3, #22
 800583a:	d402      	bmi.n	8005842 <_fflush_r+0x32>
 800583c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800583e:	f7ff fb92 	bl	8004f66 <__retarget_lock_acquire_recursive>
 8005842:	4628      	mov	r0, r5
 8005844:	4621      	mov	r1, r4
 8005846:	f7ff ff5d 	bl	8005704 <__sflush_r>
 800584a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800584c:	07da      	lsls	r2, r3, #31
 800584e:	4605      	mov	r5, r0
 8005850:	d4e4      	bmi.n	800581c <_fflush_r+0xc>
 8005852:	89a3      	ldrh	r3, [r4, #12]
 8005854:	059b      	lsls	r3, r3, #22
 8005856:	d4e1      	bmi.n	800581c <_fflush_r+0xc>
 8005858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800585a:	f7ff fb85 	bl	8004f68 <__retarget_lock_release_recursive>
 800585e:	e7dd      	b.n	800581c <_fflush_r+0xc>

08005860 <__swbuf_r>:
 8005860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005862:	460e      	mov	r6, r1
 8005864:	4614      	mov	r4, r2
 8005866:	4605      	mov	r5, r0
 8005868:	b118      	cbz	r0, 8005872 <__swbuf_r+0x12>
 800586a:	6a03      	ldr	r3, [r0, #32]
 800586c:	b90b      	cbnz	r3, 8005872 <__swbuf_r+0x12>
 800586e:	f7ff fa75 	bl	8004d5c <__sinit>
 8005872:	69a3      	ldr	r3, [r4, #24]
 8005874:	60a3      	str	r3, [r4, #8]
 8005876:	89a3      	ldrh	r3, [r4, #12]
 8005878:	071a      	lsls	r2, r3, #28
 800587a:	d525      	bpl.n	80058c8 <__swbuf_r+0x68>
 800587c:	6923      	ldr	r3, [r4, #16]
 800587e:	b31b      	cbz	r3, 80058c8 <__swbuf_r+0x68>
 8005880:	6823      	ldr	r3, [r4, #0]
 8005882:	6922      	ldr	r2, [r4, #16]
 8005884:	1a98      	subs	r0, r3, r2
 8005886:	6963      	ldr	r3, [r4, #20]
 8005888:	b2f6      	uxtb	r6, r6
 800588a:	4283      	cmp	r3, r0
 800588c:	4637      	mov	r7, r6
 800588e:	dc04      	bgt.n	800589a <__swbuf_r+0x3a>
 8005890:	4621      	mov	r1, r4
 8005892:	4628      	mov	r0, r5
 8005894:	f7ff ffbc 	bl	8005810 <_fflush_r>
 8005898:	b9e0      	cbnz	r0, 80058d4 <__swbuf_r+0x74>
 800589a:	68a3      	ldr	r3, [r4, #8]
 800589c:	3b01      	subs	r3, #1
 800589e:	60a3      	str	r3, [r4, #8]
 80058a0:	6823      	ldr	r3, [r4, #0]
 80058a2:	1c5a      	adds	r2, r3, #1
 80058a4:	6022      	str	r2, [r4, #0]
 80058a6:	701e      	strb	r6, [r3, #0]
 80058a8:	6962      	ldr	r2, [r4, #20]
 80058aa:	1c43      	adds	r3, r0, #1
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d004      	beq.n	80058ba <__swbuf_r+0x5a>
 80058b0:	89a3      	ldrh	r3, [r4, #12]
 80058b2:	07db      	lsls	r3, r3, #31
 80058b4:	d506      	bpl.n	80058c4 <__swbuf_r+0x64>
 80058b6:	2e0a      	cmp	r6, #10
 80058b8:	d104      	bne.n	80058c4 <__swbuf_r+0x64>
 80058ba:	4621      	mov	r1, r4
 80058bc:	4628      	mov	r0, r5
 80058be:	f7ff ffa7 	bl	8005810 <_fflush_r>
 80058c2:	b938      	cbnz	r0, 80058d4 <__swbuf_r+0x74>
 80058c4:	4638      	mov	r0, r7
 80058c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058c8:	4621      	mov	r1, r4
 80058ca:	4628      	mov	r0, r5
 80058cc:	f000 f806 	bl	80058dc <__swsetup_r>
 80058d0:	2800      	cmp	r0, #0
 80058d2:	d0d5      	beq.n	8005880 <__swbuf_r+0x20>
 80058d4:	f04f 37ff 	mov.w	r7, #4294967295
 80058d8:	e7f4      	b.n	80058c4 <__swbuf_r+0x64>
	...

080058dc <__swsetup_r>:
 80058dc:	b538      	push	{r3, r4, r5, lr}
 80058de:	4b2a      	ldr	r3, [pc, #168]	; (8005988 <__swsetup_r+0xac>)
 80058e0:	4605      	mov	r5, r0
 80058e2:	6818      	ldr	r0, [r3, #0]
 80058e4:	460c      	mov	r4, r1
 80058e6:	b118      	cbz	r0, 80058f0 <__swsetup_r+0x14>
 80058e8:	6a03      	ldr	r3, [r0, #32]
 80058ea:	b90b      	cbnz	r3, 80058f0 <__swsetup_r+0x14>
 80058ec:	f7ff fa36 	bl	8004d5c <__sinit>
 80058f0:	89a3      	ldrh	r3, [r4, #12]
 80058f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058f6:	0718      	lsls	r0, r3, #28
 80058f8:	d422      	bmi.n	8005940 <__swsetup_r+0x64>
 80058fa:	06d9      	lsls	r1, r3, #27
 80058fc:	d407      	bmi.n	800590e <__swsetup_r+0x32>
 80058fe:	2309      	movs	r3, #9
 8005900:	602b      	str	r3, [r5, #0]
 8005902:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005906:	81a3      	strh	r3, [r4, #12]
 8005908:	f04f 30ff 	mov.w	r0, #4294967295
 800590c:	e034      	b.n	8005978 <__swsetup_r+0x9c>
 800590e:	0758      	lsls	r0, r3, #29
 8005910:	d512      	bpl.n	8005938 <__swsetup_r+0x5c>
 8005912:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005914:	b141      	cbz	r1, 8005928 <__swsetup_r+0x4c>
 8005916:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800591a:	4299      	cmp	r1, r3
 800591c:	d002      	beq.n	8005924 <__swsetup_r+0x48>
 800591e:	4628      	mov	r0, r5
 8005920:	f7ff fb24 	bl	8004f6c <_free_r>
 8005924:	2300      	movs	r3, #0
 8005926:	6363      	str	r3, [r4, #52]	; 0x34
 8005928:	89a3      	ldrh	r3, [r4, #12]
 800592a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800592e:	81a3      	strh	r3, [r4, #12]
 8005930:	2300      	movs	r3, #0
 8005932:	6063      	str	r3, [r4, #4]
 8005934:	6923      	ldr	r3, [r4, #16]
 8005936:	6023      	str	r3, [r4, #0]
 8005938:	89a3      	ldrh	r3, [r4, #12]
 800593a:	f043 0308 	orr.w	r3, r3, #8
 800593e:	81a3      	strh	r3, [r4, #12]
 8005940:	6923      	ldr	r3, [r4, #16]
 8005942:	b94b      	cbnz	r3, 8005958 <__swsetup_r+0x7c>
 8005944:	89a3      	ldrh	r3, [r4, #12]
 8005946:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800594a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800594e:	d003      	beq.n	8005958 <__swsetup_r+0x7c>
 8005950:	4621      	mov	r1, r4
 8005952:	4628      	mov	r0, r5
 8005954:	f000 f850 	bl	80059f8 <__smakebuf_r>
 8005958:	89a0      	ldrh	r0, [r4, #12]
 800595a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800595e:	f010 0301 	ands.w	r3, r0, #1
 8005962:	d00a      	beq.n	800597a <__swsetup_r+0x9e>
 8005964:	2300      	movs	r3, #0
 8005966:	60a3      	str	r3, [r4, #8]
 8005968:	6963      	ldr	r3, [r4, #20]
 800596a:	425b      	negs	r3, r3
 800596c:	61a3      	str	r3, [r4, #24]
 800596e:	6923      	ldr	r3, [r4, #16]
 8005970:	b943      	cbnz	r3, 8005984 <__swsetup_r+0xa8>
 8005972:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005976:	d1c4      	bne.n	8005902 <__swsetup_r+0x26>
 8005978:	bd38      	pop	{r3, r4, r5, pc}
 800597a:	0781      	lsls	r1, r0, #30
 800597c:	bf58      	it	pl
 800597e:	6963      	ldrpl	r3, [r4, #20]
 8005980:	60a3      	str	r3, [r4, #8]
 8005982:	e7f4      	b.n	800596e <__swsetup_r+0x92>
 8005984:	2000      	movs	r0, #0
 8005986:	e7f7      	b.n	8005978 <__swsetup_r+0x9c>
 8005988:	20000064 	.word	0x20000064

0800598c <_sbrk_r>:
 800598c:	b538      	push	{r3, r4, r5, lr}
 800598e:	4d06      	ldr	r5, [pc, #24]	; (80059a8 <_sbrk_r+0x1c>)
 8005990:	2300      	movs	r3, #0
 8005992:	4604      	mov	r4, r0
 8005994:	4608      	mov	r0, r1
 8005996:	602b      	str	r3, [r5, #0]
 8005998:	f7fb fcd0 	bl	800133c <_sbrk>
 800599c:	1c43      	adds	r3, r0, #1
 800599e:	d102      	bne.n	80059a6 <_sbrk_r+0x1a>
 80059a0:	682b      	ldr	r3, [r5, #0]
 80059a2:	b103      	cbz	r3, 80059a6 <_sbrk_r+0x1a>
 80059a4:	6023      	str	r3, [r4, #0]
 80059a6:	bd38      	pop	{r3, r4, r5, pc}
 80059a8:	200002a8 	.word	0x200002a8

080059ac <__swhatbuf_r>:
 80059ac:	b570      	push	{r4, r5, r6, lr}
 80059ae:	460c      	mov	r4, r1
 80059b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059b4:	2900      	cmp	r1, #0
 80059b6:	b096      	sub	sp, #88	; 0x58
 80059b8:	4615      	mov	r5, r2
 80059ba:	461e      	mov	r6, r3
 80059bc:	da0d      	bge.n	80059da <__swhatbuf_r+0x2e>
 80059be:	89a3      	ldrh	r3, [r4, #12]
 80059c0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80059c4:	f04f 0100 	mov.w	r1, #0
 80059c8:	bf0c      	ite	eq
 80059ca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80059ce:	2340      	movne	r3, #64	; 0x40
 80059d0:	2000      	movs	r0, #0
 80059d2:	6031      	str	r1, [r6, #0]
 80059d4:	602b      	str	r3, [r5, #0]
 80059d6:	b016      	add	sp, #88	; 0x58
 80059d8:	bd70      	pop	{r4, r5, r6, pc}
 80059da:	466a      	mov	r2, sp
 80059dc:	f000 f848 	bl	8005a70 <_fstat_r>
 80059e0:	2800      	cmp	r0, #0
 80059e2:	dbec      	blt.n	80059be <__swhatbuf_r+0x12>
 80059e4:	9901      	ldr	r1, [sp, #4]
 80059e6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80059ea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80059ee:	4259      	negs	r1, r3
 80059f0:	4159      	adcs	r1, r3
 80059f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059f6:	e7eb      	b.n	80059d0 <__swhatbuf_r+0x24>

080059f8 <__smakebuf_r>:
 80059f8:	898b      	ldrh	r3, [r1, #12]
 80059fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80059fc:	079d      	lsls	r5, r3, #30
 80059fe:	4606      	mov	r6, r0
 8005a00:	460c      	mov	r4, r1
 8005a02:	d507      	bpl.n	8005a14 <__smakebuf_r+0x1c>
 8005a04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a08:	6023      	str	r3, [r4, #0]
 8005a0a:	6123      	str	r3, [r4, #16]
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	6163      	str	r3, [r4, #20]
 8005a10:	b002      	add	sp, #8
 8005a12:	bd70      	pop	{r4, r5, r6, pc}
 8005a14:	ab01      	add	r3, sp, #4
 8005a16:	466a      	mov	r2, sp
 8005a18:	f7ff ffc8 	bl	80059ac <__swhatbuf_r>
 8005a1c:	9900      	ldr	r1, [sp, #0]
 8005a1e:	4605      	mov	r5, r0
 8005a20:	4630      	mov	r0, r6
 8005a22:	f7ff fb0f 	bl	8005044 <_malloc_r>
 8005a26:	b948      	cbnz	r0, 8005a3c <__smakebuf_r+0x44>
 8005a28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a2c:	059a      	lsls	r2, r3, #22
 8005a2e:	d4ef      	bmi.n	8005a10 <__smakebuf_r+0x18>
 8005a30:	f023 0303 	bic.w	r3, r3, #3
 8005a34:	f043 0302 	orr.w	r3, r3, #2
 8005a38:	81a3      	strh	r3, [r4, #12]
 8005a3a:	e7e3      	b.n	8005a04 <__smakebuf_r+0xc>
 8005a3c:	89a3      	ldrh	r3, [r4, #12]
 8005a3e:	6020      	str	r0, [r4, #0]
 8005a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a44:	81a3      	strh	r3, [r4, #12]
 8005a46:	9b00      	ldr	r3, [sp, #0]
 8005a48:	6163      	str	r3, [r4, #20]
 8005a4a:	9b01      	ldr	r3, [sp, #4]
 8005a4c:	6120      	str	r0, [r4, #16]
 8005a4e:	b15b      	cbz	r3, 8005a68 <__smakebuf_r+0x70>
 8005a50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a54:	4630      	mov	r0, r6
 8005a56:	f000 f81d 	bl	8005a94 <_isatty_r>
 8005a5a:	b128      	cbz	r0, 8005a68 <__smakebuf_r+0x70>
 8005a5c:	89a3      	ldrh	r3, [r4, #12]
 8005a5e:	f023 0303 	bic.w	r3, r3, #3
 8005a62:	f043 0301 	orr.w	r3, r3, #1
 8005a66:	81a3      	strh	r3, [r4, #12]
 8005a68:	89a3      	ldrh	r3, [r4, #12]
 8005a6a:	431d      	orrs	r5, r3
 8005a6c:	81a5      	strh	r5, [r4, #12]
 8005a6e:	e7cf      	b.n	8005a10 <__smakebuf_r+0x18>

08005a70 <_fstat_r>:
 8005a70:	b538      	push	{r3, r4, r5, lr}
 8005a72:	4d07      	ldr	r5, [pc, #28]	; (8005a90 <_fstat_r+0x20>)
 8005a74:	2300      	movs	r3, #0
 8005a76:	4604      	mov	r4, r0
 8005a78:	4608      	mov	r0, r1
 8005a7a:	4611      	mov	r1, r2
 8005a7c:	602b      	str	r3, [r5, #0]
 8005a7e:	f7fb fc34 	bl	80012ea <_fstat>
 8005a82:	1c43      	adds	r3, r0, #1
 8005a84:	d102      	bne.n	8005a8c <_fstat_r+0x1c>
 8005a86:	682b      	ldr	r3, [r5, #0]
 8005a88:	b103      	cbz	r3, 8005a8c <_fstat_r+0x1c>
 8005a8a:	6023      	str	r3, [r4, #0]
 8005a8c:	bd38      	pop	{r3, r4, r5, pc}
 8005a8e:	bf00      	nop
 8005a90:	200002a8 	.word	0x200002a8

08005a94 <_isatty_r>:
 8005a94:	b538      	push	{r3, r4, r5, lr}
 8005a96:	4d06      	ldr	r5, [pc, #24]	; (8005ab0 <_isatty_r+0x1c>)
 8005a98:	2300      	movs	r3, #0
 8005a9a:	4604      	mov	r4, r0
 8005a9c:	4608      	mov	r0, r1
 8005a9e:	602b      	str	r3, [r5, #0]
 8005aa0:	f7fb fc33 	bl	800130a <_isatty>
 8005aa4:	1c43      	adds	r3, r0, #1
 8005aa6:	d102      	bne.n	8005aae <_isatty_r+0x1a>
 8005aa8:	682b      	ldr	r3, [r5, #0]
 8005aaa:	b103      	cbz	r3, 8005aae <_isatty_r+0x1a>
 8005aac:	6023      	str	r3, [r4, #0]
 8005aae:	bd38      	pop	{r3, r4, r5, pc}
 8005ab0:	200002a8 	.word	0x200002a8

08005ab4 <_init>:
 8005ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab6:	bf00      	nop
 8005ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aba:	bc08      	pop	{r3}
 8005abc:	469e      	mov	lr, r3
 8005abe:	4770      	bx	lr

08005ac0 <_fini>:
 8005ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac2:	bf00      	nop
 8005ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ac6:	bc08      	pop	{r3}
 8005ac8:	469e      	mov	lr, r3
 8005aca:	4770      	bx	lr
